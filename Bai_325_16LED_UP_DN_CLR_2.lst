CCS PCH C Compiler, Version 5.015, 5967               13-Sep-22 10:57

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\Bai_325_16LED_UP_DN_CLR_2.lst

               ROM used:   706 bytes (2%)
                           Largest free fragment is 32062
               RAM used:   28 (1%) at main() level
                           42 (2%) worst case
               Stack used: 4 locations
               Stack size: 31

*
0000:  GOTO   0258
.................... //chua lam duoc 
.................... #include <tv_pickit2_shift_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
011A:  CLRF   FEA
011C:  MOVLW  1C
011E:  MOVWF  FE9
0120:  MOVF   FEF,W
0122:  BZ    013E
0124:  MOVLW  06
0126:  MOVWF  01
0128:  CLRF   00
012A:  DECFSZ 00,F
012C:  BRA    012A
012E:  DECFSZ 01,F
0130:  BRA    0128
0132:  MOVLW  7B
0134:  MOVWF  00
0136:  DECFSZ 00,F
0138:  BRA    0136
013A:  DECFSZ FEF,F
013C:  BRA    0124
013E:  RETURN 0
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
0004:  CLRF   29
0006:  MOVF   29,W
0008:  SUBLW  07
000A:  BNC   0028
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
000C:  BTFSC  28.7
000E:  BRA    0014
0010:  BCF    F8D.2
0012:  BRA    0016
0014:  BSF    F8D.2
0016:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
0018:  BCF    F96.0
001A:  BCF    F8D.0
001C:  BCF    F96.0
001E:  BSF    F8D.0
....................          X= X<<1;          
0020:  BCF    FD8.0
0022:  RLCF   28,F
0024:  INCF   29,F
0026:  BRA    0006
....................      } 
0028:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
*
00D2:  MOVFF  24,28
00D6:  RCALL  0004
....................       XUAT_1BYTE(BLD2); 
00D8:  MOVFF  25,28
00DC:  RCALL  0004
....................       XUAT_1BYTE(BLD1);           
00DE:  MOVFF  26,28
00E2:  RCALL  0004
....................       XUAT_1BYTE(BLD0);             
00E4:  MOVFF  27,28
00E8:  RCALL  0004
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
00EA:  BCF    F95.4
00EC:  BSF    F8C.4
....................       OUTPUT_LOW(RCK_32LED); 
00EE:  BCF    F95.4
00F0:  BCF    F8C.4
00F2:  GOTO   0118 (RETURN)
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
00F6:  MOVFF  1D,20
00FA:  MOVFF  1C,21
....................      B1 = WLD0>>8;  B0 = WLD0; 
00FE:  MOVFF  1F,22
0102:  MOVFF  1E,23
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
0106:  MOVFF  20,24
010A:  MOVFF  21,25
010E:  MOVFF  22,26
0112:  MOVFF  23,27
0116:  BRA    00D2
0118:  RETURN 0
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
*
002A:  MOVFF  1D,1E
002E:  MOVFF  1C,1F
....................    xuat_1byte(b1);     
0032:  MOVFF  1E,28
0036:  RCALL  0004
....................    xuat_1byte(b0); 
0038:  MOVFF  1F,28
003C:  RCALL  0004
003E:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
0040:  CLRF   1D
0042:  CLRF   1C
0044:  RCALL  002A
....................    xuat_1word(0);  
0046:  CLRF   1D
0048:  CLRF   1C
004A:  RCALL  002A
....................    xuat_1word(0);                              
004C:  CLRF   1D
004E:  CLRF   1C
0050:  RCALL  002A
....................    xuat_1word(0);                                     
0052:  CLRF   1D
0054:  CLRF   1C
0056:  RCALL  002A
....................     
....................    output_high(rck_buzerelay);    
0058:  BCF    F95.3
005A:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
005C:  BCF    F95.3
005E:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
0060:  BCF    F95.4
0062:  BSF    F8C.4
....................    output_low(rck_32led);  
0064:  BCF    F95.4
0066:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
0068:  BCF    F95.5
006A:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
006C:  BCF    F95.5
006E:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
0070:  BCF    F95.7
0072:  BSF    F8C.7
....................    output_low(rck_matranled);    
0074:  BCF    F95.7
0076:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
0078:  BCF    F95.2
007A:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
007C:  BCF    F95.2
007E:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
0080:  SETF   1D
0082:  SETF   1C
0084:  RCALL  002A
....................    xuat_1word(0xffff);  
0086:  SETF   1D
0088:  SETF   1C
008A:  RCALL  002A
....................    output_high(rck_4led7doan);        
008C:  BCF    F95.6
008E:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
0090:  BCF    F95.6
0092:  BCF    F8C.6
0094:  GOTO   00B0 (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
0098:  MOVLW  FF
009A:  MOVWF  F92
009C:  MOVLW  3C
009E:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
00A0:  MOVLW  F1
00A2:  MOVWF  F94
00A4:  MOVLW  00
00A6:  MOVWF  F96
....................    set_tris_d(0x00);     
00A8:  MOVWF  F95
....................    output_d(0x00);  
00AA:  CLRF   F95
00AC:  CLRF   F8C
....................    xoa_tat_6module(); 
00AE:  BRA    0040
....................    port_b_pullups(0xff);           
00B0:  BCF    FF1.7
....................    rbdc=0;                
00B2:  CLRF   06
00B4:  CLRF   05
....................              
....................    setup_adc(adc_clock_div_32);         
00B6:  MOVF   FC0,W
00B8:  ANDLW  C0
00BA:  IORLW  02
00BC:  MOVWF  FC0
00BE:  BSF    FC0.7
00C0:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
00C2:  MOVF   FC1,W
00C4:  ANDLW  C0
00C6:  IORLW  0C
00C8:  MOVWF  FC1
....................    output_low(g_all);         
00CA:  BCF    F95.0
00CC:  BCF    F8C.0
00CE:  GOTO   0298 (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
....................       TRAM4  = MA7DOAN[TAM/100%10];  
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
....................       IF (NGAN4==0XC0) 
....................       { 
....................          NGAN4=0XFF; 
....................          IF (TRAM4==0XC0) 
....................          { 
....................             TRAM4=0XFF; 
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
....................     XUAT_1BYTE(GLCDDATA); 
....................     XUAT_1BYTE(LCDCONTROL);        
....................     XUAT_1BYTE(LCDDATA);       
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
....................     OUTPUT_LOW(RCK_LCD20X4); 
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
....................     LCDDATA    = ~LCD_INS_HTHI;       
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... unsigned int16 y, TT; 
....................  
.................... void TT0() 
.................... { 
.................... //nut up 
....................    if(input(UP)==0)    //kiem tra lan 1 
*
016E:  BSF    F93.5
0170:  BTFSC  F81.5
0172:  BRA    01B0
....................    { 
....................       delay_ms(20); 
0174:  MOVLW  14
0176:  MOVWF  1C
0178:  RCALL  011A
....................       { 
....................          if(input(UP)==0)    //kiem tra lan 2 
017A:  BSF    F93.5
017C:  BTFSC  F81.5
017E:  BRA    01B0
....................          { 
....................             //lenh chuong trinh 
....................                xuat_32led_don_2word(0, y); 
0180:  CLRF   1D
0182:  CLRF   1C
0184:  MOVFF  19,1F
0188:  MOVFF  18,1E
018C:  RCALL  00F6
....................                delay_ms(200); 
018E:  MOVLW  C8
0190:  MOVWF  1C
0192:  RCALL  011A
....................                y = (y<<1)+1; 
0194:  BCF    FD8.0
0196:  RLCF   18,W
0198:  MOVWF  1C
019A:  RLCF   19,W
019C:  MOVWF  1D
019E:  MOVLW  01
01A0:  ADDWF  1C,W
01A2:  MOVWF  18
01A4:  MOVLW  00
01A6:  ADDWFC 1D,W
01A8:  MOVWF  19
....................            // }          
....................             while(input(UP)==0);   //cho nha phim 
01AA:  BSF    F93.5
01AC:  BTFSS  F81.5
01AE:  BRA    01AA
....................          } 
....................       } 
....................  
....................    } 
.................... //nut dw 
....................    if(input(DW)==0)    //kiem tra lan 1 
01B0:  BSF    F93.4
01B2:  BTFSC  F81.4
01B4:  BRA    01E2
....................    { 
....................       delay_ms(20); 
01B6:  MOVLW  14
01B8:  MOVWF  1C
01BA:  RCALL  011A
....................       { 
....................          if(input(DW)==0)    //kiem tra lan 2 
01BC:  BSF    F93.4
01BE:  BTFSC  F81.4
01C0:  BRA    01E2
....................          { 
....................             //lenh chuong trinh 
....................                xuat_32led_don_2word(0, y);                
01C2:  CLRF   1D
01C4:  CLRF   1C
01C6:  MOVFF  19,1F
01CA:  MOVFF  18,1E
01CE:  RCALL  00F6
....................                delay_ms(200); 
01D0:  MOVLW  C8
01D2:  MOVWF  1C
01D4:  RCALL  011A
....................                y = (y>>1);        
01D6:  BCF    FD8.0
01D8:  RRCF   19,F
01DA:  RRCF   18,F
....................             while(input(DW)==0);   //cho nha phim 
01DC:  BSF    F93.4
01DE:  BTFSS  F81.4
01E0:  BRA    01DC
....................          } 
....................       } 
....................    } 
01E2:  GOTO   02BE (RETURN)
.................... } 
....................  
.................... void TT1() 
.................... { 
.................... //nut up 
....................    if(input(UP)==0)    //kiem tra lan 1 
01E6:  BSF    F93.5
01E8:  BTFSC  F81.5
01EA:  BRA    0222
....................    { 
....................       delay_ms(20); 
01EC:  MOVLW  14
01EE:  MOVWF  1C
01F0:  RCALL  011A
....................       { 
....................          if(input(UP)==0)    //kiem tra lan 2 
01F2:  BSF    F93.5
01F4:  BTFSC  F81.5
01F6:  BRA    0222
....................          { 
....................             //lenh chuong trinh 
....................                xuat_32led_don_2word(0, y); 
01F8:  CLRF   1D
01FA:  CLRF   1C
01FC:  MOVFF  19,1F
0200:  MOVFF  18,1E
0204:  RCALL  00F6
....................                delay_ms(200); 
0206:  MOVLW  C8
0208:  MOVWF  1C
020A:  RCALL  011A
....................                y = (y>>1)+0x8000; 
020C:  BCF    FD8.0
020E:  RRCF   19,W
0210:  MOVWF  1D
0212:  RRCF   18,W
0214:  MOVWF  18
0216:  MOVLW  80
0218:  ADDWF  1D,W
021A:  MOVWF  19
....................            // }          
....................             while(input(UP)==0);   //cho nha phim 
021C:  BSF    F93.5
021E:  BTFSS  F81.5
0220:  BRA    021C
....................          } 
....................       } 
....................  
....................    } 
.................... //nut dw 
....................    if(input(DW)==0)    //kiem tra lan 1 
0222:  BSF    F93.4
0224:  BTFSC  F81.4
0226:  BRA    0254
....................    { 
....................       delay_ms(20); 
0228:  MOVLW  14
022A:  MOVWF  1C
022C:  RCALL  011A
....................       { 
....................          if(input(DW)==0)    //kiem tra lan 2 
022E:  BSF    F93.4
0230:  BTFSC  F81.4
0232:  BRA    0254
....................          { 
....................             //lenh chuong trinh 
....................                xuat_32led_don_2word(0, y);                
0234:  CLRF   1D
0236:  CLRF   1C
0238:  MOVFF  19,1F
023C:  MOVFF  18,1E
0240:  RCALL  00F6
....................                delay_ms(200); 
0242:  MOVLW  C8
0244:  MOVWF  1C
0246:  RCALL  011A
....................                y = (y<<1);        
0248:  BCF    FD8.0
024A:  RLCF   18,F
024C:  RLCF   19,F
....................             while(input(DW)==0);   //cho nha phim 
024E:  BSF    F93.4
0250:  BTFSS  F81.4
0252:  BRA    024E
....................          } 
....................       } 
....................    } 
0254:  GOTO   02BE (RETURN)
.................... } 
.................... void Nut_clr() 
.................... { 
....................    if(input(CLR)==0)    //kiem tra lan 1 
*
0140:  BSF    F93.3
0142:  BTFSC  F81.3
0144:  BRA    016A
....................    { 
....................       delay_ms(20); 
0146:  MOVLW  14
0148:  MOVWF  1C
014A:  RCALL  011A
....................       { 
....................          if(input(CLR)==0)    //kiem tra lan 2 
014C:  BSF    F93.3
014E:  BTFSC  F81.3
0150:  BRA    016A
....................          { 
....................          //lenh chuong trinh 
....................          y = 0x0000; 
0152:  CLRF   19
0154:  CLRF   18
....................          TT  = ~ TT; 
0156:  COMF   1A,F
0158:  COMF   1B,F
....................          xuat_32led_don_2word( 0, 0);           
015A:  CLRF   1D
015C:  CLRF   1C
015E:  CLRF   1F
0160:  CLRF   1E
0162:  RCALL  00F6
....................             while(input(CLR)==0);   //cho nha phim 
0164:  BSF    F93.3
0166:  BTFSS  F81.3
0168:  BRA    0164
....................          } 
....................       } 
....................    } 
016A:  GOTO   02B0 (RETURN)
....................  
.................... } 
.................... void main() 
*
0258:  CLRF   FF8
025A:  BCF    FD0.7
025C:  BSF    FB8.3
025E:  MOVLW  08
0260:  MOVWF  FAF
0262:  MOVLW  02
0264:  MOVWF  FB0
0266:  MOVLW  A6
0268:  MOVWF  FAC
026A:  MOVLW  90
026C:  MOVWF  FAB
026E:  CLRF   04
0270:  CLRF   0B
0272:  CLRF   0C
0274:  CLRF   0D
0276:  CLRF   0E
0278:  CLRF   17
027A:  MOVF   FC1,W
027C:  ANDLW  C0
027E:  IORLW  0F
0280:  MOVWF  FC1
0282:  MOVLW  07
0284:  MOVWF  FB4
0286:  SETF   0F
0288:  SETF   10
028A:  SETF   11
028C:  SETF   12
028E:  SETF   13
0290:  SETF   14
0292:  SETF   15
0294:  SETF   16
.................... { 
....................    set_up_port_ic_chot(); 
0296:  BRA    0098
....................    set_tris_b(0xff);    //0011   1100 
0298:  MOVLW  FF
029A:  MOVWF  F93
....................    y = 0x00; 
029C:  CLRF   19
029E:  CLRF   18
....................    TT = 0; 
02A0:  CLRF   1B
02A2:  CLRF   1A
....................    xuat_32led_don_2word( 0, 0); 
02A4:  CLRF   1D
02A6:  CLRF   1C
02A8:  CLRF   1F
02AA:  CLRF   1E
02AC:  RCALL  00F6
....................    while (true) 
....................    { 
....................       Nut_clr(); 
02AE:  BRA    0140
....................       if (TT == 0) 
02B0:  MOVF   1A,F
02B2:  BNZ   02BC
02B4:  MOVF   1B,F
02B6:  BNZ   02BC
....................       TT0(); 
02B8:  BRA    016E
02BA:  BRA    02BE
....................       else 
....................       TT1(); 
02BC:  BRA    01E6
02BE:  BRA    02AE
....................    } 
.................... } 
....................  
02C0:  SLEEP 
....................  

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
