CCS PCH C Compiler, Version 5.015, 5967               18-Oct-22 10:01

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\BAI_625_LCD_4LED_DEM_SP_T0_MATRIX_KEY.lst

               ROM used:   1592 bytes (5%)
                           Largest free fragment is 31176
               RAM used:   38 (2%) at main() level
                           55 (3%) worst case
               Stack used: 7 locations
               Stack size: 31

*
0000:  GOTO   0540
.................... //dem san pham, hien thi lcd, 7 doan 
.................... //!#include <tv_pickit2_shift_1_proteus.c> 
.................... #include <tv_pickit2_shift_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA C0,F9
0016:  DATA A4,B0
0018:  DATA 99,92
001A:  DATA 82,F8
001C:  DATA 80,90
001E:  DATA 88,83
0020:  DATA C6,A1
0022:  DATA 86,8E
0024:  CLRF   FF7
0026:  ADDLW  34
0028:  MOVWF  FF6
002A:  MOVLW  00
002C:  ADDWFC FF7,F
002E:  TBLRD*+
0030:  MOVF   FF5,W
0032:  RETURN 0
0034:  DATA 80,C0
0036:  DATA 94,D4
0038:  CLRF   FF7
003A:  ADDLW  48
003C:  MOVWF  FF6
003E:  MOVLW  00
0040:  ADDWFC FF7,F
0042:  TBLRD*+
0044:  MOVF   FF5,W
0046:  RETURN 0
0048:  DATA 3F,7F
004A:  DATA BF,FF
004C:  DATA 67,69
004E:  DATA 61,20
0050:  DATA 74,72
0052:  DATA 69,20
0054:  DATA 63,61
0056:  DATA 69,20
0058:  DATA 64,61
005A:  DATA 74,3A
005C:  DATA 00,00
005E:  DATA 67,69
0060:  DATA 61,20
0062:  DATA 74,72
0064:  DATA 69,20
0066:  DATA 64,65
0068:  DATA 6D,3A
006A:  DATA 00,00
*
023C:  TBLRD*+
023E:  MOVF   FF5,F
0240:  BZ    025A
0242:  MOVFF  FF6,25
0246:  MOVFF  FF7,26
024A:  MOVFF  FF5,27
024E:  RCALL  0226
0250:  MOVFF  25,FF6
0254:  MOVFF  26,FF7
0258:  BRA    023C
025A:  RETURN 0
025C:  CLRF   00
025E:  CLRF   01
0260:  MOVF   28,W
0262:  BCF    FD8.0
0264:  BTFSC  29.0
0266:  ADDWF  00,F
0268:  RRCF   00,F
026A:  RRCF   01,F
026C:  BTFSC  29.1
026E:  ADDWF  00,F
0270:  RRCF   00,F
0272:  RRCF   01,F
0274:  BTFSC  29.2
0276:  ADDWF  00,F
0278:  RRCF   00,F
027A:  RRCF   01,F
027C:  BTFSC  29.3
027E:  ADDWF  00,F
0280:  RRCF   00,F
0282:  RRCF   01,F
0284:  BTFSC  29.4
0286:  ADDWF  00,F
0288:  RRCF   00,F
028A:  RRCF   01,F
028C:  BTFSC  29.5
028E:  ADDWF  00,F
0290:  RRCF   00,F
0292:  RRCF   01,F
0294:  BTFSC  29.6
0296:  ADDWF  00,F
0298:  RRCF   00,F
029A:  RRCF   01,F
029C:  BTFSC  29.7
029E:  ADDWF  00,F
02A0:  RRCF   00,F
02A2:  RRCF   01,F
02A4:  GOTO   031C (RETURN)
*
035A:  CLRF   01
035C:  CLRF   02
035E:  CLRF   00
0360:  CLRF   03
0362:  MOVF   31,W
0364:  BNZ   036A
0366:  MOVF   30,W
0368:  BZ    039A
036A:  MOVLW  10
036C:  MOVWF  32
036E:  BCF    FD8.0
0370:  RLCF   2E,F
0372:  RLCF   2F,F
0374:  RLCF   00,F
0376:  RLCF   03,F
0378:  MOVF   31,W
037A:  SUBWF  03,W
037C:  BNZ   0382
037E:  MOVF   30,W
0380:  SUBWF  00,W
0382:  BNC   0392
0384:  MOVF   30,W
0386:  SUBWF  00,F
0388:  BTFSS  FD8.0
038A:  DECF   03,F
038C:  MOVF   31,W
038E:  SUBWF  03,F
0390:  BSF    FD8.0
0392:  RLCF   01,F
0394:  RLCF   02,F
0396:  DECFSZ 32,F
0398:  BRA    036E
039A:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
019E:  CLRF   FEA
01A0:  MOVLW  28
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01C2
01A8:  MOVLW  06
01AA:  MOVWF  01
01AC:  CLRF   00
01AE:  DECFSZ 00,F
01B0:  BRA    01AE
01B2:  DECFSZ 01,F
01B4:  BRA    01AC
01B6:  MOVLW  7B
01B8:  MOVWF  00
01BA:  DECFSZ 00,F
01BC:  BRA    01BA
01BE:  DECFSZ FEF,F
01C0:  BRA    01A8
01C2:  RETURN 0
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
006C:  CLRF   36
006E:  MOVF   36,W
0070:  SUBLW  07
0072:  BNC   0090
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
0074:  BTFSC  35.7
0076:  BRA    007C
0078:  BCF    F8D.2
007A:  BRA    007E
007C:  BSF    F8D.2
007E:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
0080:  BCF    F96.0
0082:  BCF    F8D.0
0084:  BCF    F96.0
0086:  BSF    F8D.0
....................          X= X<<1;          
0088:  BCF    FD8.0
008A:  RLCF   35,F
008C:  INCF   36,F
008E:  BRA    006E
....................      } 
0090:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
....................       XUAT_1BYTE(BLD2); 
....................       XUAT_1BYTE(BLD1);           
....................       XUAT_1BYTE(BLD0);             
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
....................       OUTPUT_LOW(RCK_32LED); 
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
....................      B1 = WLD0>>8;  B0 = WLD0; 
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
0092:  MOVFF  26,27
0096:  MOVFF  25,28
....................    xuat_1byte(b1);     
009A:  MOVFF  27,35
009E:  RCALL  006C
....................    xuat_1byte(b0); 
00A0:  MOVFF  28,35
00A4:  RCALL  006C
00A6:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
00A8:  CLRF   26
00AA:  CLRF   25
00AC:  RCALL  0092
....................    xuat_1word(0);  
00AE:  CLRF   26
00B0:  CLRF   25
00B2:  RCALL  0092
....................    xuat_1word(0);                              
00B4:  CLRF   26
00B6:  CLRF   25
00B8:  RCALL  0092
....................    xuat_1word(0);                                     
00BA:  CLRF   26
00BC:  CLRF   25
00BE:  RCALL  0092
....................     
....................    output_high(rck_buzerelay);    
00C0:  BCF    F95.3
00C2:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
00C4:  BCF    F95.3
00C6:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
00C8:  BCF    F95.4
00CA:  BSF    F8C.4
....................    output_low(rck_32led);  
00CC:  BCF    F95.4
00CE:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
00D0:  BCF    F95.5
00D2:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
00D4:  BCF    F95.5
00D6:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
00D8:  BCF    F95.7
00DA:  BSF    F8C.7
....................    output_low(rck_matranled);    
00DC:  BCF    F95.7
00DE:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
00E0:  BCF    F95.2
00E2:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
00E4:  BCF    F95.2
00E6:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
00E8:  SETF   26
00EA:  SETF   25
00EC:  RCALL  0092
....................    xuat_1word(0xffff);  
00EE:  SETF   26
00F0:  SETF   25
00F2:  RCALL  0092
....................    output_high(rck_4led7doan);        
00F4:  BCF    F95.6
00F6:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
00F8:  BCF    F95.6
00FA:  BCF    F8C.6
00FC:  GOTO   0118 (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
0100:  MOVLW  FF
0102:  MOVWF  F92
0104:  MOVLW  3C
0106:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
0108:  MOVLW  F1
010A:  MOVWF  F94
010C:  MOVLW  00
010E:  MOVWF  F96
....................    set_tris_d(0x00);     
0110:  MOVWF  F95
....................    output_d(0x00);  
0112:  CLRF   F95
0114:  CLRF   F8C
....................    xoa_tat_6module(); 
0116:  BRA    00A8
....................    port_b_pullups(0xff);           
0118:  BCF    FF1.7
....................    rbdc=0;                
011A:  CLRF   06
011C:  CLRF   05
....................              
....................    setup_adc(adc_clock_div_32);         
011E:  MOVF   FC0,W
0120:  ANDLW  C0
0122:  IORLW  02
0124:  MOVWF  FC0
0126:  BSF    FC0.7
0128:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
012A:  MOVF   FC1,W
012C:  ANDLW  C0
012E:  IORLW  0C
0130:  MOVWF  FC1
....................    output_low(g_all);         
0132:  BCF    F95.0
0134:  BCF    F8C.0
0136:  GOTO   058E (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
*
039C:  MOVFF  34,35
03A0:  RCALL  006C
03A2:  MOVFF  33,35
03A6:  RCALL  006C
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
03A8:  MOVFF  32,35
03AC:  RCALL  006C
03AE:  MOVFF  31,35
03B2:  RCALL  006C
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
03B4:  BCF    F95.6
03B6:  BCF    F8C.6
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
03B8:  BCF    F95.6
03BA:  BSF    F8C.6
03BC:  GOTO   053C (RETURN)
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
....................       TRAM4  = MA7DOAN[TAM/100%10];  
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
....................       IF (NGAN4==0XC0) 
....................       { 
....................          NGAN4=0XFF; 
....................          IF (TRAM4==0XC0) 
....................          { 
....................             TRAM4=0XFF; 
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
*
013A:  MOVFF  0E,35
013E:  RCALL  006C
....................     XUAT_1BYTE(GLCDDATA); 
0140:  MOVFF  0D,35
0144:  RCALL  006C
....................     XUAT_1BYTE(LCDCONTROL);        
0146:  MOVFF  0C,35
014A:  RCALL  006C
....................     XUAT_1BYTE(LCDDATA);       
014C:  MOVFF  0B,35
0150:  RCALL  006C
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
0152:  BCF    F95.2
0154:  BSF    F8C.2
....................     OUTPUT_LOW(RCK_LCD20X4); 
0156:  BCF    F95.2
0158:  BCF    F8C.2
015A:  GOTO   016C (RETURN)
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
015E:  MOVF   2A,W
0160:  MOVWF  0C
0162:  COMF   0C,F
....................     LCDDATA    = ~LCD_INS_HTHI;       
0164:  MOVFF  2B,0B
0168:  COMF   0B,F
....................     XUAT_GLCD_LCD(); 
016A:  BRA    013A
016C:  RETURN 0
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... #include <tv_pickit2_shift_lcd.c> 
.................... UNSIGNED INT8 LCD_CONTROL;   
.................... #bit LCD_P = LCD_CONTROL.3 
.................... #bit LCD_RS = LCD_CONTROL.2 
.................... #bit LCD_RW = LCD_CONTROL.1 
.................... #bit LCD_E  = LCD_CONTROL.0 
....................  
.................... #DEFINE LCD_FUNCTION_SET       0X38 
.................... #DEFINE LCD_DISPLAY_CONTROL    0X0C 
.................... #DEFINE LCD_CLEAR_DISPLAY      0X01 
.................... #DEFINE LCD_ENTRY_MODE         0X06 
.................... #DEFINE LCD_SHIFT_LEFT         0X18 
.................... #DEFINE LCD_SHIFT_RIGHT        0X1C 
....................  
.................... #DEFINE LCD_ADDR_LINE1         0X80 
.................... #DEFINE LCD_ADDR_LINE2         0XC0 
.................... #DEFINE LCD_ADDR_LINE3         0X94 
.................... #DEFINE LCD_ADDR_LINE4         0XD4 
....................  
.................... VOID LCD_XUAT_8BIT(INT8 LCD_DATA_X) 
.................... { 
....................       LCD_E=1; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);      
016E:  BSF    18.0
0170:  MOVFF  18,2A
0174:  MOVFF  29,2B
0178:  RCALL  015E
....................       LCD_E=0; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);  
017A:  BCF    18.0
017C:  MOVFF  18,2A
0180:  MOVFF  29,2B
0184:  RCALL  015E
0186:  RETURN 0
.................... } 
.................... void LCD_COMMAND(INT8 LCD_DATA_X)    
....................   { 
....................       LCD_RS = 0; 
0188:  BCF    18.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
018A:  MOVFF  28,29
018E:  RCALL  016E
....................       DELAY_US(20); 
0190:  MOVLW  20
0192:  MOVWF  00
0194:  DECFSZ 00,F
0196:  BRA    0194
0198:  BRA    019A
019A:  NOP   
019C:  RETURN 0
....................   } 
.................... void LCD_DATA(INT8 LCD_DATA_X)        
....................   { 
....................       LCD_RS = 1;      
*
0226:  BSF    18.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
0228:  MOVFF  27,29
022C:  RCALL  016E
....................       DELAY_US(20); 
022E:  MOVLW  20
0230:  MOVWF  00
0232:  DECFSZ 00,F
0234:  BRA    0232
0236:  BRA    0238
0238:  NOP   
023A:  RETURN 0
....................   } 
....................    
.................... VOID SETUP_LCD () 
.................... {                      
....................          LCD_E  = 0;  
*
01C4:  BCF    18.0
....................          LCD_RW = 0;  
01C6:  BCF    18.1
....................          LCD_RS = 1;  
01C8:  BSF    18.2
....................          LCD_P =0; 
01CA:  BCF    18.3
....................          LCD_COMMAND(LCD_FUNCTION_SET);          
01CC:  MOVLW  38
01CE:  MOVWF  28
01D0:  RCALL  0188
....................          DELAY_US(40); 
01D2:  MOVLW  42
01D4:  MOVWF  00
01D6:  DECFSZ 00,F
01D8:  BRA    01D6
01DA:  NOP   
....................          LCD_COMMAND(LCD_DISPLAY_CONTROL);    
01DC:  MOVLW  0C
01DE:  MOVWF  28
01E0:  RCALL  0188
....................          DELAY_US(40); 
01E2:  MOVLW  42
01E4:  MOVWF  00
01E6:  DECFSZ 00,F
01E8:  BRA    01E6
01EA:  NOP   
....................          LCD_COMMAND(LCD_CLEAR_DISPLAY);       
01EC:  MOVLW  01
01EE:  MOVWF  28
01F0:  RCALL  0188
....................          DELAY_MS(2); 
01F2:  MOVLW  02
01F4:  MOVWF  28
01F6:  RCALL  019E
....................          LCD_COMMAND(LCD_ENTRY_MODE);        
01F8:  MOVLW  06
01FA:  MOVWF  28
01FC:  RCALL  0188
....................          DELAY_US(40);                 
01FE:  MOVLW  42
0200:  MOVWF  00
0202:  DECFSZ 00,F
0204:  BRA    0202
0206:  NOP   
0208:  GOTO   0590 (RETURN)
.................... } 
....................  
.................... CONST UNSIGNED CHAR LCD_SO_X[11][6] ={ 
....................                   0,1,2,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // SO 9 
....................                    
.................... CONST UNSIGNED CHAR LCD_SO_XX[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4};             // SO 9          
.................... //!CONST UNSIGNED CHAR LCD_SO_X[10][6] = 
.................... //!{ 
.................... //!                  0,1,2,3,4,5,               // SO 0 
.................... //!                  1,2,32,3,7,3,              // SO 1 
.................... //!                  6,6,2,4,3,3,               // SO 2 
.................... //!                  6,6,2,3,3,5,               // SO 3 
.................... //!                  7,3,7,32,32,7,             // SO 4 
.................... //!                  7,6,6,3,3,5,               // SO 5 
.................... //!                  0,6,6,4,3,5,               // SO 6 
.................... //!                  1,1,7,32,32,7,             // SO 7 
.................... //!                  0,6,2,4,3,5,               // SO 8 
.................... //!                  0,6,2,3,3,5};             // SO 9    
....................                    
.................... CONST UNSIGNED CHAR LCD_MA_8DOAN[] = { 
....................    0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN F - 0 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  //DOAN A - 1 
....................    0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN B - 2 
....................    0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  //DOAN D - 3 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  //DOAN C - 4 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07,  //DOAN E - 5 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  //DOAN G+D-6  
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; //DOAN I  -7 
....................     
.................... VOID LCD_GOTO_XY(SIGNED INT8 X, SIGNED INT8 Y) 
.................... {  
....................    CONST UNSIGNED INT8 LCD_VITRI[]={0x80,0xC0,0x94,0xD4}; 
....................    LCD_COMMAND(LCD_VITRI[X]+Y); 
020C:  CLRF   03
020E:  MOVF   25,W
0210:  MOVFF  FF2,27
0214:  BCF    FF2.7
0216:  RCALL  0024
0218:  BTFSC  27.7
021A:  BSF    FF2.7
021C:  ADDWF  26,W
021E:  MOVWF  27
0220:  MOVWF  28
0222:  RCALL  0188
0224:  RETURN 0
.................... } 
....................  
.................... VOID XXX() 
.................... {  
....................    SIGNED INT8 X; 
....................    X= LCD_SO_X[0][0]; 
....................    X= LCD_MA_8DOAN[0]; 
.................... } 
....................  
.................... #include <tv_pickit2_shift_key4x4_138.c> 
.................... CONST UNSIGNED CHAR MAQUETKEY[4]= {0x3F,0x7F,0xBF,0xFF}; 
.................... UNSIGNED INT8  MPT1=0,MPT2=0;   
.................... UNSIGNED INT KEY_NHAN() 
.................... {     SIGNED INT8 MAPHIM,HANG,COT; 
....................       MAPHIM=HANG=0XFF; 
*
02A8:  SETF   26
02AA:  MOVFF  26,25
....................       FOR(COT=0;COT<4;COT++) 
02AE:  CLRF   27
02B0:  BTFSC  27.7
02B2:  BRA    02BA
02B4:  MOVF   27,W
02B6:  SUBLW  03
02B8:  BNC   030C
....................             {    
....................                OUTPUT_B(MAQUETKEY[COT]); 
02BA:  CLRF   03
02BC:  MOVF   27,W
02BE:  MOVFF  FF2,28
02C2:  BCF    FF2.7
02C4:  RCALL  0038
02C6:  BTFSC  28.7
02C8:  BSF    FF2.7
02CA:  CLRF   F93
02CC:  MOVWF  F8A
....................                IF         (!INPUT(PIN_B2))      {HANG=3;   BREAK;} 
02CE:  BSF    F93.2
02D0:  BTFSC  F81.2
02D2:  BRA    02DC
02D4:  MOVLW  03
02D6:  MOVWF  26
02D8:  BRA    030C
02DA:  BRA    0302
....................                ELSE    IF (!INPUT(PIN_B3))      {HANG=2;   BREAK;} 
02DC:  BSF    F93.3
02DE:  BTFSC  F81.3
02E0:  BRA    02EA
02E2:  MOVLW  02
02E4:  MOVWF  26
02E6:  BRA    030C
02E8:  BRA    0302
....................                ELSE    IF (!INPUT(PIN_B4))      {HANG=1;   BREAK;} 
02EA:  BSF    F93.4
02EC:  BTFSC  F81.4
02EE:  BRA    02F8
02F0:  MOVLW  01
02F2:  MOVWF  26
02F4:  BRA    030C
02F6:  BRA    0302
....................                ELSE    IF (!INPUT(PIN_B5))      {HANG=0;   BREAK;} 
02F8:  BSF    F93.5
02FA:  BTFSC  F81.5
02FC:  BRA    0302
02FE:  CLRF   26
0300:  BRA    030C
....................                DELAY_MS(30); //THEM VAO DE XU LY LOI QUA TAI CPU 
0302:  MOVLW  1E
0304:  MOVWF  28
0306:  RCALL  019E
0308:  INCF   27,F
030A:  BRA    02B0
....................             }           
....................          IF (HANG!=0XFF)   MAPHIM   = COT*4 + HANG; 
030C:  INCFSZ 26,W
030E:  BRA    0312
0310:  BRA    0322
0312:  MOVFF  27,28
0316:  MOVLW  04
0318:  MOVWF  29
031A:  BRA    025C
031C:  MOVF   26,W
031E:  ADDWF  01,W
0320:  MOVWF  25
....................          RETURN(MAPHIM); 
0322:  MOVFF  25,01
0326:  RETURN 0
.................... } 
....................  
.................... UNSIGNED INT KEY_4X4_DW() 
.................... {      
....................       MPT1=KEY_NHAN();        
0328:  RCALL  02A8
032A:  MOVFF  01,19
....................       IF (MPT1!=0XFF)    
032E:  INCFSZ 19,W
0330:  BRA    0334
0332:  BRA    0352
....................       {  DELAY_MS(1);   
0334:  MOVLW  01
0336:  MOVWF  28
0338:  RCALL  019E
....................          MPT1=KEY_NHAN(); 
033A:  RCALL  02A8
033C:  MOVFF  01,19
....................          DO{MPT2=KEY_NHAN(); DELAY_MS(30);} 
0340:  RCALL  02A8
0342:  MOVFF  01,1A
0346:  MOVLW  1E
0348:  MOVWF  28
034A:  RCALL  019E
....................          WHILE (MPT2==MPT1); 
034C:  MOVF   19,W
034E:  SUBWF  1A,W
0350:  BZ    0340
....................       }              
....................       RETURN(MPT1); 
0352:  MOVFF  19,01
0356:  GOTO   05C2 (RETURN)
.................... } 
....................  
.................... UNSIGNED INT KEY_4X4_UP() 
.................... {             
....................       MPT1=KEY_NHAN(); 
....................       IF (MPT1!=0XFF)    
....................       {   
....................          IF (MPT1!=MPT2) 
....................             { 
....................                RETURN(MPT1);  //PHIM MOI 
....................                MPT2=MPT1; 
....................             } 
....................          ELSE 
....................          { 
....................             DELAY_MS(1); 
....................             MPT1=KEY_NHAN(); 
....................             DO 
....................             { 
....................                MPT2=KEY_NHAN(); 
....................                } 
....................             WHILE (MPT2!=MPT1); 
....................                RETURN(MPT1);     //THOAT VI TRUNG MA PHIM DA NHAN 
....................                MPT2=MPT1;            
....................          } 
....................       }   
....................       ELSE  
....................       { 
....................          RETURN(MPT1);  //THOAT VI KHONG NHAN 
....................          MPT2=MPT1; 
....................       }       
.................... } 
....................  
....................  
....................  
....................  
.................... unsigned INT16 t0,gia_tri_cai_dat, mp; 
.................... unsigned INT8 led[] = {0x7F, 0x7F, 0x7F, 0x7F}; 
.................... void hien_thi_lcd_7doan() 
.................... { 
....................    lcd_GOTO_xy (0, 17) ; 
*
03C0:  CLRF   25
03C2:  MOVLW  11
03C4:  MOVWF  26
03C6:  RCALL  020C
....................    lcd_data (gia_tri_cai_dat / 10 + 0x30); 
03C8:  MOVFF  1E,2F
03CC:  MOVFF  1D,2E
03D0:  CLRF   31
03D2:  MOVLW  0A
03D4:  MOVWF  30
03D6:  RCALL  035A
03D8:  MOVFF  02,26
03DC:  MOVFF  01,25
03E0:  MOVLW  30
03E2:  ADDWF  25,F
03E4:  MOVLW  00
03E6:  ADDWFC 26,F
03E8:  MOVFF  25,27
03EC:  RCALL  0226
....................    lcd_GOTO_xy (0, 18) ; 
03EE:  CLRF   25
03F0:  MOVLW  12
03F2:  MOVWF  26
03F4:  RCALL  020C
....................    lcd_data (gia_tri_cai_dat % 10 + 0x30); 
03F6:  MOVFF  1E,2F
03FA:  MOVFF  1D,2E
03FE:  CLRF   31
0400:  MOVLW  0A
0402:  MOVWF  30
0404:  RCALL  035A
0406:  MOVFF  00,25
040A:  MOVFF  03,26
040E:  MOVLW  30
0410:  ADDWF  25,F
0412:  MOVLW  00
0414:  ADDWFC 26,F
0416:  MOVFF  25,27
041A:  RCALL  0226
....................    lcd_GOTO_xy (1, 17) ; 
041C:  MOVLW  01
041E:  MOVWF  25
0420:  MOVLW  11
0422:  MOVWF  26
0424:  RCALL  020C
....................    lcd_data (t0 / 10 + 0x30); 
0426:  MOVFF  1C,2F
042A:  MOVFF  1B,2E
042E:  CLRF   31
0430:  MOVLW  0A
0432:  MOVWF  30
0434:  RCALL  035A
0436:  MOVFF  02,26
043A:  MOVFF  01,25
043E:  MOVLW  30
0440:  ADDWF  25,F
0442:  MOVLW  00
0444:  ADDWFC 26,F
0446:  MOVFF  25,27
044A:  RCALL  0226
....................    lcd_GOTO_xy (1, 18) ; 
044C:  MOVLW  01
044E:  MOVWF  25
0450:  MOVLW  12
0452:  MOVWF  26
0454:  RCALL  020C
....................    lcd_data (t0 % 10 + 0x30); 
0456:  MOVFF  1C,2F
045A:  MOVFF  1B,2E
045E:  CLRF   31
0460:  MOVLW  0A
0462:  MOVWF  30
0464:  RCALL  035A
0466:  MOVFF  00,25
046A:  MOVFF  03,26
046E:  MOVLW  30
0470:  ADDWF  25,F
0472:  MOVLW  00
0474:  ADDWFC 26,F
0476:  MOVFF  25,27
047A:  RCALL  0226
....................    xuat_4led_7doan_4so (ma7doan[gia_tri_cai_dat / 10], ma7doan[gia_tri_cai_dat % 10], ma7doan[t0 / 10], ma7doan[t0 % 10]) ; 
047C:  MOVFF  1E,2F
0480:  MOVFF  1D,2E
0484:  CLRF   31
0486:  MOVLW  0A
0488:  MOVWF  30
048A:  RCALL  035A
048C:  MOVFF  02,26
0490:  MOVFF  01,25
0494:  MOVFF  02,03
0498:  MOVF   01,W
049A:  MOVFF  FF2,27
049E:  BCF    FF2.7
04A0:  RCALL  0004
04A2:  BTFSC  27.7
04A4:  BSF    FF2.7
04A6:  MOVWF  27
04A8:  MOVFF  1E,2F
04AC:  MOVFF  1D,2E
04B0:  CLRF   31
04B2:  MOVLW  0A
04B4:  MOVWF  30
04B6:  RCALL  035A
04B8:  MOVFF  00,28
04BC:  MOVFF  03,29
04C0:  MOVFF  03,03
04C4:  MOVF   00,W
04C6:  MOVFF  FF2,2A
04CA:  BCF    FF2.7
04CC:  RCALL  0004
04CE:  BTFSC  2A.7
04D0:  BSF    FF2.7
04D2:  MOVWF  2A
04D4:  MOVFF  1C,2F
04D8:  MOVFF  1B,2E
04DC:  CLRF   31
04DE:  MOVLW  0A
04E0:  MOVWF  30
04E2:  RCALL  035A
04E4:  MOVFF  02,2C
04E8:  MOVFF  01,2B
04EC:  MOVFF  02,03
04F0:  MOVF   01,W
04F2:  MOVFF  FF2,2D
04F6:  BCF    FF2.7
04F8:  RCALL  0004
04FA:  BTFSC  2D.7
04FC:  BSF    FF2.7
04FE:  MOVWF  2D
0500:  MOVFF  1C,2F
0504:  MOVFF  1B,2E
0508:  CLRF   31
050A:  MOVLW  0A
050C:  MOVWF  30
050E:  RCALL  035A
0510:  MOVFF  00,2E
0514:  MOVFF  03,2F
0518:  MOVFF  03,03
051C:  MOVF   00,W
051E:  MOVFF  FF2,30
0522:  BCF    FF2.7
0524:  RCALL  0004
0526:  BTFSC  30.7
0528:  BSF    FF2.7
052A:  MOVWF  30
052C:  MOVFF  27,31
0530:  MOVFF  2A,32
0534:  MOVFF  2D,33
0538:  MOVWF  34
053A:  BRA    039C
053C:  GOTO   0634 (RETURN)
.................... } 
....................  
.................... void main() 
0540:  CLRF   FF8
0542:  BCF    FD0.7
0544:  BSF    FB8.3
0546:  MOVLW  08
0548:  MOVWF  FAF
054A:  MOVLW  02
054C:  MOVWF  FB0
054E:  MOVLW  A6
0550:  MOVWF  FAC
0552:  MOVLW  90
0554:  MOVWF  FAB
0556:  CLRF   04
0558:  CLRF   0B
055A:  CLRF   0C
055C:  CLRF   0D
055E:  CLRF   0E
0560:  CLRF   17
0562:  CLRF   19
0564:  CLRF   1A
0566:  MOVF   FC1,W
0568:  ANDLW  C0
056A:  IORLW  0F
056C:  MOVWF  FC1
056E:  MOVLW  07
0570:  MOVWF  FB4
0572:  SETF   0F
0574:  SETF   10
0576:  SETF   11
0578:  SETF   12
057A:  SETF   13
057C:  SETF   14
057E:  SETF   15
0580:  SETF   16
0582:  MOVLW  7F
0584:  MOVWF  21
0586:  MOVWF  22
0588:  MOVWF  23
058A:  MOVWF  24
.................... { 
....................    set_up_port_ic_chot (); 
058C:  BRA    0100
....................    setup_lcd (); 
058E:  BRA    01C4
....................    lcd_GOTO_xy (0, 0) ; 
0590:  CLRF   25
0592:  CLRF   26
0594:  RCALL  020C
....................    lcd_data ("gia tri cai dat:"); 
0596:  MOVLW  4C
0598:  MOVWF  FF6
059A:  MOVLW  00
059C:  MOVWF  FF7
059E:  RCALL  023C
....................    lcd_GOTO_xy (1, 0) ; 
05A0:  MOVLW  01
05A2:  MOVWF  25
05A4:  CLRF   26
05A6:  RCALL  020C
....................    lcd_data ("gia tri dem:"); 
05A8:  MOVLW  5E
05AA:  MOVWF  FF6
05AC:  MOVLW  00
05AE:  MOVWF  FF7
05B0:  RCALL  023C
....................    setup_timer_0 (t0_ext_l_to_h|t0_div_1); 
05B2:  MOVLW  A8
05B4:  MOVWF  FD5
....................    set_timer0 (0); 
05B6:  CLRF   FD7
05B8:  CLRF   FD6
....................    gia_tri_cai_dat = 1; 
05BA:  CLRF   1E
05BC:  MOVLW  01
05BE:  MOVWF  1D
....................  
....................    WHILE (true) 
....................    { 
....................       mp = key_4x4_dw (); 
05C0:  BRA    0328
05C2:  CLRF   20
05C4:  MOVFF  01,1F
....................  
....................       IF (mp != 0xff) 
05C8:  INCFSZ 1F,W
05CA:  BRA    05D0
05CC:  MOVF   20,F
05CE:  BZ    0616
....................       { 
....................          IF (mp < 10) 
05D0:  MOVF   20,F
05D2:  BNZ   05E4
05D4:  MOVF   1F,W
05D6:  SUBLW  09
05D8:  BNC   05E4
....................          { 
....................             led[1] = led[0]; //dich phim 
05DA:  MOVFF  21,22
....................             led[0] = mp + 0x30; 
05DE:  MOVLW  30
05E0:  ADDWF  1F,W
05E2:  MOVWF  21
....................          } 
....................  
....................          IF (mp == 0x0f) //enter 
05E4:  MOVF   1F,W
05E6:  SUBLW  0F
05E8:  BNZ   0602
05EA:  MOVF   20,F
05EC:  BNZ   0602
....................          { 
....................             gia_tri_cai_dat = (led[1] - 0x30) * 10 + (led[0] - 0x30); //sao thay ghi tru 
05EE:  MOVLW  30
05F0:  SUBWF  22,W
05F2:  MULLW  0A
05F4:  MOVFF  FF3,25
05F8:  MOVLW  30
05FA:  SUBWF  21,W
05FC:  ADDWF  25,W
05FE:  MOVWF  1D
0600:  CLRF   1E
....................          } 
....................  
....................          IF (mp == 0x0c) 
0602:  MOVF   1F,W
0604:  SUBLW  0C
0606:  BNZ   0616
0608:  MOVF   20,F
060A:  BNZ   0616
....................          { 
....................             led[1] = 0; //hien thi 
060C:  CLRF   22
....................             led[0] = 1; 
060E:  MOVLW  01
0610:  MOVWF  21
....................             gia_tri_cai_dat = 1; 
0612:  CLRF   1E
0614:  MOVWF  1D
....................          } 
....................       } 
....................  
....................       t0 = get_timer0 (); 
0616:  MOVF   FD6,W
0618:  MOVWF  1B
061A:  MOVFF  FD7,1C
....................       IF (t0 >= gia_tri_cai_dat) set_timer0 (1) ; 
061E:  MOVF   1E,W
0620:  SUBWF  1C,W
0622:  BNC   0632
0624:  BNZ   062C
0626:  MOVF   1D,W
0628:  SUBWF  1B,W
062A:  BNC   0632
062C:  CLRF   FD7
062E:  MOVLW  01
0630:  MOVWF  FD6
....................       hien_thi_lcd_7doan () ; 
0632:  BRA    03C0
0634:  BRA    05C0
....................    } 
.................... } 
....................  
0636:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
