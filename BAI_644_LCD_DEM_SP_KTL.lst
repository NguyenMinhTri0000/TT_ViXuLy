CCS PCH C Compiler, Version 5.015, 5967               18-Oct-22 10:04

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\BAI_644_LCD_DEM_SP_KTL.lst

               ROM used:   1274 bytes (4%)
                           Largest free fragment is 31494
               RAM used:   31 (2%) at main() level
                           44 (2%) worst case
               Stack used: 7 locations
               Stack size: 31

*
0000:  GOTO   03C6
.................... //!#include <tv_pickit2_shift_1_proteus.c> 
.................... #include <tv_pickit2_shift_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 00,01
0016:  DATA 02,05
0018:  DATA 03,04
001A:  DATA 01,02
001C:  DATA 20,03
001E:  DATA 07,03
0020:  DATA 06,06
0022:  DATA 02,05
0024:  DATA 03,03
0026:  DATA 06,06
0028:  DATA 02,03
002A:  DATA 03,04
002C:  DATA 07,03
002E:  DATA 07,20
0030:  DATA 20,07
0032:  DATA 07,06
0034:  DATA 06,03
0036:  DATA 03,04
0038:  DATA 00,06
003A:  DATA 06,05
003C:  DATA 03,04
003E:  DATA 01,01
0040:  DATA 07,20
0042:  DATA 20,07
0044:  DATA 00,06
0046:  DATA 02,05
0048:  DATA 03,04
004A:  DATA 00,06
004C:  DATA 02,03
004E:  DATA 03,04
0050:  DATA 20,20
0052:  DATA 20,20
0054:  DATA 20,20
0056:  CLRF   FF7
0058:  ADDLW  66
005A:  MOVWF  FF6
005C:  MOVLW  00
005E:  ADDWFC FF7,F
0060:  TBLRD*+
0062:  MOVF   FF5,W
0064:  RETURN 0
0066:  DATA 07,0F
0068:  DATA 1F,1F
006A:  DATA 1F,1F
006C:  DATA 1F,1F
006E:  DATA 1F,1F
0070:  DATA 1F,00
0072:  DATA 00,00
0074:  DATA 00,00
0076:  DATA 1C,1E
0078:  DATA 1F,1F
007A:  DATA 1F,1F
007C:  DATA 1F,1F
007E:  DATA 00,00
0080:  DATA 00,00
0082:  DATA 00,1F
0084:  DATA 1F,1F
0086:  DATA 1F,1F
0088:  DATA 1F,1F
008A:  DATA 1F,1F
008C:  DATA 1E,1C
008E:  DATA 1F,1F
0090:  DATA 1F,1F
0092:  DATA 1F,1F
0094:  DATA 0F,07
0096:  DATA 1F,1F
0098:  DATA 1F,00
009A:  DATA 00,00
009C:  DATA 1F,1F
009E:  DATA 1F,1F
00A0:  DATA 1F,1F
00A2:  DATA 1F,1F
00A4:  DATA 1F,1F
00A6:  CLRF   FF7
00A8:  ADDLW  B6
00AA:  MOVWF  FF6
00AC:  MOVLW  00
00AE:  ADDWFC FF7,F
00B0:  TBLRD*+
00B2:  MOVF   FF5,W
00B4:  RETURN 0
00B6:  DATA 80,C0
00B8:  DATA 94,D4
00BA:  DATA 64,65
00BC:  DATA 6D,20
00BE:  DATA 73,61
00C0:  DATA 6E,20
00C2:  DATA 70,68
00C4:  DATA 61,6D
00C6:  DATA 3A,00
00C8:  DATA 2A,2A
00CA:  DATA 44,45
00CC:  DATA 4D,20
00CE:  DATA 53,41
00D0:  DATA 4E,20
00D2:  DATA 50,48
00D4:  DATA 41,4D
00D6:  DATA 20,2A
00D8:  DATA 2A,20
00DA:  DATA 00,00
*
02AE:  TBLRD*+
02B0:  MOVF   FF5,F
02B2:  BZ    02CC
02B4:  MOVFF  FF6,1D
02B8:  MOVFF  FF7,1E
02BC:  MOVFF  FF5,23
02C0:  RCALL  0298
02C2:  MOVFF  1D,FF6
02C6:  MOVFF  1E,FF7
02CA:  BRA    02AE
02CC:  RETURN 0
02CE:  CLRF   01
02D0:  CLRF   02
02D2:  CLRF   00
02D4:  CLRF   03
02D6:  MOVF   20,W
02D8:  BNZ   02DE
02DA:  MOVF   1F,W
02DC:  BZ    030E
02DE:  MOVLW  10
02E0:  MOVWF  21
02E2:  BCF    FD8.0
02E4:  RLCF   1D,F
02E6:  RLCF   1E,F
02E8:  RLCF   00,F
02EA:  RLCF   03,F
02EC:  MOVF   20,W
02EE:  SUBWF  03,W
02F0:  BNZ   02F6
02F2:  MOVF   1F,W
02F4:  SUBWF  00,W
02F6:  BNC   0306
02F8:  MOVF   1F,W
02FA:  SUBWF  00,F
02FC:  BTFSS  FD8.0
02FE:  DECF   03,F
0300:  MOVF   20,W
0302:  SUBWF  03,F
0304:  BSF    FD8.0
0306:  RLCF   01,F
0308:  RLCF   02,F
030A:  DECFSZ 21,F
030C:  BRA    02E2
030E:  RETURN 0
0310:  CLRF   00
0312:  CLRF   01
0314:  MOVF   22,W
0316:  BCF    FD8.0
0318:  BTFSC  23.0
031A:  ADDWF  00,F
031C:  RRCF   00,F
031E:  RRCF   01,F
0320:  BTFSC  23.1
0322:  ADDWF  00,F
0324:  RRCF   00,F
0326:  RRCF   01,F
0328:  BTFSC  23.2
032A:  ADDWF  00,F
032C:  RRCF   00,F
032E:  RRCF   01,F
0330:  BTFSC  23.3
0332:  ADDWF  00,F
0334:  RRCF   00,F
0336:  RRCF   01,F
0338:  BTFSC  23.4
033A:  ADDWF  00,F
033C:  RRCF   00,F
033E:  RRCF   01,F
0340:  BTFSC  23.5
0342:  ADDWF  00,F
0344:  RRCF   00,F
0346:  RRCF   01,F
0348:  BTFSC  23.6
034A:  ADDWF  00,F
034C:  RRCF   00,F
034E:  RRCF   01,F
0350:  BTFSC  23.7
0352:  ADDWF  00,F
0354:  RRCF   00,F
0356:  RRCF   01,F
0358:  GOTO   0396 (RETURN)
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
020E:  CLRF   FEA
0210:  MOVLW  1D
0212:  MOVWF  FE9
0214:  MOVF   FEF,W
0216:  BZ    0232
0218:  MOVLW  06
021A:  MOVWF  01
021C:  CLRF   00
021E:  DECFSZ 00,F
0220:  BRA    021E
0222:  DECFSZ 01,F
0224:  BRA    021C
0226:  MOVLW  7B
0228:  MOVWF  00
022A:  DECFSZ 00,F
022C:  BRA    022A
022E:  DECFSZ FEF,F
0230:  BRA    0218
0232:  GOTO   026A (RETURN)
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
00DC:  CLRF   2B
00DE:  MOVF   2B,W
00E0:  SUBLW  07
00E2:  BNC   0100
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
00E4:  BTFSC  2A.7
00E6:  BRA    00EC
00E8:  BCF    F8D.2
00EA:  BRA    00EE
00EC:  BSF    F8D.2
00EE:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
00F0:  BCF    F96.0
00F2:  BCF    F8D.0
00F4:  BCF    F96.0
00F6:  BSF    F8D.0
....................          X= X<<1;          
00F8:  BCF    FD8.0
00FA:  RLCF   2A,F
00FC:  INCF   2B,F
00FE:  BRA    00DE
....................      } 
0100:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
....................       XUAT_1BYTE(BLD2); 
....................       XUAT_1BYTE(BLD1);           
....................       XUAT_1BYTE(BLD0);             
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
....................       OUTPUT_LOW(RCK_32LED); 
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
....................      B1 = WLD0>>8;  B0 = WLD0; 
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
0102:  MOVFF  1E,1F
0106:  MOVFF  1D,20
....................    xuat_1byte(b1);     
010A:  MOVFF  1F,2A
010E:  RCALL  00DC
....................    xuat_1byte(b0); 
0110:  MOVFF  20,2A
0114:  RCALL  00DC
0116:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
0118:  CLRF   1E
011A:  CLRF   1D
011C:  RCALL  0102
....................    xuat_1word(0);  
011E:  CLRF   1E
0120:  CLRF   1D
0122:  RCALL  0102
....................    xuat_1word(0);                              
0124:  CLRF   1E
0126:  CLRF   1D
0128:  RCALL  0102
....................    xuat_1word(0);                                     
012A:  CLRF   1E
012C:  CLRF   1D
012E:  RCALL  0102
....................     
....................    output_high(rck_buzerelay);    
0130:  BCF    F95.3
0132:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
0134:  BCF    F95.3
0136:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
0138:  BCF    F95.4
013A:  BSF    F8C.4
....................    output_low(rck_32led);  
013C:  BCF    F95.4
013E:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
0140:  BCF    F95.5
0142:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
0144:  BCF    F95.5
0146:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
0148:  BCF    F95.7
014A:  BSF    F8C.7
....................    output_low(rck_matranled);    
014C:  BCF    F95.7
014E:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
0150:  BCF    F95.2
0152:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
0154:  BCF    F95.2
0156:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
0158:  SETF   1E
015A:  SETF   1D
015C:  RCALL  0102
....................    xuat_1word(0xffff);  
015E:  SETF   1E
0160:  SETF   1D
0162:  RCALL  0102
....................    output_high(rck_4led7doan);        
0164:  BCF    F95.6
0166:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
0168:  BCF    F95.6
016A:  BCF    F8C.6
016C:  GOTO   0188 (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
0170:  MOVLW  FF
0172:  MOVWF  F92
0174:  MOVLW  3C
0176:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
0178:  MOVLW  F1
017A:  MOVWF  F94
017C:  MOVLW  00
017E:  MOVWF  F96
....................    set_tris_d(0x00);     
0180:  MOVWF  F95
....................    output_d(0x00);  
0182:  CLRF   F95
0184:  CLRF   F8C
....................    xoa_tat_6module(); 
0186:  BRA    0118
....................    port_b_pullups(0xff);           
0188:  BCF    FF1.7
....................    rbdc=0;                
018A:  CLRF   06
018C:  CLRF   05
....................              
....................    setup_adc(adc_clock_div_32);         
018E:  MOVF   FC0,W
0190:  ANDLW  C0
0192:  IORLW  02
0194:  MOVWF  FC0
0196:  BSF    FC0.7
0198:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
019A:  MOVF   FC1,W
019C:  ANDLW  C0
019E:  IORLW  0C
01A0:  MOVWF  FC1
....................    output_low(g_all);         
01A2:  BCF    F95.0
01A4:  BCF    F8C.0
01A6:  GOTO   0406 (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
....................       TRAM4  = MA7DOAN[TAM/100%10];  
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
....................       IF (NGAN4==0XC0) 
....................       { 
....................          NGAN4=0XFF; 
....................          IF (TRAM4==0XC0) 
....................          { 
....................             TRAM4=0XFF; 
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
01AA:  MOVFF  0E,2A
01AE:  RCALL  00DC
....................     XUAT_1BYTE(GLCDDATA); 
01B0:  MOVFF  0D,2A
01B4:  RCALL  00DC
....................     XUAT_1BYTE(LCDCONTROL);        
01B6:  MOVFF  0C,2A
01BA:  RCALL  00DC
....................     XUAT_1BYTE(LCDDATA);       
01BC:  MOVFF  0B,2A
01C0:  RCALL  00DC
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
01C2:  BCF    F95.2
01C4:  BSF    F8C.2
....................     OUTPUT_LOW(RCK_LCD20X4); 
01C6:  BCF    F95.2
01C8:  BCF    F8C.2
01CA:  GOTO   01DC (RETURN)
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
01CE:  MOVF   28,W
01D0:  MOVWF  0C
01D2:  COMF   0C,F
....................     LCDDATA    = ~LCD_INS_HTHI;       
01D4:  MOVFF  29,0B
01D8:  COMF   0B,F
....................     XUAT_GLCD_LCD(); 
01DA:  BRA    01AA
01DC:  RETURN 0
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... #include <tv_pickit2_shift_lcd.c> 
.................... UNSIGNED INT8 LCD_CONTROL;   
.................... #bit LCD_P = LCD_CONTROL.3 
.................... #bit LCD_RS = LCD_CONTROL.2 
.................... #bit LCD_RW = LCD_CONTROL.1 
.................... #bit LCD_E  = LCD_CONTROL.0 
....................  
.................... #DEFINE LCD_FUNCTION_SET       0X38 
.................... #DEFINE LCD_DISPLAY_CONTROL    0X0C 
.................... #DEFINE LCD_CLEAR_DISPLAY      0X01 
.................... #DEFINE LCD_ENTRY_MODE         0X06 
.................... #DEFINE LCD_SHIFT_LEFT         0X18 
.................... #DEFINE LCD_SHIFT_RIGHT        0X1C 
....................  
.................... #DEFINE LCD_ADDR_LINE1         0X80 
.................... #DEFINE LCD_ADDR_LINE2         0XC0 
.................... #DEFINE LCD_ADDR_LINE3         0X94 
.................... #DEFINE LCD_ADDR_LINE4         0XD4 
....................  
.................... VOID LCD_XUAT_8BIT(INT8 LCD_DATA_X) 
.................... { 
....................       LCD_E=1; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);      
01DE:  BSF    18.0
01E0:  MOVFF  18,28
01E4:  MOVFF  27,29
01E8:  RCALL  01CE
....................       LCD_E=0; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);  
01EA:  BCF    18.0
01EC:  MOVFF  18,28
01F0:  MOVFF  27,29
01F4:  RCALL  01CE
01F6:  RETURN 0
.................... } 
.................... void LCD_COMMAND(INT8 LCD_DATA_X)    
....................   { 
....................       LCD_RS = 0; 
01F8:  BCF    18.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
01FA:  MOVFF  26,27
01FE:  RCALL  01DE
....................       DELAY_US(20); 
0200:  MOVLW  20
0202:  MOVWF  00
0204:  DECFSZ 00,F
0206:  BRA    0204
0208:  BRA    020A
020A:  NOP   
020C:  RETURN 0
....................   } 
.................... void LCD_DATA(INT8 LCD_DATA_X)        
....................   { 
....................       LCD_RS = 1;      
*
0298:  BSF    18.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
029A:  MOVFF  23,27
029E:  RCALL  01DE
....................       DELAY_US(20); 
02A0:  MOVLW  20
02A2:  MOVWF  00
02A4:  DECFSZ 00,F
02A6:  BRA    02A4
02A8:  BRA    02AA
02AA:  NOP   
02AC:  RETURN 0
....................   } 
....................    
.................... VOID SETUP_LCD () 
.................... {                      
....................          LCD_E  = 0;  
*
0236:  BCF    18.0
....................          LCD_RW = 0;  
0238:  BCF    18.1
....................          LCD_RS = 1;  
023A:  BSF    18.2
....................          LCD_P =0; 
023C:  BCF    18.3
....................          LCD_COMMAND(LCD_FUNCTION_SET);          
023E:  MOVLW  38
0240:  MOVWF  26
0242:  RCALL  01F8
....................          DELAY_US(40); 
0244:  MOVLW  42
0246:  MOVWF  00
0248:  DECFSZ 00,F
024A:  BRA    0248
024C:  NOP   
....................          LCD_COMMAND(LCD_DISPLAY_CONTROL);    
024E:  MOVLW  0C
0250:  MOVWF  26
0252:  RCALL  01F8
....................          DELAY_US(40); 
0254:  MOVLW  42
0256:  MOVWF  00
0258:  DECFSZ 00,F
025A:  BRA    0258
025C:  NOP   
....................          LCD_COMMAND(LCD_CLEAR_DISPLAY);       
025E:  MOVLW  01
0260:  MOVWF  26
0262:  RCALL  01F8
....................          DELAY_MS(2); 
0264:  MOVLW  02
0266:  MOVWF  1D
0268:  BRA    020E
....................          LCD_COMMAND(LCD_ENTRY_MODE);        
026A:  MOVLW  06
026C:  MOVWF  26
026E:  RCALL  01F8
....................          DELAY_US(40);                 
0270:  MOVLW  42
0272:  MOVWF  00
0274:  DECFSZ 00,F
0276:  BRA    0274
0278:  NOP   
027A:  GOTO   0408 (RETURN)
.................... } 
....................  
.................... CONST UNSIGNED CHAR LCD_SO_X[11][6] ={ 
....................                   0,1,2,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // SO 9 
....................                    
.................... CONST UNSIGNED CHAR LCD_SO_XX[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4};             // SO 9          
.................... //!CONST UNSIGNED CHAR LCD_SO_X[10][6] = 
.................... //!{ 
.................... //!                  0,1,2,3,4,5,               // SO 0 
.................... //!                  1,2,32,3,7,3,              // SO 1 
.................... //!                  6,6,2,4,3,3,               // SO 2 
.................... //!                  6,6,2,3,3,5,               // SO 3 
.................... //!                  7,3,7,32,32,7,             // SO 4 
.................... //!                  7,6,6,3,3,5,               // SO 5 
.................... //!                  0,6,6,4,3,5,               // SO 6 
.................... //!                  1,1,7,32,32,7,             // SO 7 
.................... //!                  0,6,2,4,3,5,               // SO 8 
.................... //!                  0,6,2,3,3,5};             // SO 9    
....................                    
.................... CONST UNSIGNED CHAR LCD_MA_8DOAN[] = { 
....................    0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN F - 0 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  //DOAN A - 1 
....................    0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN B - 2 
....................    0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  //DOAN D - 3 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  //DOAN C - 4 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07,  //DOAN E - 5 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  //DOAN G+D-6  
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; //DOAN I  -7 
....................     
.................... VOID LCD_GOTO_XY(SIGNED INT8 X, SIGNED INT8 Y) 
.................... {  
....................    CONST UNSIGNED INT8 LCD_VITRI[]={0x80,0xC0,0x94,0xD4}; 
....................    LCD_COMMAND(LCD_VITRI[X]+Y); 
027E:  CLRF   03
0280:  MOVF   23,W
0282:  MOVFF  FF2,25
0286:  BCF    FF2.7
0288:  RCALL  00A6
028A:  BTFSC  25.7
028C:  BSF    FF2.7
028E:  ADDWF  24,W
0290:  MOVWF  25
0292:  MOVWF  26
0294:  RCALL  01F8
0296:  RETURN 0
.................... } 
....................  
.................... VOID XXX() 
.................... {  
....................    SIGNED INT8 X; 
....................    X= LCD_SO_X[0][0]; 
....................    X= LCD_MA_8DOAN[0]; 
.................... } 
....................  
.................... unsigned INT16 t0,i; 
.................... // GIAI MA HIEN THI XOA SO 0 VO NGHIA 
.................... void lcd_hienthi_so_z_toado_xy(SIGNED int8 lcd_so, x1, y1) 
.................... { 
....................    lcd_GOTO_xy (x1, y1) ; 
*
035C:  MOVFF  20,23
0360:  MOVFF  21,24
0364:  RCALL  027E
....................    FOR (i = 0; i < 6; i++) //mot so LCD duoc tao thanh tu 6 phan, 3 tren, 3 duoi 
0366:  CLRF   1C
0368:  CLRF   1B
036A:  MOVF   1C,F
036C:  BNZ   03C4
036E:  MOVF   1B,W
0370:  SUBLW  05
0372:  BNC   03C4
....................    { 
....................       IF (i == 3) lcd_goto_xy (x1 + 1, y1); 
0374:  MOVF   1B,W
0376:  SUBLW  03
0378:  BNZ   038C
037A:  MOVF   1C,F
037C:  BNZ   038C
037E:  MOVLW  01
0380:  ADDWF  20,W
0382:  MOVWF  22
0384:  MOVWF  23
0386:  MOVFF  21,24
038A:  RCALL  027E
....................       lcd_data (lcd_so_x[lcd_so][i]) ; 
038C:  MOVFF  1F,22
0390:  MOVLW  06
0392:  MOVWF  23
0394:  BRA    0310
0396:  MOVF   01,W
0398:  CLRF   23
039A:  MOVWF  22
039C:  MOVF   1B,W
039E:  ADDWF  22,W
03A0:  MOVWF  01
03A2:  MOVF   1C,W
03A4:  ADDWFC 23,W
03A6:  MOVWF  03
03A8:  MOVF   01,W
03AA:  MOVFF  FF2,22
03AE:  BCF    FF2.7
03B0:  RCALL  0004
03B2:  BTFSC  22.7
03B4:  BSF    FF2.7
03B6:  MOVWF  22
03B8:  MOVWF  23
03BA:  RCALL  0298
03BC:  INCF   1B,F
03BE:  BTFSC  FD8.2
03C0:  INCF   1C,F
03C2:  BRA    036A
....................    } 
03C4:  RETURN 0
.................... } 
....................  
.................... void main() 
03C6:  CLRF   FF8
03C8:  BCF    FD0.7
03CA:  BSF    FB8.3
03CC:  MOVLW  08
03CE:  MOVWF  FAF
03D0:  MOVLW  02
03D2:  MOVWF  FB0
03D4:  MOVLW  A6
03D6:  MOVWF  FAC
03D8:  MOVLW  90
03DA:  MOVWF  FAB
03DC:  CLRF   04
03DE:  CLRF   0B
03E0:  CLRF   0C
03E2:  CLRF   0D
03E4:  CLRF   0E
03E6:  CLRF   17
03E8:  MOVF   FC1,W
03EA:  ANDLW  C0
03EC:  IORLW  0F
03EE:  MOVWF  FC1
03F0:  MOVLW  07
03F2:  MOVWF  FB4
03F4:  SETF   0F
03F6:  SETF   10
03F8:  SETF   11
03FA:  SETF   12
03FC:  SETF   13
03FE:  SETF   14
0400:  SETF   15
0402:  SETF   16
.................... { 
....................    set_up_port_ic_chot (); 
0404:  BRA    0170
....................    setup_lcd (); 
0406:  BRA    0236
....................    lcd_GOTO_xy (0, 0) ; 
0408:  CLRF   23
040A:  CLRF   24
040C:  RCALL  027E
....................    lcd_data ("dem san pham:"); 
040E:  MOVLW  BA
0410:  MOVWF  FF6
0412:  MOVLW  00
0414:  MOVWF  FF7
0416:  RCALL  02AE
....................    setup_timer_0 (t0_ext_l_to_h|t0_div_1); 
0418:  MOVLW  A8
041A:  MOVWF  FD5
....................    set_timer0 (0); 
041C:  CLRF   FD7
041E:  CLRF   FD6
....................    t0 = 0; 
0420:  CLRF   1A
0422:  CLRF   19
....................    WHILE (true) 
....................    { 
....................    lcd_GOTO_xy(0,0); 
0424:  CLRF   23
0426:  CLRF   24
0428:  RCALL  027E
....................    lcd_data("**DEM SAN PHAM ** "); 
042A:  MOVLW  C8
042C:  MOVWF  FF6
042E:  MOVLW  00
0430:  MOVWF  FF7
0432:  RCALL  02AE
....................       t0 = get_timer0 (); 
0434:  MOVF   FD6,W
0436:  MOVWF  19
0438:  MOVFF  FD7,1A
....................          lcd_command (0x40) ; 
043C:  MOVLW  40
043E:  MOVWF  26
0440:  RCALL  01F8
....................          FOR (i = 0; i < 64; i++) { lcd_data (lcd_ma_8doan[i]);  } 
0442:  CLRF   1C
0444:  CLRF   1B
0446:  MOVF   1C,F
0448:  BNZ   0470
044A:  MOVF   1B,W
044C:  SUBLW  3F
044E:  BNC   0470
0450:  MOVFF  1C,03
0454:  MOVF   1B,W
0456:  MOVFF  FF2,1D
045A:  BCF    FF2.7
045C:  RCALL  0056
045E:  BTFSC  1D.7
0460:  BSF    FF2.7
0462:  MOVWF  1D
0464:  MOVWF  23
0466:  RCALL  0298
0468:  INCF   1B,F
046A:  BTFSC  FD8.2
046C:  INCF   1C,F
046E:  BRA    0446
....................          lcd_hienthi_so_z_toado_xy (t0/100, 2, 0);      //tram              
0470:  MOVFF  1A,1E
0474:  MOVFF  19,1D
0478:  CLRF   20
047A:  MOVLW  64
047C:  MOVWF  1F
047E:  RCALL  02CE
0480:  MOVFF  02,1E
0484:  MOVFF  01,1D
0488:  MOVFF  01,1F
048C:  MOVLW  02
048E:  MOVWF  20
0490:  CLRF   21
0492:  RCALL  035C
....................          lcd_hienthi_so_z_toado_xy (t0/10, 2, 4);      //chuc 
0494:  MOVFF  1A,1E
0498:  MOVFF  19,1D
049C:  CLRF   20
049E:  MOVLW  0A
04A0:  MOVWF  1F
04A2:  RCALL  02CE
04A4:  MOVFF  02,1E
04A8:  MOVFF  01,1D
04AC:  MOVFF  01,1F
04B0:  MOVLW  02
04B2:  MOVWF  20
04B4:  MOVLW  04
04B6:  MOVWF  21
04B8:  RCALL  035C
....................          lcd_hienthi_so_z_toado_xy (t0%10, 2, 8);      //don vi 
04BA:  MOVFF  1A,1E
04BE:  MOVFF  19,1D
04C2:  CLRF   20
04C4:  MOVLW  0A
04C6:  MOVWF  1F
04C8:  RCALL  02CE
04CA:  MOVFF  00,1D
04CE:  MOVFF  03,1E
04D2:  MOVFF  00,1F
04D6:  MOVLW  02
04D8:  MOVWF  20
04DA:  MOVLW  08
04DC:  MOVWF  21
04DE:  RCALL  035C
....................       IF (t0 >= 1000) set_timer0 (1) ; 
04E0:  MOVF   1A,W
04E2:  SUBLW  02
04E4:  BC    04F6
04E6:  XORLW  FF
04E8:  BNZ   04F0
04EA:  MOVF   19,W
04EC:  SUBLW  E7
04EE:  BC    04F6
04F0:  CLRF   FD7
04F2:  MOVLW  01
04F4:  MOVWF  FD6
04F6:  BRA    0424
....................    } 
.................... } 
....................  
04F8:  SLEEP 
....................  

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
