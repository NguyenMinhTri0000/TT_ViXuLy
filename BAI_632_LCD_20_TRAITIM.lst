CCS PCH C Compiler, Version 5.015, 5967               22-Oct-22 13:36

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\BAI_632_LCD_20_TRAITIM.lst

               ROM used:   728 bytes (2%)
                           Largest free fragment is 32040
               RAM used:   28 (1%) at main() level
                           36 (2%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   0238
.................... #include <tv_pickit2_shift_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 80,C0
0016:  DATA 94,D4
0018:  CLRF   FF7
001A:  ADDLW  28
001C:  MOVWF  FF6
001E:  MOVLW  00
0020:  ADDWFC FF7,F
0022:  TBLRD*+
0024:  MOVF   FF5,W
0026:  RETURN 0
0028:  DATA 0A,15
002A:  DATA 11,11
002C:  DATA 0A,04
002E:  DATA 00,00
0030:  DATA 20,68
0032:  DATA 69,65
0034:  DATA 6E,20
0036:  DATA 74,68
0038:  DATA 69,20
003A:  DATA 74,72
003C:  DATA 61,69
003E:  DATA 20,74
0040:  DATA 69,6D
0042:  DATA 20,00
*
0216:  TBLRD*+
0218:  MOVF   FF5,F
021A:  BZ    0234
021C:  MOVFF  FF6,1B
0220:  MOVFF  FF7,1C
0224:  MOVFF  FF5,1D
0228:  RCALL  0200
022A:  MOVFF  1B,FF6
022E:  MOVFF  1C,FF7
0232:  BRA    0216
0234:  GOTO   028A (RETURN)
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
0176:  CLRF   FEA
0178:  MOVLW  1B
017A:  MOVWF  FE9
017C:  MOVF   FEF,W
017E:  BZ    019A
0180:  MOVLW  06
0182:  MOVWF  01
0184:  CLRF   00
0186:  DECFSZ 00,F
0188:  BRA    0186
018A:  DECFSZ 01,F
018C:  BRA    0184
018E:  MOVLW  7B
0190:  MOVWF  00
0192:  DECFSZ 00,F
0194:  BRA    0192
0196:  DECFSZ FEF,F
0198:  BRA    0180
019A:  GOTO   01D2 (RETURN)
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
0044:  CLRF   23
0046:  MOVF   23,W
0048:  SUBLW  07
004A:  BNC   0068
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
004C:  BTFSC  22.7
004E:  BRA    0054
0050:  BCF    F8D.2
0052:  BRA    0056
0054:  BSF    F8D.2
0056:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
0058:  BCF    F96.0
005A:  BCF    F8D.0
005C:  BCF    F96.0
005E:  BSF    F8D.0
....................          X= X<<1;          
0060:  BCF    FD8.0
0062:  RLCF   22,F
0064:  INCF   23,F
0066:  BRA    0046
....................      } 
0068:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
....................       XUAT_1BYTE(BLD2); 
....................       XUAT_1BYTE(BLD1);           
....................       XUAT_1BYTE(BLD0);             
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
....................       OUTPUT_LOW(RCK_32LED); 
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
....................      B1 = WLD0>>8;  B0 = WLD0; 
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
006A:  MOVFF  1C,1D
006E:  MOVFF  1B,1E
....................    xuat_1byte(b1);     
0072:  MOVFF  1D,22
0076:  RCALL  0044
....................    xuat_1byte(b0); 
0078:  MOVFF  1E,22
007C:  RCALL  0044
007E:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
0080:  CLRF   1C
0082:  CLRF   1B
0084:  RCALL  006A
....................    xuat_1word(0);  
0086:  CLRF   1C
0088:  CLRF   1B
008A:  RCALL  006A
....................    xuat_1word(0);                              
008C:  CLRF   1C
008E:  CLRF   1B
0090:  RCALL  006A
....................    xuat_1word(0);                                     
0092:  CLRF   1C
0094:  CLRF   1B
0096:  RCALL  006A
....................     
....................    output_high(rck_buzerelay);    
0098:  BCF    F95.3
009A:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
009C:  BCF    F95.3
009E:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
00A0:  BCF    F95.4
00A2:  BSF    F8C.4
....................    output_low(rck_32led);  
00A4:  BCF    F95.4
00A6:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
00A8:  BCF    F95.5
00AA:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
00AC:  BCF    F95.5
00AE:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
00B0:  BCF    F95.7
00B2:  BSF    F8C.7
....................    output_low(rck_matranled);    
00B4:  BCF    F95.7
00B6:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
00B8:  BCF    F95.2
00BA:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
00BC:  BCF    F95.2
00BE:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
00C0:  SETF   1C
00C2:  SETF   1B
00C4:  RCALL  006A
....................    xuat_1word(0xffff);  
00C6:  SETF   1C
00C8:  SETF   1B
00CA:  RCALL  006A
....................    output_high(rck_4led7doan);        
00CC:  BCF    F95.6
00CE:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
00D0:  BCF    F95.6
00D2:  BCF    F8C.6
00D4:  GOTO   00F0 (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
00D8:  MOVLW  FF
00DA:  MOVWF  F92
00DC:  MOVLW  3C
00DE:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
00E0:  MOVLW  F1
00E2:  MOVWF  F94
00E4:  MOVLW  00
00E6:  MOVWF  F96
....................    set_tris_d(0x00);     
00E8:  MOVWF  F95
....................    output_d(0x00);  
00EA:  CLRF   F95
00EC:  CLRF   F8C
....................    xoa_tat_6module(); 
00EE:  BRA    0080
....................    port_b_pullups(0xff);           
00F0:  BCF    FF1.7
....................    rbdc=0;                
00F2:  CLRF   06
00F4:  CLRF   05
....................              
....................    setup_adc(adc_clock_div_32);         
00F6:  MOVF   FC0,W
00F8:  ANDLW  C0
00FA:  IORLW  02
00FC:  MOVWF  FC0
00FE:  BSF    FC0.7
0100:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
0102:  MOVF   FC1,W
0104:  ANDLW  C0
0106:  IORLW  0C
0108:  MOVWF  FC1
....................    output_low(g_all);         
010A:  BCF    F95.0
010C:  BCF    F8C.0
010E:  GOTO   0278 (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
....................       TRAM4  = MA7DOAN[TAM/100%10];  
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
....................       IF (NGAN4==0XC0) 
....................       { 
....................          NGAN4=0XFF; 
....................          IF (TRAM4==0XC0) 
....................          { 
....................             TRAM4=0XFF; 
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
0112:  MOVFF  0E,22
0116:  RCALL  0044
....................     XUAT_1BYTE(GLCDDATA); 
0118:  MOVFF  0D,22
011C:  RCALL  0044
....................     XUAT_1BYTE(LCDCONTROL);        
011E:  MOVFF  0C,22
0122:  RCALL  0044
....................     XUAT_1BYTE(LCDDATA);       
0124:  MOVFF  0B,22
0128:  RCALL  0044
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
012A:  BCF    F95.2
012C:  BSF    F8C.2
....................     OUTPUT_LOW(RCK_LCD20X4); 
012E:  BCF    F95.2
0130:  BCF    F8C.2
0132:  GOTO   0144 (RETURN)
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
0136:  MOVF   20,W
0138:  MOVWF  0C
013A:  COMF   0C,F
....................     LCDDATA    = ~LCD_INS_HTHI;       
013C:  MOVFF  21,0B
0140:  COMF   0B,F
....................     XUAT_GLCD_LCD(); 
0142:  BRA    0112
0144:  RETURN 0
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... //!#include <tv_pickit2_shift_1_proteus.c> 
.................... #include <tv_pickit2_shift_lcd.c> 
.................... UNSIGNED INT8 LCD_CONTROL;   
.................... #bit LCD_P = LCD_CONTROL.3 
.................... #bit LCD_RS = LCD_CONTROL.2 
.................... #bit LCD_RW = LCD_CONTROL.1 
.................... #bit LCD_E  = LCD_CONTROL.0 
....................  
.................... #DEFINE LCD_FUNCTION_SET       0X38 
.................... #DEFINE LCD_DISPLAY_CONTROL    0X0C 
.................... #DEFINE LCD_CLEAR_DISPLAY        0X01 
.................... #DEFINE LCD_ENTRY_MODE         0X06 
.................... #DEFINE LCD_SHIFT_LEFT         0X18 
.................... #DEFINE LCD_SHIFT_RIGHT        0X1C 
....................  
.................... #DEFINE LCD_ADDR_LINE1         0X80 
.................... #DEFINE LCD_ADDR_LINE2         0XC0 
.................... #DEFINE LCD_ADDR_LINE3         0X94 
.................... #DEFINE LCD_ADDR_LINE4         0XD4 
....................  
.................... VOID LCD_XUAT_8BIT(INT8 LCD_DATA_X) 
.................... { 
....................       LCD_E=1; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);      
0146:  BSF    18.0
0148:  MOVFF  18,20
014C:  MOVFF  1F,21
0150:  RCALL  0136
....................       LCD_E=0; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);  
0152:  BCF    18.0
0154:  MOVFF  18,20
0158:  MOVFF  1F,21
015C:  RCALL  0136
015E:  RETURN 0
.................... } 
.................... void LCD_COMMAND(INT8 LCD_DATA_X)    
....................   { 
....................       LCD_RS = 0; 
0160:  BCF    18.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
0162:  MOVFF  1E,1F
0166:  RCALL  0146
....................       DELAY_US(20); 
0168:  MOVLW  20
016A:  MOVWF  00
016C:  DECFSZ 00,F
016E:  BRA    016C
0170:  BRA    0172
0172:  NOP   
0174:  RETURN 0
....................   } 
.................... void LCD_DATA(INT8 LCD_DATA_X)        
....................   { 
....................       LCD_RS = 1;      
*
0200:  BSF    18.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
0202:  MOVFF  1D,1F
0206:  RCALL  0146
....................       DELAY_US(20); 
0208:  MOVLW  20
020A:  MOVWF  00
020C:  DECFSZ 00,F
020E:  BRA    020C
0210:  BRA    0212
0212:  NOP   
0214:  RETURN 0
....................   } 
....................    
.................... VOID SETUP_LCD () 
.................... {                      
....................          LCD_E  = 0;  
*
019E:  BCF    18.0
....................          LCD_RW = 0;  
01A0:  BCF    18.1
....................          LCD_RS = 1;  
01A2:  BSF    18.2
....................          LCD_P =0; 
01A4:  BCF    18.3
....................          LCD_COMMAND(LCD_FUNCTION_SET);          
01A6:  MOVLW  38
01A8:  MOVWF  1E
01AA:  RCALL  0160
....................          DELAY_US(40); 
01AC:  MOVLW  42
01AE:  MOVWF  00
01B0:  DECFSZ 00,F
01B2:  BRA    01B0
01B4:  NOP   
....................          LCD_COMMAND(LCD_DISPLAY_CONTROL);    
01B6:  MOVLW  0C
01B8:  MOVWF  1E
01BA:  RCALL  0160
....................          DELAY_US(40); 
01BC:  MOVLW  42
01BE:  MOVWF  00
01C0:  DECFSZ 00,F
01C2:  BRA    01C0
01C4:  NOP   
....................          LCD_COMMAND(LCD_CLEAR_DISPLAY);       
01C6:  MOVLW  01
01C8:  MOVWF  1E
01CA:  RCALL  0160
....................          DELAY_MS(2); 
01CC:  MOVLW  02
01CE:  MOVWF  1B
01D0:  BRA    0176
....................          LCD_COMMAND(LCD_ENTRY_MODE);        
01D2:  MOVLW  06
01D4:  MOVWF  1E
01D6:  RCALL  0160
....................          DELAY_US(40);                 
01D8:  MOVLW  42
01DA:  MOVWF  00
01DC:  DECFSZ 00,F
01DE:  BRA    01DC
01E0:  NOP   
01E2:  GOTO   027A (RETURN)
.................... } 
....................  
.................... CONST UNSIGNED CHAR LCD_SO_X[11][6] ={ 
....................                   0,1,2,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // SO 9 
....................                    
.................... CONST UNSIGNED CHAR LCD_SO_XX[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4};             // SO 9          
.................... //!CONST UNSIGNED CHAR LCD_SO_X[10][6] = 
.................... //!{ 
.................... //!                  0,1,2,3,4,5,               // SO 0 
.................... //!                  1,2,32,3,7,3,              // SO 1 
.................... //!                  6,6,2,4,3,3,               // SO 2 
.................... //!                  6,6,2,3,3,5,               // SO 3 
.................... //!                  7,3,7,32,32,7,             // SO 4 
.................... //!                  7,6,6,3,3,5,               // SO 5 
.................... //!                  0,6,6,4,3,5,               // SO 6 
.................... //!                  1,1,7,32,32,7,             // SO 7 
.................... //!                  0,6,2,4,3,5,               // SO 8 
.................... //!                  0,6,2,3,3,5};             // SO 9    
....................                    
.................... CONST UNSIGNED CHAR LCD_MA_8DOAN[] = { 
....................    0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN F - 0 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  //DOAN A - 1 
....................    0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN B - 2 
....................    0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  //DOAN D - 3 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  //DOAN C - 4 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07,  //DOAN E - 5 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  //DOAN G+D-6  
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; //DOAN I  -7 
....................     
.................... VOID LCD_GOTO_XY(SIGNED INT8 X, SIGNED INT8 Y) 
.................... {  
....................    CONST UNSIGNED INT8 LCD_VITRI[]={0x80,0xC0,0x94,0xD4}; 
....................    LCD_COMMAND(LCD_VITRI[X]+Y); 
01E6:  CLRF   03
01E8:  MOVF   1B,W
01EA:  MOVFF  FF2,1D
01EE:  BCF    FF2.7
01F0:  RCALL  0004
01F2:  BTFSC  1D.7
01F4:  BSF    FF2.7
01F6:  ADDWF  1C,W
01F8:  MOVWF  1D
01FA:  MOVWF  1E
01FC:  RCALL  0160
01FE:  RETURN 0
.................... } 
....................  
.................... VOID XXX() 
.................... {  
....................    SIGNED INT8 X; 
....................    X= LCD_SO_X[0][0]; 
....................    X= LCD_MA_8DOAN[0]; 
.................... } 
....................  
.................... const UNSIGNED char hang2[]={0x0a,0x15,0x11,0x11,0x0a,0x04,0,0}; 
.................... signed INT8 i, j; 
.................... void main() 
*
0238:  CLRF   FF8
023A:  BCF    FD0.7
023C:  BSF    FB8.3
023E:  MOVLW  08
0240:  MOVWF  FAF
0242:  MOVLW  02
0244:  MOVWF  FB0
0246:  MOVLW  A6
0248:  MOVWF  FAC
024A:  MOVLW  90
024C:  MOVWF  FAB
024E:  CLRF   04
0250:  CLRF   0B
0252:  CLRF   0C
0254:  CLRF   0D
0256:  CLRF   0E
0258:  CLRF   17
025A:  MOVF   FC1,W
025C:  ANDLW  C0
025E:  IORLW  0F
0260:  MOVWF  FC1
0262:  MOVLW  07
0264:  MOVWF  FB4
0266:  SETF   0F
0268:  SETF   10
026A:  SETF   11
026C:  SETF   12
026E:  SETF   13
0270:  SETF   14
0272:  SETF   15
0274:  SETF   16
.................... { 
....................    set_up_port_ic_chot () ; 
0276:  BRA    00D8
....................    setup_lcd () ; 
0278:  BRA    019E
....................    lcd_GOTO_xy (0, 0) ; 
027A:  CLRF   1B
027C:  CLRF   1C
027E:  RCALL  01E6
....................    lcd_data (" hien thi trai tim ") ; 
0280:  MOVLW  30
0282:  MOVWF  FF6
0284:  MOVLW  00
0286:  MOVWF  FF7
0288:  BRA    0216
....................  
....................    FOR (j = 0; j < 20; j++) 
028A:  CLRF   1A
028C:  BTFSC  1A.7
028E:  BRA    0296
0290:  MOVF   1A,W
0292:  SUBLW  13
0294:  BNC   02D4
....................    { 
....................       lcd_command (0x40) ; 
0296:  MOVLW  40
0298:  MOVWF  1E
029A:  RCALL  0160
....................       FOR (i = 0; i < 8; i++) { lcd_data (hang2[i]);  } 
029C:  CLRF   19
029E:  BTFSC  19.7
02A0:  BRA    02A8
02A2:  MOVF   19,W
02A4:  SUBLW  07
02A6:  BNC   02C2
02A8:  CLRF   03
02AA:  MOVF   19,W
02AC:  MOVFF  FF2,1B
02B0:  BCF    FF2.7
02B2:  RCALL  0018
02B4:  BTFSC  1B.7
02B6:  BSF    FF2.7
02B8:  MOVWF  1B
02BA:  MOVWF  1D
02BC:  RCALL  0200
02BE:  INCF   19,F
02C0:  BRA    029E
....................       lcd_GOTO_xy (1, j) ; 
02C2:  MOVLW  01
02C4:  MOVWF  1B
02C6:  MOVFF  1A,1C
02CA:  RCALL  01E6
....................       lcd_data (0);     //dia chi ki tu trang 148 
02CC:  CLRF   1D
02CE:  RCALL  0200
02D0:  INCF   1A,F
02D2:  BRA    028C
....................    } 
....................  
....................    WHILE (true) ; 
02D4:  BRA    02D4
.................... } 
....................  
02D6:  SLEEP 
....................  

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
