CCS PCH C Compiler, Version 5.015, 5967               18-Oct-22 10:42

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\BAI_615_LCD_8LED_GIO_PHUT_GIAY.lst

               ROM used:   1530 bytes (5%)
                           Largest free fragment is 31234
               RAM used:   54 (3%) at main() level
                           63 (3%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0538
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00DE
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //!#include <tv_pickit2_shift_1_proteus.c> 
.................... #include <tv_pickit2_shift_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA C0,F9
00B2:  DATA A4,B0
00B4:  DATA 99,92
00B6:  DATA 82,F8
00B8:  DATA 80,90
00BA:  DATA 88,83
00BC:  DATA C6,A1
00BE:  DATA 86,8E
00C0:  MOVFF  FF2,0D
00C4:  BCF    FF2.7
00C6:  CLRF   FF7
00C8:  ADDLW  DA
00CA:  MOVWF  FF6
00CC:  MOVLW  00
00CE:  ADDWFC FF7,F
00D0:  TBLRD*+
00D2:  MOVF   FF5,W
00D4:  BTFSC  0D.7
00D6:  BSF    FF2.7
00D8:  RETURN 0
00DA:  DATA 80,C0
00DC:  DATA 94,D4
*
00EE:  DATA 64,6F
00F0:  DATA 6E,67
00F2:  DATA 20,68
00F4:  DATA 6F,3A
00F6:  DATA 00,00
*
02C8:  TBLRD*+
02CA:  MOVF   FF5,F
02CC:  BZ    02E6
02CE:  MOVFF  FF6,36
02D2:  MOVFF  FF7,37
02D6:  MOVFF  FF5,38
02DA:  RCALL  02B2
02DC:  MOVFF  36,FF6
02E0:  MOVFF  37,FF7
02E4:  BRA    02C8
02E6:  GOTO   058C (RETURN)
*
0314:  MOVF   37,W
0316:  XORWF  38,W
0318:  ANDLW  80
031A:  MOVWF  3A
031C:  BTFSS  37.7
031E:  BRA    0324
0320:  COMF   37,F
0322:  INCF   37,F
0324:  BTFSS  38.7
0326:  BRA    032C
0328:  COMF   38,F
032A:  INCF   38,F
032C:  MOVF   38,W
032E:  CLRF   01
0330:  SUBWF  37,W
0332:  BC    033A
0334:  MOVFF  37,00
0338:  BRA    0352
033A:  CLRF   00
033C:  MOVLW  08
033E:  MOVWF  39
0340:  RLCF   37,F
0342:  RLCF   00,F
0344:  MOVF   38,W
0346:  SUBWF  00,W
0348:  BTFSC  FD8.0
034A:  MOVWF  00
034C:  RLCF   01,F
034E:  DECFSZ 39,F
0350:  BRA    0340
0352:  BTFSS  3A.7
0354:  BRA    035A
0356:  COMF   01,F
0358:  INCF   01,F
035A:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
022A:  CLRF   FEA
022C:  MOVLW  36
022E:  MOVWF  FE9
0230:  MOVF   FEF,W
0232:  BZ    024E
0234:  MOVLW  06
0236:  MOVWF  01
0238:  CLRF   00
023A:  DECFSZ 00,F
023C:  BRA    023A
023E:  DECFSZ 01,F
0240:  BRA    0238
0242:  MOVLW  7B
0244:  MOVWF  00
0246:  DECFSZ 00,F
0248:  BRA    0246
024A:  DECFSZ FEF,F
024C:  BRA    0234
024E:  RETURN 0
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
00F8:  CLRF   3E
00FA:  MOVF   3E,W
00FC:  SUBLW  07
00FE:  BNC   011C
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
0100:  BTFSC  3D.7
0102:  BRA    0108
0104:  BCF    F8D.2
0106:  BRA    010A
0108:  BSF    F8D.2
010A:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
010C:  BCF    F96.0
010E:  BCF    F8D.0
0110:  BCF    F96.0
0112:  BSF    F8D.0
....................          X= X<<1;          
0114:  BCF    FD8.0
0116:  RLCF   3D,F
0118:  INCF   3E,F
011A:  BRA    00FA
....................      } 
011C:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
....................       XUAT_1BYTE(BLD2); 
....................       XUAT_1BYTE(BLD1);           
....................       XUAT_1BYTE(BLD0);             
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
....................       OUTPUT_LOW(RCK_32LED); 
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
....................      B1 = WLD0>>8;  B0 = WLD0; 
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
011E:  MOVFF  37,38
0122:  MOVFF  36,39
....................    xuat_1byte(b1);     
0126:  MOVFF  38,3D
012A:  RCALL  00F8
....................    xuat_1byte(b0); 
012C:  MOVFF  39,3D
0130:  RCALL  00F8
0132:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
0134:  CLRF   37
0136:  CLRF   36
0138:  RCALL  011E
....................    xuat_1word(0);  
013A:  CLRF   37
013C:  CLRF   36
013E:  RCALL  011E
....................    xuat_1word(0);                              
0140:  CLRF   37
0142:  CLRF   36
0144:  RCALL  011E
....................    xuat_1word(0);                                     
0146:  CLRF   37
0148:  CLRF   36
014A:  RCALL  011E
....................     
....................    output_high(rck_buzerelay);    
014C:  BCF    F95.3
014E:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
0150:  BCF    F95.3
0152:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
0154:  BCF    F95.4
0156:  BSF    F8C.4
....................    output_low(rck_32led);  
0158:  BCF    F95.4
015A:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
015C:  BCF    F95.5
015E:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
0160:  BCF    F95.5
0162:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
0164:  BCF    F95.7
0166:  BSF    F8C.7
....................    output_low(rck_matranled);    
0168:  BCF    F95.7
016A:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
016C:  BCF    F95.2
016E:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
0170:  BCF    F95.2
0172:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
0174:  SETF   37
0176:  SETF   36
0178:  RCALL  011E
....................    xuat_1word(0xffff);  
017A:  SETF   37
017C:  SETF   36
017E:  RCALL  011E
....................    output_high(rck_4led7doan);        
0180:  BCF    F95.6
0182:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
0184:  BCF    F95.6
0186:  BCF    F8C.6
0188:  GOTO   01A4 (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
018C:  MOVLW  FF
018E:  MOVWF  F92
0190:  MOVLW  3C
0192:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
0194:  MOVLW  F1
0196:  MOVWF  F94
0198:  MOVLW  00
019A:  MOVWF  F96
....................    set_tris_d(0x00);     
019C:  MOVWF  F95
....................    output_d(0x00);  
019E:  CLRF   F95
01A0:  CLRF   F8C
....................    xoa_tat_6module(); 
01A2:  BRA    0134
....................    port_b_pullups(0xff);           
01A4:  BCF    FF1.7
....................    rbdc=0;                
01A6:  CLRF   18
01A8:  CLRF   17
....................              
....................    setup_adc(adc_clock_div_32);         
01AA:  MOVF   FC0,W
01AC:  ANDLW  C0
01AE:  IORLW  02
01B0:  MOVWF  FC0
01B2:  BSF    FC0.7
01B4:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
01B6:  MOVF   FC1,W
01B8:  ANDLW  C0
01BA:  IORLW  0C
01BC:  MOVWF  FC1
....................    output_low(g_all);         
01BE:  BCF    F95.0
01C0:  BCF    F8C.0
01C2:  GOTO   057A (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
*
0418:  MOVFF  3A,3D
041C:  RCALL  00F8
041E:  MOVFF  39,3D
0422:  RCALL  00F8
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
0424:  MOVFF  38,3D
0428:  RCALL  00F8
042A:  MOVFF  37,3D
042E:  RCALL  00F8
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
0430:  BCF    F95.6
0432:  BCF    F8C.6
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
0434:  BCF    F95.6
0436:  BSF    F8C.6
0438:  GOTO   0482 (RETURN)
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
....................       TRAM4  = MA7DOAN[TAM/100%10];  
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
....................       IF (NGAN4==0XC0) 
....................       { 
....................          NGAN4=0XFF; 
....................          IF (TRAM4==0XC0) 
....................          { 
....................             TRAM4=0XFF; 
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
*
01C6:  MOVFF  20,3D
01CA:  RCALL  00F8
....................     XUAT_1BYTE(GLCDDATA); 
01CC:  MOVFF  1F,3D
01D0:  RCALL  00F8
....................     XUAT_1BYTE(LCDCONTROL);        
01D2:  MOVFF  1E,3D
01D6:  RCALL  00F8
....................     XUAT_1BYTE(LCDDATA);       
01D8:  MOVFF  1D,3D
01DC:  RCALL  00F8
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
01DE:  BCF    F95.2
01E0:  BSF    F8C.2
....................     OUTPUT_LOW(RCK_LCD20X4); 
01E2:  BCF    F95.2
01E4:  BCF    F8C.2
01E6:  GOTO   01F8 (RETURN)
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
01EA:  MOVF   3B,W
01EC:  MOVWF  1E
01EE:  COMF   1E,F
....................     LCDDATA    = ~LCD_INS_HTHI;       
01F0:  MOVFF  3C,1D
01F4:  COMF   1D,F
....................     XUAT_GLCD_LCD(); 
01F6:  BRA    01C6
01F8:  RETURN 0
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... #include <tv_pickit2_shift_lcd.c> 
.................... UNSIGNED INT8 LCD_CONTROL;   
.................... #bit LCD_P = LCD_CONTROL.3 
.................... #bit LCD_RS = LCD_CONTROL.2 
.................... #bit LCD_RW = LCD_CONTROL.1 
.................... #bit LCD_E  = LCD_CONTROL.0 
....................  
.................... #DEFINE LCD_FUNCTION_SET       0X38 
.................... #DEFINE LCD_DISPLAY_CONTROL    0X0C 
.................... #DEFINE LCD_CLEAR_DISPLAY      0X01 
.................... #DEFINE LCD_ENTRY_MODE         0X06 
.................... #DEFINE LCD_SHIFT_LEFT         0X18 
.................... #DEFINE LCD_SHIFT_RIGHT        0X1C 
....................  
.................... #DEFINE LCD_ADDR_LINE1         0X80 
.................... #DEFINE LCD_ADDR_LINE2         0XC0 
.................... #DEFINE LCD_ADDR_LINE3         0X94 
.................... #DEFINE LCD_ADDR_LINE4         0XD4 
....................  
.................... VOID LCD_XUAT_8BIT(INT8 LCD_DATA_X) 
.................... { 
....................       LCD_E=1; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);      
01FA:  BSF    2A.0
01FC:  MOVFF  2A,3B
0200:  MOVFF  3A,3C
0204:  RCALL  01EA
....................       LCD_E=0; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);  
0206:  BCF    2A.0
0208:  MOVFF  2A,3B
020C:  MOVFF  3A,3C
0210:  RCALL  01EA
0212:  RETURN 0
.................... } 
.................... void LCD_COMMAND(INT8 LCD_DATA_X)    
....................   { 
....................       LCD_RS = 0; 
0214:  BCF    2A.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
0216:  MOVFF  39,3A
021A:  RCALL  01FA
....................       DELAY_US(20); 
021C:  MOVLW  20
021E:  MOVWF  00
0220:  DECFSZ 00,F
0222:  BRA    0220
0224:  BRA    0226
0226:  NOP   
0228:  RETURN 0
....................   } 
.................... void LCD_DATA(INT8 LCD_DATA_X)        
....................   { 
....................       LCD_RS = 1;      
*
02B2:  BSF    2A.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
02B4:  MOVFF  38,3A
02B8:  RCALL  01FA
....................       DELAY_US(20); 
02BA:  MOVLW  20
02BC:  MOVWF  00
02BE:  DECFSZ 00,F
02C0:  BRA    02BE
02C2:  BRA    02C4
02C4:  NOP   
02C6:  RETURN 0
....................   } 
....................    
.................... VOID SETUP_LCD () 
.................... {                      
....................          LCD_E  = 0;  
*
0250:  BCF    2A.0
....................          LCD_RW = 0;  
0252:  BCF    2A.1
....................          LCD_RS = 1;  
0254:  BSF    2A.2
....................          LCD_P =0; 
0256:  BCF    2A.3
....................          LCD_COMMAND(LCD_FUNCTION_SET);          
0258:  MOVLW  38
025A:  MOVWF  39
025C:  RCALL  0214
....................          DELAY_US(40); 
025E:  MOVLW  42
0260:  MOVWF  00
0262:  DECFSZ 00,F
0264:  BRA    0262
0266:  NOP   
....................          LCD_COMMAND(LCD_DISPLAY_CONTROL);    
0268:  MOVLW  0C
026A:  MOVWF  39
026C:  RCALL  0214
....................          DELAY_US(40); 
026E:  MOVLW  42
0270:  MOVWF  00
0272:  DECFSZ 00,F
0274:  BRA    0272
0276:  NOP   
....................          LCD_COMMAND(LCD_CLEAR_DISPLAY);       
0278:  MOVLW  01
027A:  MOVWF  39
027C:  RCALL  0214
....................          DELAY_MS(2); 
027E:  MOVLW  02
0280:  MOVWF  36
0282:  RCALL  022A
....................          LCD_COMMAND(LCD_ENTRY_MODE);        
0284:  MOVLW  06
0286:  MOVWF  39
0288:  RCALL  0214
....................          DELAY_US(40);                 
028A:  MOVLW  42
028C:  MOVWF  00
028E:  DECFSZ 00,F
0290:  BRA    028E
0292:  NOP   
0294:  GOTO   057C (RETURN)
.................... } 
....................  
.................... CONST UNSIGNED CHAR LCD_SO_X[11][6] ={ 
....................                   0,1,2,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // SO 9 
....................                    
.................... CONST UNSIGNED CHAR LCD_SO_XX[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4};             // SO 9          
.................... //!CONST UNSIGNED CHAR LCD_SO_X[10][6] = 
.................... //!{ 
.................... //!                  0,1,2,3,4,5,               // SO 0 
.................... //!                  1,2,32,3,7,3,              // SO 1 
.................... //!                  6,6,2,4,3,3,               // SO 2 
.................... //!                  6,6,2,3,3,5,               // SO 3 
.................... //!                  7,3,7,32,32,7,             // SO 4 
.................... //!                  7,6,6,3,3,5,               // SO 5 
.................... //!                  0,6,6,4,3,5,               // SO 6 
.................... //!                  1,1,7,32,32,7,             // SO 7 
.................... //!                  0,6,2,4,3,5,               // SO 8 
.................... //!                  0,6,2,3,3,5};             // SO 9    
....................                    
.................... CONST UNSIGNED CHAR LCD_MA_8DOAN[] = { 
....................    0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN F - 0 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  //DOAN A - 1 
....................    0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN B - 2 
....................    0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  //DOAN D - 3 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  //DOAN C - 4 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07,  //DOAN E - 5 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  //DOAN G+D-6  
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; //DOAN I  -7 
....................     
.................... VOID LCD_GOTO_XY(SIGNED INT8 X, SIGNED INT8 Y) 
.................... {  
....................    CONST UNSIGNED INT8 LCD_VITRI[]={0x80,0xC0,0x94,0xD4}; 
....................    LCD_COMMAND(LCD_VITRI[X]+Y); 
0298:  CLRF   03
029A:  MOVF   36,W
029C:  MOVFF  FF2,38
02A0:  BCF    FF2.7
02A2:  RCALL  00C0
02A4:  BTFSC  38.7
02A6:  BSF    FF2.7
02A8:  ADDWF  37,W
02AA:  MOVWF  38
02AC:  MOVWF  39
02AE:  RCALL  0214
02B0:  RETURN 0
.................... } 
....................  
.................... VOID XXX() 
.................... {  
....................    SIGNED INT8 X; 
....................    X= LCD_SO_X[0][0]; 
....................    X= LCD_MA_8DOAN[0]; 
.................... } 
....................  
.................... signed INT8 giay, phut, gio, gia_tri_mod, bdn; 
.................... signed INT8 DV_GIO, CH_GIO, DV_PHUT, CH_PHUT, DV_GIAY, CH_GIAY; 
.................... #INT_timer1 
.................... void interrupt_timer1() 
.................... { 
....................    bdn++; 
*
00DE:  INCF   2F,F
....................    set_timer1 (3036); 
00E0:  MOVLW  0B
00E2:  MOVWF  FCF
00E4:  MOVLW  DC
00E6:  MOVWF  FCE
00E8:  BCF    F9E.0
00EA:  GOTO   0054
.................... } 
....................  
.................... VOID GM_LCD() 
.................... { 
....................    DV_GIAY = GIAY % 10 + 0X30; 
*
035C:  MOVFF  2B,37
0360:  MOVLW  0A
0362:  MOVWF  38
0364:  RCALL  0314
0366:  MOVLW  30
0368:  ADDWF  00,W
036A:  MOVWF  34
....................    CH_GIAY = GIAY / 10 % 10 + 0X30; 
036C:  MOVFF  2B,37
0370:  MOVLW  0A
0372:  MOVWF  38
0374:  RCALL  0314
0376:  MOVFF  01,37
037A:  MOVLW  0A
037C:  MOVWF  38
037E:  RCALL  0314
0380:  MOVLW  30
0382:  ADDWF  00,W
0384:  MOVWF  35
....................     
....................    DV_PHUT = PHUT % 10 + 0X30; 
0386:  MOVFF  2C,37
038A:  MOVLW  0A
038C:  MOVWF  38
038E:  RCALL  0314
0390:  MOVLW  30
0392:  ADDWF  00,W
0394:  MOVWF  32
....................    CH_PHUT = PHUT / 10 % 10 + 0X30; 
0396:  MOVFF  2C,37
039A:  MOVLW  0A
039C:  MOVWF  38
039E:  RCALL  0314
03A0:  MOVFF  01,37
03A4:  MOVLW  0A
03A6:  MOVWF  38
03A8:  RCALL  0314
03AA:  MOVLW  30
03AC:  ADDWF  00,W
03AE:  MOVWF  33
....................     
....................    DV_GIO = GIO % 10 + 0X30; 
03B0:  MOVFF  2D,37
03B4:  MOVLW  0A
03B6:  MOVWF  38
03B8:  RCALL  0314
03BA:  MOVLW  30
03BC:  ADDWF  00,W
03BE:  MOVWF  30
....................    CH_GIO = GIO / 10 % 10 + 0X30; 
03C0:  MOVFF  2D,37
03C4:  MOVLW  0A
03C6:  MOVWF  38
03C8:  RCALL  0314
03CA:  MOVFF  01,37
03CE:  MOVLW  0A
03D0:  MOVWF  38
03D2:  RCALL  0314
03D4:  MOVLW  30
03D6:  ADDWF  00,W
03D8:  MOVWF  31
03DA:  RETURN 0
.................... } 
....................  
.................... VOID HT_LCD  () 
.................... { 
....................    LCD_GOTO_XY (0, 12) ; 
03DC:  CLRF   36
03DE:  MOVLW  0C
03E0:  MOVWF  37
03E2:  RCALL  0298
....................     
....................    LCD_DATA (CH_GIO); 
03E4:  MOVFF  31,38
03E8:  RCALL  02B2
....................    LCD_DATA (DV_GIO); 
03EA:  MOVFF  30,38
03EE:  RCALL  02B2
....................    lcd_data (' '); 
03F0:  MOVLW  20
03F2:  MOVWF  38
03F4:  RCALL  02B2
....................     
....................    LCD_DATA (CH_PHUT); 
03F6:  MOVFF  33,38
03FA:  RCALL  02B2
....................    LCD_DATA (DV_PHUT); 
03FC:  MOVFF  32,38
0400:  RCALL  02B2
....................    lcd_data (' '); 
0402:  MOVLW  20
0404:  MOVWF  38
0406:  RCALL  02B2
....................     
....................    LCD_DATA (CH_GIAY); 
0408:  MOVFF  35,38
040C:  RCALL  02B2
....................    LCD_DATA (DV_GIAY); 
040E:  MOVFF  34,38
0412:  RCALL  02B2
0414:  GOTO   05D0 (RETURN)
.................... } 
....................  
....................  
....................  
.................... VOID tat_2led_chinh_LCD  () 
.................... { 
....................    IF (gia_tri_mod == 1){CH_GIO = ' '; DV_GIO = ' '; } 
*
02EA:  DECFSZ 2E,W
02EC:  BRA    02F6
02EE:  MOVLW  20
02F0:  MOVWF  31
02F2:  MOVWF  30
02F4:  BRA    0310
....................    else IF (gia_tri_mod == 2){CH_PHUT = ' '; DV_PHUT = ' '; } 
02F6:  MOVF   2E,W
02F8:  SUBLW  02
02FA:  BNZ   0304
02FC:  MOVLW  20
02FE:  MOVWF  33
0300:  MOVWF  32
0302:  BRA    0310
....................    else IF (gia_tri_mod == 3){CH_GIAY = ' '; DV_GIAY = ' '; } 
0304:  MOVF   2E,W
0306:  SUBLW  03
0308:  BNZ   0310
030A:  MOVLW  20
030C:  MOVWF  35
030E:  MOVWF  34
0310:  GOTO   05C0 (RETURN)
.................... } 
....................  
....................  
.................... VOID phim_mod () 
.................... { 
....................    IF (!input (BT1)) 
*
043C:  BSF    F93.4
043E:  BTFSC  F81.4
0440:  BRA    0488
....................    { 
....................       delay_ms (20); 
0442:  MOVLW  14
0444:  MOVWF  36
0446:  RCALL  022A
....................       IF (!input (BT1)) 
0448:  BSF    F93.4
044A:  BTFSC  F81.4
044C:  BRA    0488
....................       { 
....................          gia_tri_mod++; 
044E:  INCF   2E,F
....................          IF (gia_tri_mod >= 4) gia_tri_mod = 0; 
0450:  BTFSC  2E.7
0452:  BRA    045C
0454:  MOVF   2E,W
0456:  SUBLW  03
0458:  BC    045C
045A:  CLRF   2E
....................           
....................          xuat_4led_7doan_4so (0xff, 0xff, 0xff, ma7doan[gia_tri_mod % 10]); 
045C:  MOVFF  2E,37
0460:  MOVLW  0A
0462:  MOVWF  38
0464:  RCALL  0314
0466:  CLRF   03
0468:  MOVF   00,W
046A:  MOVFF  FF2,36
046E:  BCF    FF2.7
0470:  RCALL  0096
0472:  BTFSC  36.7
0474:  BSF    FF2.7
0476:  MOVWF  36
0478:  SETF   37
047A:  SETF   38
047C:  SETF   39
047E:  MOVWF  3A
0480:  BRA    0418
....................          WHILE (!input (BT1)) ; 
0482:  BSF    F93.4
0484:  BTFSS  F81.4
0486:  BRA    0482
....................       } 
....................    } 
0488:  GOTO   05D2 (RETURN)
.................... } 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... VOID phim_dw () 
.................... { 
....................    IF (!input (BT0)) 
*
04E2:  BSF    F93.5
04E4:  BTFSC  F81.5
04E6:  BRA    0534
....................    { 
....................       delay_ms (20); 
04E8:  MOVLW  14
04EA:  MOVWF  36
04EC:  RCALL  022A
....................       IF (!input (BT0)) 
04EE:  BSF    F93.5
04F0:  BTFSC  F81.5
04F2:  BRA    0534
....................       { 
....................           
....................          SWITCH (gia_tri_mod) 
04F4:  MOVF   2E,W
04F6:  XORLW  01
04F8:  BZ    0504
04FA:  XORLW  03
04FC:  BZ    0512
04FE:  XORLW  01
0500:  BZ    0520
0502:  BRA    052E
....................          { 
....................             case 1: IF (gio == 0) gio = 23; 
0504:  MOVF   2D,F
0506:  BNZ   050E
0508:  MOVLW  17
050A:  MOVWF  2D
050C:  BRA    0510
....................             ELSE gio--; 
050E:  DECF   2D,F
....................             BREAK; 
0510:  BRA    052E
....................              
....................             case 2: IF (phut == 0) phut = 59; 
0512:  MOVF   2C,F
0514:  BNZ   051C
0516:  MOVLW  3B
0518:  MOVWF  2C
051A:  BRA    051E
....................             ELSE phut--; 
051C:  DECF   2C,F
....................             BREAK; 
051E:  BRA    052E
....................              
....................             case 3: IF (giay == 0) giay = 59; 
0520:  MOVF   2B,F
0522:  BNZ   052A
0524:  MOVLW  3B
0526:  MOVWF  2B
0528:  BRA    052C
....................             ELSE giay--; 
052A:  DECF   2B,F
....................             BREAK; 
052C:  BRA    052E
....................              
....................             DEFAULT: break; 
....................          } 
....................  
....................           
....................          WHILE (!input (BT0)) ; 
052E:  BSF    F93.5
0530:  BTFSS  F81.5
0532:  BRA    052E
....................       } 
....................    } 
0534:  GOTO   05D6 (RETURN)
.................... } 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... VOID phim_up () 
.................... { 
....................    IF (!input (BT2)) 
*
048C:  BSF    F93.3
048E:  BTFSC  F81.3
0490:  BRA    04DE
....................    { 
....................       delay_ms (20); 
0492:  MOVLW  14
0494:  MOVWF  36
0496:  RCALL  022A
....................       IF (!input (BT2)) 
0498:  BSF    F93.3
049A:  BTFSC  F81.3
049C:  BRA    04DE
....................       { 
....................          SWITCH (gia_tri_mod) 
049E:  MOVF   2E,W
04A0:  XORLW  01
04A2:  BZ    04AE
04A4:  XORLW  03
04A6:  BZ    04BC
04A8:  XORLW  01
04AA:  BZ    04CA
04AC:  BRA    04D8
....................          { 
....................             case 1: IF (gio == 23) gio = 0; 
04AE:  MOVF   2D,W
04B0:  SUBLW  17
04B2:  BNZ   04B8
04B4:  CLRF   2D
04B6:  BRA    04BA
....................             ELSE gio++; 
04B8:  INCF   2D,F
....................             BREAK; 
04BA:  BRA    04D8
....................              
....................              
....................             case 2: IF (phut == 59) phut = 0; 
04BC:  MOVF   2C,W
04BE:  SUBLW  3B
04C0:  BNZ   04C6
04C2:  CLRF   2C
04C4:  BRA    04C8
....................             ELSE phut++; 
04C6:  INCF   2C,F
....................             BREAK; 
04C8:  BRA    04D8
....................              
....................             case 3: IF (giay == 59) giay = 0; 
04CA:  MOVF   2B,W
04CC:  SUBLW  3B
04CE:  BNZ   04D4
04D0:  CLRF   2B
04D2:  BRA    04D6
....................             ELSE giay++; 
04D4:  INCF   2B,F
....................             BREAK; 
04D6:  BRA    04D8
....................              
....................             DEFAULT: break; 
....................          } 
....................  
....................          WHILE (!input (BT2)) ; 
04D8:  BSF    F93.3
04DA:  BTFSS  F81.3
04DC:  BRA    04D8
....................       } 
....................    } 
04DE:  GOTO   05D4 (RETURN)
.................... } 
....................  
.................... VOID lcd_hienthi_dongho () 
.................... { 
....................    lcd_GOTO_xy (0, 12); 
....................    delay_us (20); 
....................    lcd_data (gio / 10 + 0x30) ; 
....................    lcd_data (gio % 10 + 0x30) ; 
....................    lcd_data (' '); 
....................    lcd_data (phut / 10 + 0x30) ; 
....................    lcd_data (phut % 10 + 0x30) ; 
....................    lcd_GOTO_xy (0, 18); 
....................    delay_us (20); 
....................    lcd_data (giay / 10 + 0x30) ; 
....................    lcd_data (giay % 10 + 0x30) ; 
.................... } 
....................  
.................... VOID main () 
*
0538:  CLRF   FF8
053A:  BCF    FD0.7
053C:  BSF    07.7
053E:  BSF    FB8.3
0540:  MOVLW  08
0542:  MOVWF  FAF
0544:  MOVLW  02
0546:  MOVWF  FB0
0548:  MOVLW  A6
054A:  MOVWF  FAC
054C:  MOVLW  90
054E:  MOVWF  FAB
0550:  CLRF   16
0552:  CLRF   1D
0554:  CLRF   1E
0556:  CLRF   1F
0558:  CLRF   20
055A:  CLRF   29
055C:  MOVF   FC1,W
055E:  ANDLW  C0
0560:  IORLW  0F
0562:  MOVWF  FC1
0564:  MOVLW  07
0566:  MOVWF  FB4
0568:  SETF   21
056A:  SETF   22
056C:  SETF   23
056E:  SETF   24
0570:  SETF   25
0572:  SETF   26
0574:  SETF   27
0576:  SETF   28
.................... { 
....................    set_up_port_ic_chot (); 
0578:  BRA    018C
....................    setup_lcd (); 
057A:  BRA    0250
....................    lcd_GOTO_xy (0, 0) ; 
057C:  CLRF   36
057E:  CLRF   37
0580:  RCALL  0298
....................    lcd_data ("dong ho:"); 
0582:  MOVLW  EE
0584:  MOVWF  FF6
0586:  MOVLW  00
0588:  MOVWF  FF7
058A:  BRA    02C8
....................     
....................    setup_timer_1 (t1_internal|t1_div_by_8); 
058C:  MOVLW  B5
058E:  MOVWF  FCD
....................    set_timer1 (3036); 
0590:  MOVLW  0B
0592:  MOVWF  FCF
0594:  MOVLW  DC
0596:  MOVWF  FCE
....................    enable_interrupts (global); 
0598:  MOVLW  C0
059A:  IORWF  FF2,F
....................    enable_interrupts (INT_timer1); 
059C:  BSF    F9D.0
....................    giay = 0; 
059E:  CLRF   2B
....................    phut = 0; 
05A0:  CLRF   2C
....................    gio = 0; 
05A2:  CLRF   2D
....................    gia_tri_mod = 0; 
05A4:  CLRF   2E
....................     
....................     
....................    WHILE (true) 
....................    { 
....................       // ! lcd_hienthi_dongho (); 
....................       // ! delay_ms (100); 
....................       // ! giay++; 
....................       delay_ms (50); 
05A6:  MOVLW  32
05A8:  MOVWF  36
05AA:  RCALL  022A
....................       IF (bdn < 10) 
05AC:  BTFSC  2F.7
05AE:  BRA    05B6
05B0:  MOVF   2F,W
05B2:  SUBLW  09
05B4:  BNC   05D8
....................       { 
....................          IF (gia_tri_mod != 0) 
05B6:  MOVF   2E,F
05B8:  BZ    05CC
....................          { 
....................             IF (bdn == 0) 
05BA:  MOVF   2F,F
05BC:  BNZ   05C2
....................             { 
....................                tat_2led_chinh_LCD (); 
05BE:  BRA    02EA
....................             } 
05C0:  BRA    05CA
....................  
....................             else IF (bdn == 5) 
05C2:  MOVF   2F,W
05C4:  SUBLW  05
05C6:  BNZ   05CA
....................             { 
....................                 
....................                GM_LCD (); 
05C8:  RCALL  035C
....................             } 
....................          } 
05CA:  BRA    05CE
....................  
....................          ELSE 
....................          GM_LCD (); 
05CC:  RCALL  035C
....................           
....................           
....................          HT_LCD (); 
05CE:  BRA    03DC
....................           
....................          phim_mod (); 
05D0:  BRA    043C
....................          phim_up (); 
05D2:  BRA    048C
....................          phim_dw (); 
05D4:  BRA    04E2
....................       } 
05D6:  BRA    05FA
....................  
....................       ELSE 
....................       { 
....................          bdn = bdn - 10; 
05D8:  MOVLW  0A
05DA:  SUBWF  2F,F
....................          giay++; 
05DC:  INCF   2B,F
....................          IF (giay == 60) 
05DE:  MOVF   2B,W
05E0:  SUBLW  3C
05E2:  BNZ   05FA
....................          { 
....................             giay = 0; 
05E4:  CLRF   2B
....................             phut++; 
05E6:  INCF   2C,F
....................             IF (phut == 60) 
05E8:  MOVF   2C,W
05EA:  SUBLW  3C
05EC:  BNZ   05FA
....................             { 
....................                phut = 0; 
05EE:  CLRF   2C
....................                gio++; 
05F0:  INCF   2D,F
....................                IF (gio == 24) gio = 0; 
05F2:  MOVF   2D,W
05F4:  SUBLW  18
05F6:  BNZ   05FA
05F8:  CLRF   2D
....................             } 
....................          } 
....................  
....................           
....................          //GM_LCD (); 
....................       } 
05FA:  BRA    05A6
....................    } 
.................... } 
....................  
05FC:  SLEEP 
....................  

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
