CCS PCH C Compiler, Version 5.015, 5967               01-Nov-22 11:03

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\19161306_GK_TTVXL_S3_a.lst

               ROM used:   1014 bytes (3%)
                           Largest free fragment is 31750
               RAM used:   63 (3%) at main() level
                           73 (4%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   035C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00C0
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //!3 nut ma tran 
.................... //!   14 ~State 
.................... //!      = 0 Counter - Led 7; Timer - LCD, LCD lon 
.................... //!      = 1 Counter - LCD, LCD lon; Timer - Led 7 
.................... //!   6  ~UD_Counter 
.................... //!      = 0, dem len 7 - 16 
.................... //!      = 1, dem xuong 16 - 7 
.................... //!   10 ~UD_Timer 
.................... //!      = 0, dem len 4 - 35 
.................... //!      = 1, dem xuong 35 - 4 
.................... //!giay >20 dich led trong ra ngoai       
.................... #include <tv_pickit2_shift_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA C0,F9
00B2:  DATA A4,B0
00B4:  DATA 99,92
00B6:  DATA 82,F8
00B8:  DATA 80,90
00BA:  DATA 88,83
00BC:  DATA C6,A1
00BE:  DATA 86,8E
*
0274:  CLRF   01
0276:  CLRF   02
0278:  CLRF   00
027A:  CLRF   03
027C:  MOVF   44,W
027E:  BNZ   0284
0280:  MOVF   43,W
0282:  BZ    02B4
0284:  MOVLW  10
0286:  MOVWF  45
0288:  BCF    FD8.0
028A:  RLCF   41,F
028C:  RLCF   42,F
028E:  RLCF   00,F
0290:  RLCF   03,F
0292:  MOVF   44,W
0294:  SUBWF  03,W
0296:  BNZ   029C
0298:  MOVF   43,W
029A:  SUBWF  00,W
029C:  BNC   02AC
029E:  MOVF   43,W
02A0:  SUBWF  00,F
02A2:  BTFSS  FD8.0
02A4:  DECF   03,F
02A6:  MOVF   44,W
02A8:  SUBWF  03,F
02AA:  BSF    FD8.0
02AC:  RLCF   01,F
02AE:  RLCF   02,F
02B0:  DECFSZ 45,F
02B2:  BRA    0288
02B4:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
0204:  CLRF   FEA
0206:  MOVLW  3F
0208:  MOVWF  FE9
020A:  MOVF   FEF,W
020C:  BZ    0228
020E:  MOVLW  06
0210:  MOVWF  01
0212:  CLRF   00
0214:  DECFSZ 00,F
0216:  BRA    0214
0218:  DECFSZ 01,F
021A:  BRA    0212
021C:  MOVLW  7B
021E:  MOVWF  00
0220:  DECFSZ 00,F
0222:  BRA    0220
0224:  DECFSZ FEF,F
0226:  BRA    020E
0228:  GOTO   0260 (RETURN)
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
00D0:  CLRF   48
00D2:  MOVF   48,W
00D4:  SUBLW  07
00D6:  BNC   00F4
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
00D8:  BTFSC  47.7
00DA:  BRA    00E0
00DC:  BCF    F8D.2
00DE:  BRA    00E2
00E0:  BSF    F8D.2
00E2:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
00E4:  BCF    F96.0
00E6:  BCF    F8D.0
00E8:  BCF    F96.0
00EA:  BSF    F8D.0
....................          X= X<<1;          
00EC:  BCF    FD8.0
00EE:  RLCF   47,F
00F0:  INCF   48,F
00F2:  BRA    00D2
....................      } 
00F4:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
....................       XUAT_1BYTE(BLD2); 
....................       XUAT_1BYTE(BLD1);           
....................       XUAT_1BYTE(BLD0);             
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
....................       OUTPUT_LOW(RCK_32LED); 
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
....................      B1 = WLD0>>8;  B0 = WLD0; 
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
00F6:  MOVFF  40,41
00FA:  MOVFF  3F,42
....................    xuat_1byte(b1);     
00FE:  MOVFF  41,47
0102:  RCALL  00D0
....................    xuat_1byte(b0); 
0104:  MOVFF  42,47
0108:  RCALL  00D0
010A:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
010C:  CLRF   40
010E:  CLRF   3F
0110:  RCALL  00F6
....................    xuat_1word(0);  
0112:  CLRF   40
0114:  CLRF   3F
0116:  RCALL  00F6
....................    xuat_1word(0);                              
0118:  CLRF   40
011A:  CLRF   3F
011C:  RCALL  00F6
....................    xuat_1word(0);                                     
011E:  CLRF   40
0120:  CLRF   3F
0122:  RCALL  00F6
....................     
....................    output_high(rck_buzerelay);    
0124:  BCF    F95.3
0126:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
0128:  BCF    F95.3
012A:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
012C:  BCF    F95.4
012E:  BSF    F8C.4
....................    output_low(rck_32led);  
0130:  BCF    F95.4
0132:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
0134:  BCF    F95.5
0136:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
0138:  BCF    F95.5
013A:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
013C:  BCF    F95.7
013E:  BSF    F8C.7
....................    output_low(rck_matranled);    
0140:  BCF    F95.7
0142:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
0144:  BCF    F95.2
0146:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
0148:  BCF    F95.2
014A:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
014C:  SETF   40
014E:  SETF   3F
0150:  RCALL  00F6
....................    xuat_1word(0xffff);  
0152:  SETF   40
0154:  SETF   3F
0156:  RCALL  00F6
....................    output_high(rck_4led7doan);        
0158:  BCF    F95.6
015A:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
015C:  BCF    F95.6
015E:  BCF    F8C.6
0160:  GOTO   017C (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
0164:  MOVLW  FF
0166:  MOVWF  F92
0168:  MOVLW  3C
016A:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
016C:  MOVLW  F1
016E:  MOVWF  F94
0170:  MOVLW  00
0172:  MOVWF  F96
....................    set_tris_d(0x00);     
0174:  MOVWF  F95
....................    output_d(0x00);  
0176:  CLRF   F95
0178:  CLRF   F8C
....................    xoa_tat_6module(); 
017A:  BRA    010C
....................    port_b_pullups(0xff);           
017C:  BCF    FF1.7
....................    rbdc=0;                
017E:  CLRF   18
0180:  CLRF   17
....................              
....................    setup_adc(adc_clock_div_32);         
0182:  MOVF   FC0,W
0184:  ANDLW  C0
0186:  IORLW  02
0188:  MOVWF  FC0
018A:  BSF    FC0.7
018C:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
018E:  MOVF   FC1,W
0190:  ANDLW  C0
0192:  IORLW  0C
0194:  MOVWF  FC1
....................    output_low(g_all);         
0196:  BCF    F95.0
0198:  BCF    F8C.0
019A:  GOTO   03AE (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
*
02B6:  MOVFF  46,47
02BA:  RCALL  00D0
02BC:  MOVFF  45,47
02C0:  RCALL  00D0
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
02C2:  MOVFF  44,47
02C6:  RCALL  00D0
02C8:  MOVFF  43,47
02CC:  RCALL  00D0
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
02CE:  BCF    F95.6
02D0:  BCF    F8C.6
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
02D2:  BCF    F95.6
02D4:  BSF    F8C.6
02D6:  GOTO   0358 (RETURN)
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
....................       TRAM4  = MA7DOAN[TAM/100%10];  
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
....................       IF (NGAN4==0XC0) 
....................       { 
....................          NGAN4=0XFF; 
....................          IF (TRAM4==0XC0) 
....................          { 
....................             TRAM4=0XFF; 
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
*
019E:  MOVFF  20,47
01A2:  RCALL  00D0
....................     XUAT_1BYTE(GLCDDATA); 
01A4:  MOVFF  1F,47
01A8:  RCALL  00D0
....................     XUAT_1BYTE(LCDCONTROL);        
01AA:  MOVFF  1E,47
01AE:  RCALL  00D0
....................     XUAT_1BYTE(LCDDATA);       
01B0:  MOVFF  1D,47
01B4:  RCALL  00D0
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
01B6:  BCF    F95.2
01B8:  BSF    F8C.2
....................     OUTPUT_LOW(RCK_LCD20X4); 
01BA:  BCF    F95.2
01BC:  BCF    F8C.2
01BE:  GOTO   01D0 (RETURN)
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
01C2:  MOVF   41,W
01C4:  MOVWF  1E
01C6:  COMF   1E,F
....................     LCDDATA    = ~LCD_INS_HTHI;       
01C8:  MOVFF  42,1D
01CC:  COMF   1D,F
....................     XUAT_GLCD_LCD(); 
01CE:  BRA    019E
01D0:  RETURN 0
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... //!#include <tv_pickit2_shift_1_proteus.c> 
.................... #include <tv_pickit2_shift_lcd.c> 
.................... UNSIGNED INT8 LCD_CONTROL;   
.................... #bit LCD_P = LCD_CONTROL.3 
.................... #bit LCD_RS = LCD_CONTROL.2 
.................... #bit LCD_RW = LCD_CONTROL.1 
.................... #bit LCD_E  = LCD_CONTROL.0 
....................  
.................... #DEFINE LCD_FUNCTION_SET       0X38 
.................... #DEFINE LCD_DISPLAY_CONTROL    0X0C 
.................... #DEFINE LCD_CLEAR_DISPLAY        0X01 
.................... #DEFINE LCD_ENTRY_MODE         0X06 
.................... #DEFINE LCD_SHIFT_LEFT         0X18 
.................... #DEFINE LCD_SHIFT_RIGHT        0X1C 
....................  
.................... #DEFINE LCD_ADDR_LINE1         0X80 
.................... #DEFINE LCD_ADDR_LINE2         0XC0 
.................... #DEFINE LCD_ADDR_LINE3         0X94 
.................... #DEFINE LCD_ADDR_LINE4         0XD4 
....................  
.................... VOID LCD_XUAT_8BIT(INT8 LCD_DATA_X) 
.................... { 
....................       LCD_E=1; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);      
01D2:  BSF    2A.0
01D4:  MOVFF  2A,41
01D8:  MOVFF  40,42
01DC:  RCALL  01C2
....................       LCD_E=0; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);  
01DE:  BCF    2A.0
01E0:  MOVFF  2A,41
01E4:  MOVFF  40,42
01E8:  RCALL  01C2
01EA:  GOTO   01F6 (RETURN)
.................... } 
.................... void LCD_COMMAND(INT8 LCD_DATA_X)    
....................   { 
....................       LCD_RS = 0; 
01EE:  BCF    2A.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
01F0:  MOVFF  3F,40
01F4:  BRA    01D2
....................       DELAY_US(20); 
01F6:  MOVLW  20
01F8:  MOVWF  00
01FA:  DECFSZ 00,F
01FC:  BRA    01FA
01FE:  BRA    0200
0200:  NOP   
0202:  RETURN 0
....................   } 
.................... void LCD_DATA(INT8 LCD_DATA_X)        
....................   { 
....................       LCD_RS = 1;      
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
....................       DELAY_US(20); 
....................   } 
....................    
.................... VOID SETUP_LCD () 
.................... {                      
....................          LCD_E  = 0;  
*
022C:  BCF    2A.0
....................          LCD_RW = 0;  
022E:  BCF    2A.1
....................          LCD_RS = 1;  
0230:  BSF    2A.2
....................          LCD_P =0; 
0232:  BCF    2A.3
....................          LCD_COMMAND(LCD_FUNCTION_SET);          
0234:  MOVLW  38
0236:  MOVWF  3F
0238:  RCALL  01EE
....................          DELAY_US(40); 
023A:  MOVLW  42
023C:  MOVWF  00
023E:  DECFSZ 00,F
0240:  BRA    023E
0242:  NOP   
....................          LCD_COMMAND(LCD_DISPLAY_CONTROL);    
0244:  MOVLW  0C
0246:  MOVWF  3F
0248:  RCALL  01EE
....................          DELAY_US(40); 
024A:  MOVLW  42
024C:  MOVWF  00
024E:  DECFSZ 00,F
0250:  BRA    024E
0252:  NOP   
....................          LCD_COMMAND(LCD_CLEAR_DISPLAY);       
0254:  MOVLW  01
0256:  MOVWF  3F
0258:  RCALL  01EE
....................          DELAY_MS(2); 
025A:  MOVLW  02
025C:  MOVWF  3F
025E:  BRA    0204
....................          LCD_COMMAND(LCD_ENTRY_MODE);        
0260:  MOVLW  06
0262:  MOVWF  3F
0264:  RCALL  01EE
....................          DELAY_US(40);                 
0266:  MOVLW  42
0268:  MOVWF  00
026A:  DECFSZ 00,F
026C:  BRA    026A
026E:  NOP   
0270:  GOTO   03B0 (RETURN)
.................... } 
....................  
.................... CONST UNSIGNED CHAR LCD_SO_X[11][6] ={ 
....................                   0,1,2,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // SO 9 
....................                    
.................... CONST UNSIGNED CHAR LCD_SO_XX[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4};             // SO 9          
.................... //!CONST UNSIGNED CHAR LCD_SO_X[10][6] = 
.................... //!{ 
.................... //!                  0,1,2,3,4,5,               // SO 0 
.................... //!                  1,2,32,3,7,3,              // SO 1 
.................... //!                  6,6,2,4,3,3,               // SO 2 
.................... //!                  6,6,2,3,3,5,               // SO 3 
.................... //!                  7,3,7,32,32,7,             // SO 4 
.................... //!                  7,6,6,3,3,5,               // SO 5 
.................... //!                  0,6,6,4,3,5,               // SO 6 
.................... //!                  1,1,7,32,32,7,             // SO 7 
.................... //!                  0,6,2,4,3,5,               // SO 8 
.................... //!                  0,6,2,3,3,5};             // SO 9    
....................                    
.................... CONST UNSIGNED CHAR LCD_MA_8DOAN[] = { 
....................    0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN F - 0 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  //DOAN A - 1 
....................    0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN B - 2 
....................    0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  //DOAN D - 3 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  //DOAN C - 4 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07,  //DOAN E - 5 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  //DOAN G+D-6  
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; //DOAN I  -7 
....................     
.................... VOID LCD_GOTO_XY(SIGNED INT8 X, SIGNED INT8 Y) 
.................... {  
....................    CONST UNSIGNED INT8 LCD_VITRI[]={0x80,0xC0,0x94,0xD4}; 
....................    LCD_COMMAND(LCD_VITRI[X]+Y); 
.................... } 
....................  
.................... VOID XXX() 
.................... {  
....................    SIGNED INT8 X; 
....................    X= LCD_SO_X[0][0]; 
....................    X= LCD_MA_8DOAN[0]; 
.................... } 
....................  
.................... #include<tv_pickit2_shift_key4x4_138.c> 
.................... CONST UNSIGNED CHAR MAQUETKEY[4]= {0x3F,0x7F,0xBF,0xFF}; 
.................... UNSIGNED INT8  MPT1=0,MPT2=0;   
.................... UNSIGNED INT KEY_NHAN() 
.................... {     SIGNED INT8 MAPHIM,HANG,COT; 
....................       MAPHIM=HANG=0XFF; 
....................       FOR(COT=0;COT<4;COT++) 
....................             {    
....................                OUTPUT_B(MAQUETKEY[COT]); 
....................                IF         (!INPUT(PIN_B2))      {HANG=3;   BREAK;} 
....................                ELSE    IF (!INPUT(PIN_B3))      {HANG=2;   BREAK;} 
....................                ELSE    IF (!INPUT(PIN_B4))      {HANG=1;   BREAK;} 
....................                ELSE    IF (!INPUT(PIN_B5))      {HANG=0;   BREAK;} 
....................                DELAY_MS(30); //THEM VAO DE XU LY LOI QUA TAI CPU 
....................             }           
....................          IF (HANG!=0XFF)   MAPHIM   = COT*4 + HANG; 
....................          RETURN(MAPHIM); 
.................... } 
....................  
.................... UNSIGNED INT KEY_4X4_DW() 
.................... {      
....................       MPT1=KEY_NHAN();        
....................       IF (MPT1!=0XFF)    
....................       {  DELAY_MS(1);   
....................          MPT1=KEY_NHAN(); 
....................          DO{MPT2=KEY_NHAN(); DELAY_MS(30);} 
....................          WHILE (MPT2==MPT1); 
....................       }              
....................       RETURN(MPT1); 
.................... } 
....................  
.................... UNSIGNED INT KEY_4X4_UP() 
.................... {             
....................       MPT1=KEY_NHAN(); 
....................       IF (MPT1!=0XFF)    
....................       {   
....................          IF (MPT1!=MPT2) 
....................             { 
....................                RETURN(MPT1);  //PHIM MOI 
....................                MPT2=MPT1; 
....................             } 
....................          ELSE 
....................          { 
....................             DELAY_MS(1); 
....................             MPT1=KEY_NHAN(); 
....................             DO 
....................             { 
....................                MPT2=KEY_NHAN(); 
....................                } 
....................             WHILE (MPT2!=MPT1); 
....................                RETURN(MPT1);     //THOAT VI TRUNG MA PHIM DA NHAN 
....................                MPT2=MPT1;            
....................          } 
....................       }   
....................       ELSE  
....................       { 
....................          RETURN(MPT1);  //THOAT VI KHONG NHAN 
....................          MPT2=MPT1; 
....................       }       
.................... } 
....................  
....................  
....................  
....................  
.................... signed INT8 giay,bdn,i,CH_GIAY,DV_GIAY,LCH,LDV, chuc, donvi,t0; 
.................... unsigned INT8 zt=0, zp=0,k=0; 
.................... unsigned INT1 State=0; 
.................... unsigned INT1 UD_Timer=0, UD_Counter=0; 
.................... SIGNED INT32 mp; 
....................  
.................... #INT_timer1 
....................  
.................... void interrupt_timer1() 
.................... { 
....................    bdn++; 
*
00C0:  INCF   2E,F
....................    set_timer1 (3036) ; 
00C2:  MOVLW  0B
00C4:  MOVWF  FCF
00C6:  MOVLW  DC
00C8:  MOVWF  FCE
00CA:  BCF    F9E.0
00CC:  GOTO   0054
.................... } 
....................  
.................... VOID GIAIMA_LCD() 
.................... { 
....................    DV_GIAY = giay % 10 + 0X30; 
....................    CH_GIAY = giay / 10 + 0X30; 
....................    IF (CH_GIAY == 0x30) CH_GIAY = 0x20; 
.................... } 
....................  
.................... VOID GIAIMA_LCD(UNSIGNED int8 GT) 
.................... { 
....................    DV_GIAY = GT % 10 + 0X30; 
....................    CH_GIAY = GT / 10 + 0X30; 
....................    IF (CH_GIAY == 0x30) CH_GIAY = 0x20; // so 0 thi doi thanh khoang trong, xoa so 0 vo nghia 
.................... } 
....................  
.................... VOID GIAIMA_LCD_LON(UNSIGNED int8 GTL) 
.................... { 
....................    LDV = GTL % 10; 
....................    LCH = GTL / 10; 
....................    IF (LCH == 0) LCH = 10; 
.................... } 
....................  
.................... void lcd_hienthi_so_z_toado_xy(SIGNED int8 lcd_so, x1, y1) 
.................... { 
....................    lcd_GOTO_xy (x1, y1) ; 
....................    FOR (i = 0; i < 6; i++) 
....................    { 
....................       IF (i == 3) lcd_goto_xy (x1 + 1, y1); 
....................       lcd_data (lcd_so_x[lcd_so][i]) ; 
....................    } 
.................... } 
....................  
.................... void giai_ma_hien_thi(UNSIGNED int16 tam) 
.................... { 
....................    donvi = ma7doan[tam % 10]; 
*
02DA:  MOVFF  40,42
02DE:  MOVFF  3F,41
02E2:  CLRF   44
02E4:  MOVLW  0A
02E6:  MOVWF  43
02E8:  RCALL  0274
02EA:  MOVFF  00,41
02EE:  MOVFF  03,42
02F2:  MOVFF  03,03
02F6:  MOVF   00,W
02F8:  MOVFF  FF2,43
02FC:  BCF    FF2.7
02FE:  RCALL  0096
0300:  BTFSC  43.7
0302:  BSF    FF2.7
0304:  MOVWF  35
....................    chuc = ma7doan[tam / 10]; 
0306:  MOVFF  40,42
030A:  MOVFF  3F,41
030E:  CLRF   44
0310:  MOVLW  0A
0312:  MOVWF  43
0314:  RCALL  0274
0316:  MOVFF  02,42
031A:  MOVFF  01,41
031E:  MOVFF  02,03
0322:  MOVF   01,W
0324:  MOVFF  FF2,43
0328:  BCF    FF2.7
032A:  RCALL  0096
032C:  BTFSC  43.7
032E:  BSF    FF2.7
0330:  MOVWF  34
....................    IF (chuc == 0xc0) chuc = 0xff; //xoa so 0 vo nghia 
0332:  MOVF   34,W
0334:  SUBLW  C0
0336:  BNZ   033A
0338:  SETF   34
....................    xuat_4led_7doan_4so (donvi&0x7f, 0xF7, 0xb7, chuc&0x7f) ; 
033A:  MOVF   35,W
033C:  ANDLW  7F
033E:  MOVWF  41
0340:  MOVF   34,W
0342:  ANDLW  7F
0344:  MOVWF  42
0346:  MOVFF  41,43
034A:  MOVLW  F7
034C:  MOVWF  44
034E:  MOVLW  B7
0350:  MOVWF  45
0352:  MOVFF  42,46
0356:  BRA    02B6
0358:  GOTO   03F6 (RETURN)
.................... } 
....................  
....................  
....................  
.................... void main() 
035C:  CLRF   FF8
035E:  BCF    FD0.7
0360:  BSF    07.7
0362:  BSF    FB8.3
0364:  MOVLW  08
0366:  MOVWF  FAF
0368:  MOVLW  02
036A:  MOVWF  FB0
036C:  MOVLW  A6
036E:  MOVWF  FAC
0370:  MOVLW  90
0372:  MOVWF  FAB
0374:  CLRF   16
0376:  CLRF   1D
0378:  CLRF   1E
037A:  CLRF   1F
037C:  CLRF   20
037E:  CLRF   29
0380:  CLRF   2B
0382:  CLRF   2C
0384:  CLRF   37
0386:  CLRF   38
0388:  CLRF   39
038A:  BCF    3A.0
038C:  BCF    3A.1
038E:  BCF    3A.2
0390:  MOVF   FC1,W
0392:  ANDLW  C0
0394:  IORLW  0F
0396:  MOVWF  FC1
0398:  MOVLW  07
039A:  MOVWF  FB4
039C:  SETF   21
039E:  SETF   22
03A0:  SETF   23
03A2:  SETF   24
03A4:  SETF   25
03A6:  SETF   26
03A8:  SETF   27
03AA:  SETF   28
.................... { 
....................    set_up_port_ic_chot () ; 
03AC:  BRA    0164
....................    setup_lcd () ; 
03AE:  BRA    022C
....................    setup_timer_0 (t0_ext_l_to_h|t0_div_1|t0_8_bit) ; 
03B0:  MOVLW  E8
03B2:  MOVWF  FD5
....................    set_timer0 (6) ; 
03B4:  CLRF   FD7
03B6:  MOVLW  06
03B8:  MOVWF  FD6
....................    setup_timer_1 (t1_internal|t1_div_by_8) ; 
03BA:  MOVLW  B5
03BC:  MOVWF  FCD
....................    set_timer1 (3036) ; 
03BE:  MOVLW  0B
03C0:  MOVWF  FCF
03C2:  MOVLW  DC
03C4:  MOVWF  FCE
....................    enable_interrupts (global) ; 
03C6:  MOVLW  C0
03C8:  IORWF  FF2,F
....................    enable_interrupts (INT_timer1) ; 
03CA:  BSF    F9D.0
....................    giay = 8; 
03CC:  MOVLW  08
03CE:  MOVWF  2D
....................    bdn = 0; 
03D0:  CLRF   2E
....................     
....................  
....................  
....................    WHILE (true) 
....................    { 
....................       IF (bdn < 10) 
03D2:  BTFSC  2E.7
03D4:  BRA    03DC
03D6:  MOVF   2E,W
03D8:  SUBLW  09
03DA:  BNC   03DE
....................       { 
.................... //!         HIEN_THI_8LED_7DOAN_QUET (); 
....................       } 
03DC:  BRA    03EE
....................  
....................       ELSE  
....................       { 
....................          bdn = bdn - 10; 
03DE:  MOVLW  0A
03E0:  SUBWF  2E,F
....................          giay++; 
03E2:  INCF   2D,F
....................          IF (giay == 17) giay = 8; 
03E4:  MOVF   2D,W
03E6:  SUBLW  11
03E8:  BNZ   03EE
03EA:  MOVLW  08
03EC:  MOVWF  2D
....................       } 
....................       giai_ma_hien_thi(giay); 
03EE:  CLRF   40
03F0:  MOVFF  2D,3F
03F4:  BRA    02DA
03F6:  BRA    03D2
....................    } 
.................... } 
....................  
03F8:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
