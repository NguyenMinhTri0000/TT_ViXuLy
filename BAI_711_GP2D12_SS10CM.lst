CCS PCH C Compiler, Version 5.015, 5967               15-Nov-22 07:30

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\BAI_711_GP2D12_SS10CM.lst

               ROM used:   1028 bytes (3%)
                           Largest free fragment is 31740
               RAM used:   28 (1%) at main() level
                           37 (2%) worst case
               Stack used: 4 locations
               Stack size: 31

*
0000:  GOTO   02A8
.................... #INCLUDE <TV_PICKIT2_SHIFT_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA C0,F9
0016:  DATA A4,B0
0018:  DATA 99,92
001A:  DATA 82,F8
001C:  DATA 80,90
001E:  DATA 88,83
0020:  DATA C6,A1
0022:  DATA 86,8E
*
011A:  CLRF   01
011C:  CLRF   02
011E:  CLRF   00
0120:  CLRF   03
0122:  MOVF   23,W
0124:  BNZ   012A
0126:  MOVF   22,W
0128:  BZ    015A
012A:  MOVLW  10
012C:  MOVWF  24
012E:  BCF    FD8.0
0130:  RLCF   20,F
0132:  RLCF   21,F
0134:  RLCF   00,F
0136:  RLCF   03,F
0138:  MOVF   23,W
013A:  SUBWF  03,W
013C:  BNZ   0142
013E:  MOVF   22,W
0140:  SUBWF  00,W
0142:  BNC   0152
0144:  MOVF   22,W
0146:  SUBWF  00,F
0148:  BTFSS  FD8.0
014A:  DECF   03,F
014C:  MOVF   23,W
014E:  SUBWF  03,F
0150:  BSF    FD8.0
0152:  RLCF   01,F
0154:  RLCF   02,F
0156:  DECFSZ 24,F
0158:  BRA    012E
015A:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
00F2:  CLRF   FEA
00F4:  MOVLW  1C
00F6:  MOVWF  FE9
00F8:  MOVF   FEF,W
00FA:  BZ    0116
00FC:  MOVLW  06
00FE:  MOVWF  01
0100:  CLRF   00
0102:  DECFSZ 00,F
0104:  BRA    0102
0106:  DECFSZ 01,F
0108:  BRA    0100
010A:  MOVLW  7B
010C:  MOVWF  00
010E:  DECFSZ 00,F
0110:  BRA    010E
0112:  DECFSZ FEF,F
0114:  BRA    00FC
0116:  GOTO   031C (RETURN)
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
0024:  CLRF   23
0026:  MOVF   23,W
0028:  SUBLW  07
002A:  BNC   0048
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
002C:  BTFSC  22.7
002E:  BRA    0034
0030:  BCF    F8D.2
0032:  BRA    0036
0034:  BSF    F8D.2
0036:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
0038:  BCF    F96.0
003A:  BCF    F8D.0
003C:  BCF    F96.0
003E:  BSF    F8D.0
....................          X= X<<1;          
0040:  BCF    FD8.0
0042:  RLCF   22,F
0044:  INCF   23,F
0046:  BRA    0026
....................      } 
0048:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
....................       XUAT_1BYTE(BLD2); 
....................       XUAT_1BYTE(BLD1);           
....................       XUAT_1BYTE(BLD0);             
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
....................       OUTPUT_LOW(RCK_32LED); 
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
....................      B1 = WLD0>>8;  B0 = WLD0; 
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
004A:  MOVFF  1D,1E
004E:  MOVFF  1C,1F
....................    xuat_1byte(b1);     
0052:  MOVFF  1E,22
0056:  RCALL  0024
....................    xuat_1byte(b0); 
0058:  MOVFF  1F,22
005C:  RCALL  0024
005E:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
0060:  CLRF   1D
0062:  CLRF   1C
0064:  RCALL  004A
....................    xuat_1word(0);  
0066:  CLRF   1D
0068:  CLRF   1C
006A:  RCALL  004A
....................    xuat_1word(0);                              
006C:  CLRF   1D
006E:  CLRF   1C
0070:  RCALL  004A
....................    xuat_1word(0);                                     
0072:  CLRF   1D
0074:  CLRF   1C
0076:  RCALL  004A
....................     
....................    output_high(rck_buzerelay);    
0078:  BCF    F95.3
007A:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
007C:  BCF    F95.3
007E:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
0080:  BCF    F95.4
0082:  BSF    F8C.4
....................    output_low(rck_32led);  
0084:  BCF    F95.4
0086:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
0088:  BCF    F95.5
008A:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
008C:  BCF    F95.5
008E:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
0090:  BCF    F95.7
0092:  BSF    F8C.7
....................    output_low(rck_matranled);    
0094:  BCF    F95.7
0096:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
0098:  BCF    F95.2
009A:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
009C:  BCF    F95.2
009E:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
00A0:  SETF   1D
00A2:  SETF   1C
00A4:  RCALL  004A
....................    xuat_1word(0xffff);  
00A6:  SETF   1D
00A8:  SETF   1C
00AA:  RCALL  004A
....................    output_high(rck_4led7doan);        
00AC:  BCF    F95.6
00AE:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
00B0:  BCF    F95.6
00B2:  BCF    F8C.6
00B4:  GOTO   00D0 (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
00B8:  MOVLW  FF
00BA:  MOVWF  F92
00BC:  MOVLW  3C
00BE:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
00C0:  MOVLW  F1
00C2:  MOVWF  F94
00C4:  MOVLW  00
00C6:  MOVWF  F96
....................    set_tris_d(0x00);     
00C8:  MOVWF  F95
....................    output_d(0x00);  
00CA:  CLRF   F95
00CC:  CLRF   F8C
....................    xoa_tat_6module(); 
00CE:  BRA    0060
....................    port_b_pullups(0xff);           
00D0:  BCF    FF1.7
....................    rbdc=0;                
00D2:  CLRF   06
00D4:  CLRF   05
....................              
....................    setup_adc(adc_clock_div_32);         
00D6:  MOVF   FC0,W
00D8:  ANDLW  C0
00DA:  IORLW  02
00DC:  MOVWF  FC0
00DE:  BSF    FC0.7
00E0:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
00E2:  MOVF   FC1,W
00E4:  ANDLW  C0
00E6:  IORLW  0C
00E8:  MOVWF  FC1
....................    output_low(g_all);         
00EA:  BCF    F95.0
00EC:  BCF    F8C.0
00EE:  GOTO   02E8 (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
*
015C:  MOVFF  21,22
0160:  RCALL  0024
0162:  MOVFF  20,22
0166:  RCALL  0024
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
0168:  MOVFF  1F,22
016C:  RCALL  0024
016E:  MOVFF  1E,22
0172:  RCALL  0024
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
0174:  BCF    F95.6
0176:  BCF    F8C.6
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
0178:  BCF    F95.6
017A:  BSF    F8C.6
017C:  GOTO   02A4 (RETURN)
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
0180:  MOVFF  1D,21
0184:  MOVFF  1C,20
0188:  CLRF   23
018A:  MOVLW  0A
018C:  MOVWF  22
018E:  RCALL  011A
0190:  MOVFF  00,1E
0194:  MOVFF  03,1F
0198:  MOVFF  03,03
019C:  MOVF   00,W
019E:  MOVFF  FF2,20
01A2:  BCF    FF2.7
01A4:  RCALL  0004
01A6:  BTFSC  20.7
01A8:  BSF    FF2.7
01AA:  MOVWF  07
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
01AC:  MOVFF  1D,21
01B0:  MOVFF  1C,20
01B4:  CLRF   23
01B6:  MOVLW  0A
01B8:  MOVWF  22
01BA:  RCALL  011A
01BC:  MOVFF  02,1F
01C0:  MOVFF  01,1E
01C4:  MOVFF  02,21
01C8:  MOVFF  01,20
01CC:  CLRF   23
01CE:  MOVLW  0A
01D0:  MOVWF  22
01D2:  RCALL  011A
01D4:  MOVFF  00,1E
01D8:  MOVFF  03,1F
01DC:  MOVFF  03,03
01E0:  MOVF   00,W
01E2:  MOVFF  FF2,20
01E6:  BCF    FF2.7
01E8:  RCALL  0004
01EA:  BTFSC  20.7
01EC:  BSF    FF2.7
01EE:  MOVWF  08
....................       TRAM4  = MA7DOAN[TAM/100%10];  
01F0:  MOVFF  1D,21
01F4:  MOVFF  1C,20
01F8:  CLRF   23
01FA:  MOVLW  64
01FC:  MOVWF  22
01FE:  RCALL  011A
0200:  MOVFF  02,1F
0204:  MOVFF  01,1E
0208:  MOVFF  02,21
020C:  MOVFF  01,20
0210:  CLRF   23
0212:  MOVLW  0A
0214:  MOVWF  22
0216:  RCALL  011A
0218:  MOVFF  00,1E
021C:  MOVFF  03,1F
0220:  MOVFF  03,03
0224:  MOVF   00,W
0226:  MOVFF  FF2,20
022A:  BCF    FF2.7
022C:  RCALL  0004
022E:  BTFSC  20.7
0230:  BSF    FF2.7
0232:  MOVWF  09
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
0234:  MOVFF  1D,21
0238:  MOVFF  1C,20
023C:  MOVLW  03
023E:  MOVWF  23
0240:  MOVLW  E8
0242:  MOVWF  22
0244:  RCALL  011A
0246:  MOVFF  02,1F
024A:  MOVFF  01,1E
024E:  MOVFF  02,21
0252:  MOVFF  01,20
0256:  CLRF   23
0258:  MOVLW  0A
025A:  MOVWF  22
025C:  RCALL  011A
025E:  MOVFF  00,1E
0262:  MOVFF  03,1F
0266:  MOVFF  03,03
026A:  MOVF   00,W
026C:  MOVFF  FF2,20
0270:  BCF    FF2.7
0272:  RCALL  0004
0274:  BTFSC  20.7
0276:  BSF    FF2.7
0278:  MOVWF  0A
....................       IF (NGAN4==0XC0) 
027A:  MOVF   0A,W
027C:  SUBLW  C0
027E:  BNZ   0292
....................       { 
....................          NGAN4=0XFF; 
0280:  SETF   0A
....................          IF (TRAM4==0XC0) 
0282:  MOVF   09,W
0284:  SUBLW  C0
0286:  BNZ   0292
....................          { 
....................             TRAM4=0XFF; 
0288:  SETF   09
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
028A:  MOVF   08,W
028C:  SUBLW  C0
028E:  BNZ   0292
0290:  SETF   08
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
0292:  MOVFF  0A,1E
0296:  MOVFF  09,1F
029A:  MOVFF  08,20
029E:  MOVFF  07,21
02A2:  BRA    015C
02A4:  GOTO   0400 (RETURN)
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
....................     XUAT_1BYTE(GLCDDATA); 
....................     XUAT_1BYTE(LCDCONTROL);        
....................     XUAT_1BYTE(LCDDATA);       
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
....................     OUTPUT_LOW(RCK_LCD20X4); 
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
....................     LCDDATA    = ~LCD_INS_HTHI;       
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... UNSIGNED INT16 KQADC,K_CACH; 
....................  
.................... VOID MAIN() 
02A8:  CLRF   FF8
02AA:  BCF    FD0.7
02AC:  BSF    FB8.3
02AE:  MOVLW  08
02B0:  MOVWF  FAF
02B2:  MOVLW  02
02B4:  MOVWF  FB0
02B6:  MOVLW  A6
02B8:  MOVWF  FAC
02BA:  MOVLW  90
02BC:  MOVWF  FAB
02BE:  CLRF   04
02C0:  CLRF   0B
02C2:  CLRF   0C
02C4:  CLRF   0D
02C6:  CLRF   0E
02C8:  CLRF   17
02CA:  MOVF   FC1,W
02CC:  ANDLW  C0
02CE:  IORLW  0F
02D0:  MOVWF  FC1
02D2:  MOVLW  07
02D4:  MOVWF  FB4
02D6:  SETF   0F
02D8:  SETF   10
02DA:  SETF   11
02DC:  SETF   12
02DE:  SETF   13
02E0:  SETF   14
02E2:  SETF   15
02E4:  SETF   16
.................... { 
....................    SET_UP_PORT_IC_CHOT(); 
02E6:  BRA    00B8
....................    SETUP_ADC(ADC_CLOCK_DIV_32); 
02E8:  MOVF   FC0,W
02EA:  ANDLW  C0
02EC:  IORLW  02
02EE:  MOVWF  FC0
02F0:  BSF    FC0.7
02F2:  BSF    FC2.0
....................    SETUP_ADC_PORTS(AN0_TO_AN2|VSS_VDD); 
02F4:  MOVF   FC1,W
02F6:  ANDLW  C0
02F8:  IORLW  0C
02FA:  MOVWF  FC1
....................    SET_ADC_CHANNEL(2); 
02FC:  MOVLW  08
02FE:  MOVWF  01
0300:  MOVF   FC2,W
0302:  ANDLW  C3
0304:  IORWF  01,W
0306:  MOVWF  FC2
....................    WHILE(TRUE) 
....................    { 
....................       KQADC=READ_ADC(); 
0308:  BSF    FC2.1
030A:  BTFSC  FC2.1
030C:  BRA    030A
030E:  MOVFF  FC3,18
0312:  MOVFF  FC4,19
....................       DELAY_MS(30); 
0316:  MOVLW  1E
0318:  MOVWF  1C
031A:  BRA    00F2
....................       IF (KQADC>=490)                  K_CACH=10; 
031C:  MOVF   19,W
031E:  SUBLW  00
0320:  BC    0332
0322:  XORLW  FF
0324:  BNZ   032C
0326:  MOVF   18,W
0328:  SUBLW  E9
032A:  BC    0332
032C:  CLRF   1B
032E:  MOVLW  0A
0330:  MOVWF  1A
....................       IF ((KQADC<490)&&(KQADC>275))    K_CACH=20; 
0332:  MOVF   19,W
0334:  SUBLW  01
0336:  BNC   0356
0338:  BNZ   0340
033A:  MOVF   18,W
033C:  SUBLW  E9
033E:  BNC   0356
0340:  MOVF   19,W
0342:  SUBLW  00
0344:  BC    0356
0346:  XORLW  FF
0348:  BNZ   0350
034A:  MOVF   18,W
034C:  SUBLW  13
034E:  BC    0356
0350:  CLRF   1B
0352:  MOVLW  14
0354:  MOVWF  1A
....................       IF ((KQADC<=276)&&(KQADC>194))   K_CACH=30; 
0356:  MOVF   19,W
0358:  SUBLW  01
035A:  BNC   0374
035C:  BNZ   0364
035E:  MOVF   18,W
0360:  SUBLW  14
0362:  BNC   0374
0364:  MOVF   19,F
0366:  BNZ   036E
0368:  MOVF   18,W
036A:  SUBLW  C2
036C:  BC    0374
036E:  CLRF   1B
0370:  MOVLW  1E
0372:  MOVWF  1A
....................       IF ((KQADC<=194)&&(KQADC>150))   K_CACH=40; 
0374:  MOVF   19,F
0376:  BNZ   038E
0378:  MOVF   18,W
037A:  SUBLW  C2
037C:  BNC   038E
037E:  MOVF   19,F
0380:  BNZ   0388
0382:  MOVF   18,W
0384:  SUBLW  96
0386:  BC    038E
0388:  CLRF   1B
038A:  MOVLW  28
038C:  MOVWF  1A
....................       IF ((KQADC<=150)&&(KQADC>122))   K_CACH=50; 
038E:  MOVF   19,F
0390:  BNZ   03A8
0392:  MOVF   18,W
0394:  SUBLW  96
0396:  BNC   03A8
0398:  MOVF   19,F
039A:  BNZ   03A2
039C:  MOVF   18,W
039E:  SUBLW  7A
03A0:  BC    03A8
03A2:  CLRF   1B
03A4:  MOVLW  32
03A6:  MOVWF  1A
....................       IF ((KQADC<=122)&&(KQADC>106))   K_CACH=60; 
03A8:  MOVF   19,F
03AA:  BNZ   03C2
03AC:  MOVF   18,W
03AE:  SUBLW  7A
03B0:  BNC   03C2
03B2:  MOVF   19,F
03B4:  BNZ   03BC
03B6:  MOVF   18,W
03B8:  SUBLW  6A
03BA:  BC    03C2
03BC:  CLRF   1B
03BE:  MOVLW  3C
03C0:  MOVWF  1A
....................       IF ((KQADC<=106)&&(KQADC>96))    K_CACH=70; 
03C2:  MOVF   19,F
03C4:  BNZ   03DC
03C6:  MOVF   18,W
03C8:  SUBLW  6A
03CA:  BNC   03DC
03CC:  MOVF   19,F
03CE:  BNZ   03D6
03D0:  MOVF   18,W
03D2:  SUBLW  60
03D4:  BC    03DC
03D6:  CLRF   1B
03D8:  MOVLW  46
03DA:  MOVWF  1A
....................       IF ((KQADC<=96)&&(KQADC>80))     K_CACH=80; 
03DC:  MOVF   19,F
03DE:  BNZ   03F6
03E0:  MOVF   18,W
03E2:  SUBLW  60
03E4:  BNC   03F6
03E6:  MOVF   19,F
03E8:  BNZ   03F0
03EA:  MOVF   18,W
03EC:  SUBLW  50
03EE:  BC    03F6
03F0:  CLRF   1B
03F2:  MOVLW  50
03F4:  MOVWF  1A
....................       XUAT_4LED_7DOAN_GIAIMA_XOA_SO0(K_CACH); 
03F6:  MOVFF  1B,1D
03FA:  MOVFF  1A,1C
03FE:  BRA    0180
0400:  BRA    0308
....................    }  
.................... } 
....................  
0402:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
