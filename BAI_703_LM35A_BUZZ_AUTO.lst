CCS PCH C Compiler, Version 5.015, 5967               08-Nov-22 10:01

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\BAI_703_LM35A_BUZZ_AUTO.lst

               ROM used:   1506 bytes (5%)
                           Largest free fragment is 31262
               RAM used:   29 (1%) at main() level
                           43 (2%) worst case
               Stack used: 4 locations
               Stack size: 31

*
0000:  GOTO   04E8
....................  
.................... #include <tv_pickit2_shift_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA C0,F9
0016:  DATA A4,B0
0018:  DATA 99,92
001A:  DATA 82,F8
001C:  DATA 80,90
001E:  DATA 88,83
0020:  DATA C6,A1
0022:  DATA 86,8E
*
011A:  MOVLW  8E
011C:  MOVWF  00
011E:  MOVFF  1E,01
0122:  MOVFF  1D,02
0126:  CLRF   03
0128:  MOVF   01,F
012A:  BNZ   013E
012C:  MOVFF  02,01
0130:  CLRF   02
0132:  MOVLW  08
0134:  SUBWF  00,F
0136:  MOVF   01,F
0138:  BNZ   013E
013A:  CLRF   00
013C:  BRA    014E
013E:  BCF    FD8.0
0140:  BTFSC  01.7
0142:  BRA    014C
0144:  RLCF   02,F
0146:  RLCF   01,F
0148:  DECF   00,F
014A:  BRA    013E
014C:  BCF    01.7
014E:  GOTO   057E (RETURN)
0152:  MOVF   1D,W
0154:  BTFSC  FD8.2
0156:  BRA    02A2
0158:  MOVWF  29
015A:  MOVF   21,W
015C:  BTFSC  FD8.2
015E:  BRA    02A2
0160:  SUBWF  29,F
0162:  BNC   016E
0164:  MOVLW  7F
0166:  ADDWF  29,F
0168:  BTFSC  FD8.0
016A:  BRA    02A2
016C:  BRA    017A
016E:  MOVLW  81
0170:  SUBWF  29,F
0172:  BTFSS  FD8.0
0174:  BRA    02A2
0176:  BTFSC  FD8.2
0178:  BRA    02A2
017A:  MOVFF  29,00
017E:  CLRF   01
0180:  CLRF   02
0182:  CLRF   03
0184:  CLRF   28
0186:  MOVFF  1E,27
018A:  BSF    27.7
018C:  MOVFF  1F,26
0190:  MOVFF  20,25
0194:  MOVLW  19
0196:  MOVWF  29
0198:  MOVF   24,W
019A:  SUBWF  25,F
019C:  BC    01B8
019E:  MOVLW  01
01A0:  SUBWF  26,F
01A2:  BC    01B8
01A4:  SUBWF  27,F
01A6:  BC    01B8
01A8:  SUBWF  28,F
01AA:  BC    01B8
01AC:  INCF   28,F
01AE:  INCF   27,F
01B0:  INCF   26,F
01B2:  MOVF   24,W
01B4:  ADDWF  25,F
01B6:  BRA    0208
01B8:  MOVF   23,W
01BA:  SUBWF  26,F
01BC:  BC    01E2
01BE:  MOVLW  01
01C0:  SUBWF  27,F
01C2:  BC    01E2
01C4:  SUBWF  28,F
01C6:  BC    01E2
01C8:  INCF   28,F
01CA:  INCF   27,F
01CC:  MOVF   23,W
01CE:  ADDWF  26,F
01D0:  MOVF   24,W
01D2:  ADDWF  25,F
01D4:  BNC   0208
01D6:  INCF   26,F
01D8:  BNZ   0208
01DA:  INCF   27,F
01DC:  BNZ   0208
01DE:  INCF   28,F
01E0:  BRA    0208
01E2:  MOVF   22,W
01E4:  IORLW  80
01E6:  SUBWF  27,F
01E8:  BC    0206
01EA:  MOVLW  01
01EC:  SUBWF  28,F
01EE:  BC    0206
01F0:  INCF   28,F
01F2:  MOVF   22,W
01F4:  IORLW  80
01F6:  ADDWF  27,F
01F8:  MOVF   23,W
01FA:  ADDWF  26,F
01FC:  BNC   01D0
01FE:  INCF   27,F
0200:  BNZ   01D0
0202:  INCF   28,F
0204:  BRA    01D0
0206:  BSF    03.0
0208:  DECFSZ 29,F
020A:  BRA    020E
020C:  BRA    0224
020E:  BCF    FD8.0
0210:  RLCF   25,F
0212:  RLCF   26,F
0214:  RLCF   27,F
0216:  RLCF   28,F
0218:  BCF    FD8.0
021A:  RLCF   03,F
021C:  RLCF   02,F
021E:  RLCF   01,F
0220:  RLCF   2A,F
0222:  BRA    0198
0224:  BTFSS  2A.0
0226:  BRA    0234
0228:  BCF    FD8.0
022A:  RRCF   01,F
022C:  RRCF   02,F
022E:  RRCF   03,F
0230:  RRCF   2A,F
0232:  BRA    0238
0234:  DECF   00,F
0236:  BZ    02A2
0238:  BTFSC  2A.7
023A:  BRA    0278
023C:  BCF    FD8.0
023E:  RLCF   25,F
0240:  RLCF   26,F
0242:  RLCF   27,F
0244:  RLCF   28,F
0246:  MOVF   24,W
0248:  SUBWF  25,F
024A:  BC    025A
024C:  MOVLW  01
024E:  SUBWF  26,F
0250:  BC    025A
0252:  SUBWF  27,F
0254:  BC    025A
0256:  SUBWF  28,F
0258:  BNC   028E
025A:  MOVF   23,W
025C:  SUBWF  26,F
025E:  BC    026A
0260:  MOVLW  01
0262:  SUBWF  27,F
0264:  BC    026A
0266:  SUBWF  28,F
0268:  BNC   028E
026A:  MOVF   22,W
026C:  IORLW  80
026E:  SUBWF  27,F
0270:  BC    0278
0272:  MOVLW  01
0274:  SUBWF  28,F
0276:  BNC   028E
0278:  INCF   03,F
027A:  BNZ   028E
027C:  INCF   02,F
027E:  BNZ   028E
0280:  INCF   01,F
0282:  BNZ   028E
0284:  INCF   00,F
0286:  BZ    02A2
0288:  RRCF   01,F
028A:  RRCF   02,F
028C:  RRCF   03,F
028E:  MOVFF  1E,29
0292:  MOVF   22,W
0294:  XORWF  29,F
0296:  BTFSS  29.7
0298:  BRA    029E
029A:  BSF    01.7
029C:  BRA    02AA
029E:  BCF    01.7
02A0:  BRA    02AA
02A2:  CLRF   00
02A4:  CLRF   01
02A6:  CLRF   02
02A8:  CLRF   03
02AA:  GOTO   05A0 (RETURN)
02AE:  MOVLW  8E
02B0:  MOVWF  00
02B2:  MOVF   1D,W
02B4:  SUBWF  00,F
02B6:  MOVFF  1E,02
02BA:  MOVFF  1F,01
02BE:  BSF    02.7
02C0:  MOVF   00,F
02C2:  BZ    02D6
02C4:  BCF    FD8.0
02C6:  MOVF   02,F
02C8:  BNZ   02CE
02CA:  MOVF   01,F
02CC:  BZ    02D6
02CE:  RRCF   02,F
02D0:  RRCF   01,F
02D2:  DECFSZ 00,F
02D4:  BRA    02C4
02D6:  BTFSS  1E.7
02D8:  BRA    02E4
02DA:  COMF   01,F
02DC:  COMF   02,F
02DE:  INCF   01,F
02E0:  BTFSC  FD8.2
02E2:  INCF   02,F
02E4:  GOTO   05B2 (RETURN)
02E8:  CLRF   01
02EA:  CLRF   02
02EC:  CLRF   00
02EE:  CLRF   03
02F0:  MOVF   24,W
02F2:  BNZ   02F8
02F4:  MOVF   23,W
02F6:  BZ    0328
02F8:  MOVLW  10
02FA:  MOVWF  25
02FC:  BCF    FD8.0
02FE:  RLCF   21,F
0300:  RLCF   22,F
0302:  RLCF   00,F
0304:  RLCF   03,F
0306:  MOVF   24,W
0308:  SUBWF  03,W
030A:  BNZ   0310
030C:  MOVF   23,W
030E:  SUBWF  00,W
0310:  BNC   0320
0312:  MOVF   23,W
0314:  SUBWF  00,F
0316:  BTFSS  FD8.0
0318:  DECF   03,F
031A:  MOVF   24,W
031C:  SUBWF  03,F
031E:  BSF    FD8.0
0320:  RLCF   01,F
0322:  RLCF   02,F
0324:  DECFSZ 25,F
0326:  BRA    02FC
0328:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
00F2:  CLRF   FEA
00F4:  MOVLW  1D
00F6:  MOVWF  FE9
00F8:  MOVF   FEF,W
00FA:  BZ    0116
00FC:  MOVLW  06
00FE:  MOVWF  01
0100:  CLRF   00
0102:  DECFSZ 00,F
0104:  BRA    0102
0106:  DECFSZ 01,F
0108:  BRA    0100
010A:  MOVLW  7B
010C:  MOVWF  00
010E:  DECFSZ 00,F
0110:  BRA    010E
0112:  DECFSZ FEF,F
0114:  BRA    00FC
0116:  GOTO   0570 (RETURN)
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
0024:  CLRF   24
0026:  MOVF   24,W
0028:  SUBLW  07
002A:  BNC   0048
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
002C:  BTFSC  23.7
002E:  BRA    0034
0030:  BCF    F8D.2
0032:  BRA    0036
0034:  BSF    F8D.2
0036:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
0038:  BCF    F96.0
003A:  BCF    F8D.0
003C:  BCF    F96.0
003E:  BSF    F8D.0
....................          X= X<<1;          
0040:  BCF    FD8.0
0042:  RLCF   23,F
0044:  INCF   24,F
0046:  BRA    0026
....................      } 
0048:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
*
0476:  MOVFF  1D,23
047A:  RCALL  0024
....................       XUAT_1BYTE(BLD2); 
047C:  MOVFF  1E,23
0480:  RCALL  0024
....................       XUAT_1BYTE(BLD1);           
0482:  MOVFF  1F,23
0486:  RCALL  0024
....................       XUAT_1BYTE(BLD0);             
0488:  MOVFF  20,23
048C:  RCALL  0024
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
048E:  BCF    F95.4
0490:  BSF    F8C.4
....................       OUTPUT_LOW(RCK_32LED); 
0492:  BCF    F95.4
0494:  BCF    F8C.4
0496:  RETURN 0
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
....................      B1 = WLD0>>8;  B0 = WLD0; 
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
*
004A:  MOVFF  1E,1F
004E:  MOVFF  1D,20
....................    xuat_1byte(b1);     
0052:  MOVFF  1F,23
0056:  RCALL  0024
....................    xuat_1byte(b0); 
0058:  MOVFF  20,23
005C:  RCALL  0024
005E:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
0060:  CLRF   1E
0062:  CLRF   1D
0064:  RCALL  004A
....................    xuat_1word(0);  
0066:  CLRF   1E
0068:  CLRF   1D
006A:  RCALL  004A
....................    xuat_1word(0);                              
006C:  CLRF   1E
006E:  CLRF   1D
0070:  RCALL  004A
....................    xuat_1word(0);                                     
0072:  CLRF   1E
0074:  CLRF   1D
0076:  RCALL  004A
....................     
....................    output_high(rck_buzerelay);    
0078:  BCF    F95.3
007A:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
007C:  BCF    F95.3
007E:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
0080:  BCF    F95.4
0082:  BSF    F8C.4
....................    output_low(rck_32led);  
0084:  BCF    F95.4
0086:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
0088:  BCF    F95.5
008A:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
008C:  BCF    F95.5
008E:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
0090:  BCF    F95.7
0092:  BSF    F8C.7
....................    output_low(rck_matranled);    
0094:  BCF    F95.7
0096:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
0098:  BCF    F95.2
009A:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
009C:  BCF    F95.2
009E:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
00A0:  SETF   1E
00A2:  SETF   1D
00A4:  RCALL  004A
....................    xuat_1word(0xffff);  
00A6:  SETF   1E
00A8:  SETF   1D
00AA:  RCALL  004A
....................    output_high(rck_4led7doan);        
00AC:  BCF    F95.6
00AE:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
00B0:  BCF    F95.6
00B2:  BCF    F8C.6
00B4:  GOTO   00D0 (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
00B8:  MOVLW  FF
00BA:  MOVWF  F92
00BC:  MOVLW  3C
00BE:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
00C0:  MOVLW  F1
00C2:  MOVWF  F94
00C4:  MOVLW  00
00C6:  MOVWF  F96
....................    set_tris_d(0x00);     
00C8:  MOVWF  F95
....................    output_d(0x00);  
00CA:  CLRF   F95
00CC:  CLRF   F8C
....................    xoa_tat_6module(); 
00CE:  BRA    0060
....................    port_b_pullups(0xff);           
00D0:  BCF    FF1.7
....................    rbdc=0;                
00D2:  CLRF   06
00D4:  CLRF   05
....................              
....................    setup_adc(adc_clock_div_32);         
00D6:  MOVF   FC0,W
00D8:  ANDLW  C0
00DA:  IORLW  02
00DC:  MOVWF  FC0
00DE:  BSF    FC0.7
00E0:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
00E2:  MOVF   FC1,W
00E4:  ANDLW  C0
00E6:  IORLW  0C
00E8:  MOVWF  FC1
....................    output_low(g_all);         
00EA:  BCF    F95.0
00EC:  BCF    F8C.0
00EE:  GOTO   052E (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
*
032A:  MOVFF  22,23
032E:  RCALL  0024
0330:  MOVFF  21,23
0334:  RCALL  0024
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
0336:  MOVFF  20,23
033A:  RCALL  0024
033C:  MOVFF  1F,23
0340:  RCALL  0024
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
0342:  BCF    F95.6
0344:  BCF    F8C.6
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
0346:  BCF    F95.6
0348:  BSF    F8C.6
034A:  GOTO   0472 (RETURN)
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
034E:  MOVFF  1E,22
0352:  MOVFF  1D,21
0356:  CLRF   24
0358:  MOVLW  0A
035A:  MOVWF  23
035C:  RCALL  02E8
035E:  MOVFF  00,1F
0362:  MOVFF  03,20
0366:  MOVFF  03,03
036A:  MOVF   00,W
036C:  MOVFF  FF2,21
0370:  BCF    FF2.7
0372:  RCALL  0004
0374:  BTFSC  21.7
0376:  BSF    FF2.7
0378:  MOVWF  07
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
037A:  MOVFF  1E,22
037E:  MOVFF  1D,21
0382:  CLRF   24
0384:  MOVLW  0A
0386:  MOVWF  23
0388:  RCALL  02E8
038A:  MOVFF  02,20
038E:  MOVFF  01,1F
0392:  MOVFF  02,22
0396:  MOVFF  01,21
039A:  CLRF   24
039C:  MOVLW  0A
039E:  MOVWF  23
03A0:  RCALL  02E8
03A2:  MOVFF  00,1F
03A6:  MOVFF  03,20
03AA:  MOVFF  03,03
03AE:  MOVF   00,W
03B0:  MOVFF  FF2,21
03B4:  BCF    FF2.7
03B6:  RCALL  0004
03B8:  BTFSC  21.7
03BA:  BSF    FF2.7
03BC:  MOVWF  08
....................       TRAM4  = MA7DOAN[TAM/100%10];  
03BE:  MOVFF  1E,22
03C2:  MOVFF  1D,21
03C6:  CLRF   24
03C8:  MOVLW  64
03CA:  MOVWF  23
03CC:  RCALL  02E8
03CE:  MOVFF  02,20
03D2:  MOVFF  01,1F
03D6:  MOVFF  02,22
03DA:  MOVFF  01,21
03DE:  CLRF   24
03E0:  MOVLW  0A
03E2:  MOVWF  23
03E4:  RCALL  02E8
03E6:  MOVFF  00,1F
03EA:  MOVFF  03,20
03EE:  MOVFF  03,03
03F2:  MOVF   00,W
03F4:  MOVFF  FF2,21
03F8:  BCF    FF2.7
03FA:  RCALL  0004
03FC:  BTFSC  21.7
03FE:  BSF    FF2.7
0400:  MOVWF  09
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
0402:  MOVFF  1E,22
0406:  MOVFF  1D,21
040A:  MOVLW  03
040C:  MOVWF  24
040E:  MOVLW  E8
0410:  MOVWF  23
0412:  RCALL  02E8
0414:  MOVFF  02,20
0418:  MOVFF  01,1F
041C:  MOVFF  02,22
0420:  MOVFF  01,21
0424:  CLRF   24
0426:  MOVLW  0A
0428:  MOVWF  23
042A:  RCALL  02E8
042C:  MOVFF  00,1F
0430:  MOVFF  03,20
0434:  MOVFF  03,03
0438:  MOVF   00,W
043A:  MOVFF  FF2,21
043E:  BCF    FF2.7
0440:  RCALL  0004
0442:  BTFSC  21.7
0444:  BSF    FF2.7
0446:  MOVWF  0A
....................       IF (NGAN4==0XC0) 
0448:  MOVF   0A,W
044A:  SUBLW  C0
044C:  BNZ   0460
....................       { 
....................          NGAN4=0XFF; 
044E:  SETF   0A
....................          IF (TRAM4==0XC0) 
0450:  MOVF   09,W
0452:  SUBLW  C0
0454:  BNZ   0460
....................          { 
....................             TRAM4=0XFF; 
0456:  SETF   09
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
0458:  MOVF   08,W
045A:  SUBLW  C0
045C:  BNZ   0460
045E:  SETF   08
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
0460:  MOVFF  0A,1F
0464:  MOVFF  09,20
0468:  MOVFF  08,21
046C:  MOVFF  07,22
0470:  BRA    032A
0472:  GOTO   05DC (RETURN)
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
....................     XUAT_1BYTE(GLCDDATA); 
....................     XUAT_1BYTE(LCDCONTROL);        
....................     XUAT_1BYTE(LCDDATA);       
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
....................     OUTPUT_LOW(RCK_LCD20X4); 
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
....................     LCDDATA    = ~LCD_INS_HTHI;       
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... #define nd_tren 40 
.................... #define nd_duoi 40 
....................  
.................... unsigned INT8 j, solan=100; 
.................... unsigned INT16 lm35a; 
.................... int1 ttqn=0; 
....................  
.................... void so_sanh_dk_buzzer() 
.................... { 
....................    IF ((lm35a>nd_tren)) 
*
0498:  MOVF   1B,F
049A:  BNZ   04A2
049C:  MOVF   1A,W
049E:  SUBLW  28
04A0:  BC    04B0
....................    { 
....................       ttqn = 1; 
04A2:  BSF    1C.0
.................... //!      buzzer_on () ; 
....................       XUAT_32LED_DON_4BYTE (0, 0, 0, 0XFF); 
04A4:  CLRF   1D
04A6:  CLRF   1E
04A8:  CLRF   1F
04AA:  SETF   20
04AC:  RCALL  0476
....................      // triac_2_off () ; 
.................... //!     XUAT_32LED_DON_4BYTE (0,0,0,0); 
....................    } 
04AE:  BRA    04E4
....................  
....................    else IF ((lm35a < nd_tren)&& (ttqn == 1)) 
04B0:  MOVF   1B,F
04B2:  BNZ   04CC
04B4:  MOVF   1A,W
04B6:  SUBLW  27
04B8:  BNC   04CC
04BA:  BTFSS  1C.0
04BC:  BRA    04CC
....................    { 
....................       ttqn = 0; 
04BE:  BCF    1C.0
.................... //!      buzzer_off () ; 
....................       XUAT_32LED_DON_4BYTE (0, 0, 0, 0); 
04C0:  CLRF   1D
04C2:  CLRF   1E
04C4:  CLRF   1F
04C6:  CLRF   20
04C8:  RCALL  0476
....................    } 
04CA:  BRA    04E4
....................  
....................    else IF ((lm35a < nd_duoi)&& (ttqn == 0))  
04CC:  MOVF   1B,F
04CE:  BNZ   04E4
04D0:  MOVF   1A,W
04D2:  SUBLW  27
04D4:  BNC   04E4
04D6:  BTFSC  1C.0
04D8:  BRA    04E4
....................    //triac_2_on (); 
....................    XUAT_32LED_DON_4BYTE (0xff, 0, 0, 0); 
04DA:  SETF   1D
04DC:  CLRF   1E
04DE:  CLRF   1F
04E0:  CLRF   20
04E2:  RCALL  0476
04E4:  GOTO   05DE (RETURN)
.................... } 
....................  
.................... void main() 
04E8:  CLRF   FF8
04EA:  BCF    FD0.7
04EC:  BSF    FB8.3
04EE:  MOVLW  08
04F0:  MOVWF  FAF
04F2:  MOVLW  02
04F4:  MOVWF  FB0
04F6:  MOVLW  A6
04F8:  MOVWF  FAC
04FA:  MOVLW  90
04FC:  MOVWF  FAB
04FE:  CLRF   04
0500:  CLRF   0B
0502:  CLRF   0C
0504:  CLRF   0D
0506:  CLRF   0E
0508:  CLRF   17
050A:  MOVLW  64
050C:  MOVWF  19
050E:  BCF    1C.0
0510:  MOVF   FC1,W
0512:  ANDLW  C0
0514:  IORLW  0F
0516:  MOVWF  FC1
0518:  MOVLW  07
051A:  MOVWF  FB4
051C:  SETF   0F
051E:  SETF   10
0520:  SETF   11
0522:  SETF   12
0524:  SETF   13
0526:  SETF   14
0528:  SETF   15
052A:  SETF   16
.................... { 
....................    set_up_port_ic_chot () ; 
052C:  BRA    00B8
....................    setup_adc (adc_clock_div_32) ; 
052E:  MOVF   FC0,W
0530:  ANDLW  C0
0532:  IORLW  02
0534:  MOVWF  FC0
0536:  BSF    FC0.7
0538:  BSF    FC2.0
....................    setup_adc_ports (an0|vss_vdd); 
053A:  MOVF   FC1,W
053C:  ANDLW  C0
053E:  IORLW  0E
0540:  MOVWF  FC1
....................    set_adc_channel (0); 
0542:  MOVLW  00
0544:  MOVWF  01
0546:  MOVF   FC2,W
0548:  ANDLW  C3
054A:  IORWF  01,W
054C:  MOVWF  FC2
....................    ttqn = 0; 
054E:  BCF    1C.0
....................  
....................    WHILE (true) 
....................    { 
....................       lm35a = 0; 
0550:  CLRF   1B
0552:  CLRF   1A
....................       FOR (j = 0; j<solan; j++) 
0554:  CLRF   18
0556:  MOVF   19,W
0558:  SUBWF  18,W
055A:  BC    0574
....................       { 
....................          lm35a = lm35a + read_adc (); 
055C:  BSF    FC2.1
055E:  BTFSC  FC2.1
0560:  BRA    055E
0562:  MOVF   FC3,W
0564:  ADDWF  1A,F
0566:  MOVF   FC4,W
0568:  ADDWFC 1B,F
....................          delay_ms (1) ; 
056A:  MOVLW  01
056C:  MOVWF  1D
056E:  BRA    00F2
0570:  INCF   18,F
0572:  BRA    0556
....................       } 
....................  
....................       lm35a = lm35a / 2.046; 
0574:  MOVFF  1B,1E
0578:  MOVFF  1A,1D
057C:  BRA    011A
057E:  MOVFF  03,20
0582:  MOVFF  02,1F
0586:  MOVFF  01,1E
058A:  MOVFF  00,1D
058E:  MOVLW  AA
0590:  MOVWF  24
0592:  MOVLW  F1
0594:  MOVWF  23
0596:  MOVLW  02
0598:  MOVWF  22
059A:  MOVLW  80
059C:  MOVWF  21
059E:  BRA    0152
05A0:  MOVFF  03,20
05A4:  MOVFF  02,1F
05A8:  MOVFF  01,1E
05AC:  MOVFF  00,1D
05B0:  BRA    02AE
05B2:  MOVFF  02,1B
05B6:  MOVFF  01,1A
....................       lm35a = lm35a / solan; 
05BA:  MOVFF  1B,22
05BE:  MOVFF  1A,21
05C2:  CLRF   24
05C4:  MOVFF  19,23
05C8:  RCALL  02E8
05CA:  MOVFF  02,1B
05CE:  MOVFF  01,1A
....................       xuat_4led_7doan_giaima_xoa_so0 (lm35a); 
05D2:  MOVFF  1B,1E
05D6:  MOVFF  1A,1D
05DA:  BRA    034E
....................       so_sanh_dk_buzzer () ; 
05DC:  BRA    0498
05DE:  BRA    0550
....................    } 
.................... } 
....................  
05E0:  SLEEP 
....................  

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
