CCS PCH C Compiler, Version 5.015, 5967               18-Oct-22 11:25

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\BAI_617_LCD_4LED_DEM_SP_TO_UP.lst

               ROM used:   1362 bytes (4%)
                           Largest free fragment is 31406
               RAM used:   49 (2%) at main() level
                           55 (3%) worst case
               Stack used: 7 locations
               Stack size: 31

*
0000:  GOTO   03EC
.................... //!#include <tv_pickit2_shift_1_proteus.c> 
.................... #include <tv_pickit2_shift_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA C0,F9
0016:  DATA A4,B0
0018:  DATA 99,92
001A:  DATA 82,F8
001C:  DATA 80,90
001E:  DATA 88,83
0020:  DATA C6,A1
0022:  DATA 86,8E
0024:  CLRF   FF7
0026:  ADDLW  34
0028:  MOVWF  FF6
002A:  MOVLW  00
002C:  ADDWFC FF7,F
002E:  TBLRD*+
0030:  MOVF   FF5,W
0032:  RETURN 0
0034:  DATA 80,C0
0036:  DATA 94,D4
0038:  DATA 67,69
003A:  DATA 61,20
003C:  DATA 74,72
003E:  DATA 69,20
0040:  DATA 63,61
0042:  DATA 69,20
0044:  DATA 64,61
0046:  DATA 74,3A
0048:  DATA 00,00
004A:  DATA 67,69
004C:  DATA 61,20
004E:  DATA 74,72
0050:  DATA 69,20
0052:  DATA 64,65
0054:  DATA 6D,3A
0056:  DATA 00,00
*
0228:  TBLRD*+
022A:  MOVF   FF5,F
022C:  BZ    0246
022E:  MOVFF  FF6,25
0232:  MOVFF  FF7,26
0236:  MOVFF  FF5,27
023A:  RCALL  0212
023C:  MOVFF  25,FF6
0240:  MOVFF  26,FF7
0244:  BRA    0228
0246:  RETURN 0
0248:  CLRF   01
024A:  CLRF   02
024C:  CLRF   00
024E:  CLRF   03
0250:  MOVF   31,W
0252:  BNZ   0258
0254:  MOVF   30,W
0256:  BZ    0288
0258:  MOVLW  10
025A:  MOVWF  32
025C:  BCF    FD8.0
025E:  RLCF   2E,F
0260:  RLCF   2F,F
0262:  RLCF   00,F
0264:  RLCF   03,F
0266:  MOVF   31,W
0268:  SUBWF  03,W
026A:  BNZ   0270
026C:  MOVF   30,W
026E:  SUBWF  00,W
0270:  BNC   0280
0272:  MOVF   30,W
0274:  SUBWF  00,F
0276:  BTFSS  FD8.0
0278:  DECF   03,F
027A:  MOVF   31,W
027C:  SUBWF  03,F
027E:  BSF    FD8.0
0280:  RLCF   01,F
0282:  RLCF   02,F
0284:  DECFSZ 32,F
0286:  BRA    025C
0288:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
018A:  CLRF   FEA
018C:  MOVLW  25
018E:  MOVWF  FE9
0190:  MOVF   FEF,W
0192:  BZ    01AE
0194:  MOVLW  06
0196:  MOVWF  01
0198:  CLRF   00
019A:  DECFSZ 00,F
019C:  BRA    019A
019E:  DECFSZ 01,F
01A0:  BRA    0198
01A2:  MOVLW  7B
01A4:  MOVWF  00
01A6:  DECFSZ 00,F
01A8:  BRA    01A6
01AA:  DECFSZ FEF,F
01AC:  BRA    0194
01AE:  RETURN 0
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
0058:  CLRF   36
005A:  MOVF   36,W
005C:  SUBLW  07
005E:  BNC   007C
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
0060:  BTFSC  35.7
0062:  BRA    0068
0064:  BCF    F8D.2
0066:  BRA    006A
0068:  BSF    F8D.2
006A:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
006C:  BCF    F96.0
006E:  BCF    F8D.0
0070:  BCF    F96.0
0072:  BSF    F8D.0
....................          X= X<<1;          
0074:  BCF    FD8.0
0076:  RLCF   35,F
0078:  INCF   36,F
007A:  BRA    005A
....................      } 
007C:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
....................       XUAT_1BYTE(BLD2); 
....................       XUAT_1BYTE(BLD1);           
....................       XUAT_1BYTE(BLD0);             
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
....................       OUTPUT_LOW(RCK_32LED); 
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
....................      B1 = WLD0>>8;  B0 = WLD0; 
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
007E:  MOVFF  26,27
0082:  MOVFF  25,28
....................    xuat_1byte(b1);     
0086:  MOVFF  27,35
008A:  RCALL  0058
....................    xuat_1byte(b0); 
008C:  MOVFF  28,35
0090:  RCALL  0058
0092:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
0094:  CLRF   26
0096:  CLRF   25
0098:  RCALL  007E
....................    xuat_1word(0);  
009A:  CLRF   26
009C:  CLRF   25
009E:  RCALL  007E
....................    xuat_1word(0);                              
00A0:  CLRF   26
00A2:  CLRF   25
00A4:  RCALL  007E
....................    xuat_1word(0);                                     
00A6:  CLRF   26
00A8:  CLRF   25
00AA:  RCALL  007E
....................     
....................    output_high(rck_buzerelay);    
00AC:  BCF    F95.3
00AE:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
00B0:  BCF    F95.3
00B2:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
00B4:  BCF    F95.4
00B6:  BSF    F8C.4
....................    output_low(rck_32led);  
00B8:  BCF    F95.4
00BA:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
00BC:  BCF    F95.5
00BE:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
00C0:  BCF    F95.5
00C2:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
00C4:  BCF    F95.7
00C6:  BSF    F8C.7
....................    output_low(rck_matranled);    
00C8:  BCF    F95.7
00CA:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
00CC:  BCF    F95.2
00CE:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
00D0:  BCF    F95.2
00D2:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
00D4:  SETF   26
00D6:  SETF   25
00D8:  RCALL  007E
....................    xuat_1word(0xffff);  
00DA:  SETF   26
00DC:  SETF   25
00DE:  RCALL  007E
....................    output_high(rck_4led7doan);        
00E0:  BCF    F95.6
00E2:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
00E4:  BCF    F95.6
00E6:  BCF    F8C.6
00E8:  GOTO   0104 (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
00EC:  MOVLW  FF
00EE:  MOVWF  F92
00F0:  MOVLW  3C
00F2:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
00F4:  MOVLW  F1
00F6:  MOVWF  F94
00F8:  MOVLW  00
00FA:  MOVWF  F96
....................    set_tris_d(0x00);     
00FC:  MOVWF  F95
....................    output_d(0x00);  
00FE:  CLRF   F95
0100:  CLRF   F8C
....................    xoa_tat_6module(); 
0102:  BRA    0094
....................    port_b_pullups(0xff);           
0104:  BCF    FF1.7
....................    rbdc=0;                
0106:  CLRF   06
0108:  CLRF   05
....................              
....................    setup_adc(adc_clock_div_32);         
010A:  MOVF   FC0,W
010C:  ANDLW  C0
010E:  IORLW  02
0110:  MOVWF  FC0
0112:  BSF    FC0.7
0114:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
0116:  MOVF   FC1,W
0118:  ANDLW  C0
011A:  IORLW  0C
011C:  MOVWF  FC1
....................    output_low(g_all);         
011E:  BCF    F95.0
0120:  BCF    F8C.0
0122:  GOTO   042C (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
*
03C8:  MOVFF  34,35
03CC:  RCALL  0058
03CE:  MOVFF  33,35
03D2:  RCALL  0058
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
03D4:  MOVFF  32,35
03D8:  RCALL  0058
03DA:  MOVFF  31,35
03DE:  RCALL  0058
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
03E0:  BCF    F95.6
03E2:  BCF    F8C.6
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
03E4:  BCF    F95.6
03E6:  BSF    F8C.6
03E8:  GOTO   052C (RETURN)
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
....................       TRAM4  = MA7DOAN[TAM/100%10];  
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
....................       IF (NGAN4==0XC0) 
....................       { 
....................          NGAN4=0XFF; 
....................          IF (TRAM4==0XC0) 
....................          { 
....................             TRAM4=0XFF; 
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
*
0126:  MOVFF  0E,35
012A:  RCALL  0058
....................     XUAT_1BYTE(GLCDDATA); 
012C:  MOVFF  0D,35
0130:  RCALL  0058
....................     XUAT_1BYTE(LCDCONTROL);        
0132:  MOVFF  0C,35
0136:  RCALL  0058
....................     XUAT_1BYTE(LCDDATA);       
0138:  MOVFF  0B,35
013C:  RCALL  0058
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
013E:  BCF    F95.2
0140:  BSF    F8C.2
....................     OUTPUT_LOW(RCK_LCD20X4); 
0142:  BCF    F95.2
0144:  BCF    F8C.2
0146:  GOTO   0158 (RETURN)
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
014A:  MOVF   2A,W
014C:  MOVWF  0C
014E:  COMF   0C,F
....................     LCDDATA    = ~LCD_INS_HTHI;       
0150:  MOVFF  2B,0B
0154:  COMF   0B,F
....................     XUAT_GLCD_LCD(); 
0156:  BRA    0126
0158:  RETURN 0
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... #include <tv_pickit2_shift_lcd.c> 
.................... UNSIGNED INT8 LCD_CONTROL;   
.................... #bit LCD_P = LCD_CONTROL.3 
.................... #bit LCD_RS = LCD_CONTROL.2 
.................... #bit LCD_RW = LCD_CONTROL.1 
.................... #bit LCD_E  = LCD_CONTROL.0 
....................  
.................... #DEFINE LCD_FUNCTION_SET       0X38 
.................... #DEFINE LCD_DISPLAY_CONTROL    0X0C 
.................... #DEFINE LCD_CLEAR_DISPLAY      0X01 
.................... #DEFINE LCD_ENTRY_MODE         0X06 
.................... #DEFINE LCD_SHIFT_LEFT         0X18 
.................... #DEFINE LCD_SHIFT_RIGHT        0X1C 
....................  
.................... #DEFINE LCD_ADDR_LINE1         0X80 
.................... #DEFINE LCD_ADDR_LINE2         0XC0 
.................... #DEFINE LCD_ADDR_LINE3         0X94 
.................... #DEFINE LCD_ADDR_LINE4         0XD4 
....................  
.................... VOID LCD_XUAT_8BIT(INT8 LCD_DATA_X) 
.................... { 
....................       LCD_E=1; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);      
015A:  BSF    18.0
015C:  MOVFF  18,2A
0160:  MOVFF  29,2B
0164:  RCALL  014A
....................       LCD_E=0; XUAT_LCD20X4(LCD_CONTROL,LCD_DATA_X);  
0166:  BCF    18.0
0168:  MOVFF  18,2A
016C:  MOVFF  29,2B
0170:  RCALL  014A
0172:  RETURN 0
.................... } 
.................... void LCD_COMMAND(INT8 LCD_DATA_X)    
....................   { 
....................       LCD_RS = 0; 
0174:  BCF    18.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
0176:  MOVFF  28,29
017A:  RCALL  015A
....................       DELAY_US(20); 
017C:  MOVLW  20
017E:  MOVWF  00
0180:  DECFSZ 00,F
0182:  BRA    0180
0184:  BRA    0186
0186:  NOP   
0188:  RETURN 0
....................   } 
.................... void LCD_DATA(INT8 LCD_DATA_X)        
....................   { 
....................       LCD_RS = 1;      
*
0212:  BSF    18.2
....................       LCD_XUAT_8BIT(LCD_DATA_X); 
0214:  MOVFF  27,29
0218:  RCALL  015A
....................       DELAY_US(20); 
021A:  MOVLW  20
021C:  MOVWF  00
021E:  DECFSZ 00,F
0220:  BRA    021E
0222:  BRA    0224
0224:  NOP   
0226:  RETURN 0
....................   } 
....................    
.................... VOID SETUP_LCD () 
.................... {                      
....................          LCD_E  = 0;  
*
01B0:  BCF    18.0
....................          LCD_RW = 0;  
01B2:  BCF    18.1
....................          LCD_RS = 1;  
01B4:  BSF    18.2
....................          LCD_P =0; 
01B6:  BCF    18.3
....................          LCD_COMMAND(LCD_FUNCTION_SET);          
01B8:  MOVLW  38
01BA:  MOVWF  28
01BC:  RCALL  0174
....................          DELAY_US(40); 
01BE:  MOVLW  42
01C0:  MOVWF  00
01C2:  DECFSZ 00,F
01C4:  BRA    01C2
01C6:  NOP   
....................          LCD_COMMAND(LCD_DISPLAY_CONTROL);    
01C8:  MOVLW  0C
01CA:  MOVWF  28
01CC:  RCALL  0174
....................          DELAY_US(40); 
01CE:  MOVLW  42
01D0:  MOVWF  00
01D2:  DECFSZ 00,F
01D4:  BRA    01D2
01D6:  NOP   
....................          LCD_COMMAND(LCD_CLEAR_DISPLAY);       
01D8:  MOVLW  01
01DA:  MOVWF  28
01DC:  RCALL  0174
....................          DELAY_MS(2); 
01DE:  MOVLW  02
01E0:  MOVWF  25
01E2:  RCALL  018A
....................          LCD_COMMAND(LCD_ENTRY_MODE);        
01E4:  MOVLW  06
01E6:  MOVWF  28
01E8:  RCALL  0174
....................          DELAY_US(40);                 
01EA:  MOVLW  42
01EC:  MOVWF  00
01EE:  DECFSZ 00,F
01F0:  BRA    01EE
01F2:  NOP   
01F4:  GOTO   042E (RETURN)
.................... } 
....................  
.................... CONST UNSIGNED CHAR LCD_SO_X[11][6] ={ 
....................                   0,1,2,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4, 
....................                   32,32,32,32,32,32};             // SO 9 
....................                    
.................... CONST UNSIGNED CHAR LCD_SO_XX[10][9] ={ 
....................                   0,1,2,7,32,7,5,3,4,               // SO 0 
....................                   1,2,32,3,7,3,              // SO 1 
....................                   6,6,2,5,3,3,               // SO 2 
....................                   6,6,2,3,3,4,               // SO 3 
....................                   7,3,7,32,32,7,             // SO 4 
....................                   7,6,6,3,3,4,               // SO 5 
....................                   0,6,6,5,3,4,               // SO 6 
....................                   1,1,7,32,32,7,             // SO 7 
....................                   0,6,2,5,3,4,               // SO 8 
....................                   0,6,2,3,3,4};             // SO 9          
.................... //!CONST UNSIGNED CHAR LCD_SO_X[10][6] = 
.................... //!{ 
.................... //!                  0,1,2,3,4,5,               // SO 0 
.................... //!                  1,2,32,3,7,3,              // SO 1 
.................... //!                  6,6,2,4,3,3,               // SO 2 
.................... //!                  6,6,2,3,3,5,               // SO 3 
.................... //!                  7,3,7,32,32,7,             // SO 4 
.................... //!                  7,6,6,3,3,5,               // SO 5 
.................... //!                  0,6,6,4,3,5,               // SO 6 
.................... //!                  1,1,7,32,32,7,             // SO 7 
.................... //!                  0,6,2,4,3,5,               // SO 8 
.................... //!                  0,6,2,3,3,5};             // SO 9    
....................                    
.................... CONST UNSIGNED CHAR LCD_MA_8DOAN[] = { 
....................    0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN F - 0 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  //DOAN A - 1 
....................    0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  //DOAN B - 2 
....................    0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  //DOAN D - 3 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  //DOAN C - 4 
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07,  //DOAN E - 5 
....................    0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  //DOAN G+D-6  
....................    0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; //DOAN I  -7 
....................     
.................... VOID LCD_GOTO_XY(SIGNED INT8 X, SIGNED INT8 Y) 
.................... {  
....................    CONST UNSIGNED INT8 LCD_VITRI[]={0x80,0xC0,0x94,0xD4}; 
....................    LCD_COMMAND(LCD_VITRI[X]+Y); 
01F8:  CLRF   03
01FA:  MOVF   25,W
01FC:  MOVFF  FF2,27
0200:  BCF    FF2.7
0202:  RCALL  0024
0204:  BTFSC  27.7
0206:  BSF    FF2.7
0208:  ADDWF  26,W
020A:  MOVWF  27
020C:  MOVWF  28
020E:  RCALL  0174
0210:  RETURN 0
.................... } 
....................  
.................... VOID XXX() 
.................... {  
....................    SIGNED INT8 X; 
....................    X= LCD_SO_X[0][0]; 
....................    X= LCD_MA_8DOAN[0]; 
.................... } 
....................  
.................... unsigned INT16 t0,ch,dv,ch_gtcd,dv_gtcd,gia_tri_cai_dat; 
.................... ///////xoa so 0 vo nghia 
.................... void gm_lcd() 
.................... { 
....................    ch = t0 / 10 + 0x30; 
*
028A:  MOVFF  1A,2F
028E:  MOVFF  19,2E
0292:  CLRF   31
0294:  MOVLW  0A
0296:  MOVWF  30
0298:  RCALL  0248
029A:  MOVLW  30
029C:  ADDWF  01,W
029E:  MOVWF  1B
02A0:  MOVLW  00
02A2:  ADDWFC 02,W
02A4:  MOVWF  1C
....................    dv = t0 % 10 + 0x30; 
02A6:  MOVFF  1A,2F
02AA:  MOVFF  19,2E
02AE:  CLRF   31
02B0:  MOVLW  0A
02B2:  MOVWF  30
02B4:  RCALL  0248
02B6:  MOVLW  30
02B8:  ADDWF  00,W
02BA:  MOVWF  1D
02BC:  MOVLW  00
02BE:  ADDWFC 03,W
02C0:  MOVWF  1E
....................    IF (ch == 0x30) 
02C2:  MOVF   1B,W
02C4:  SUBLW  30
02C6:  BNZ   02D2
02C8:  MOVF   1C,F
02CA:  BNZ   02D2
....................    ch = 0x20; 
02CC:  CLRF   1C
02CE:  MOVLW  20
02D0:  MOVWF  1B
....................    ch_gtcd = gia_tri_cai_dat / 10 + 0x30; 
02D2:  MOVFF  24,2F
02D6:  MOVFF  23,2E
02DA:  CLRF   31
02DC:  MOVLW  0A
02DE:  MOVWF  30
02E0:  RCALL  0248
02E2:  MOVLW  30
02E4:  ADDWF  01,W
02E6:  MOVWF  1F
02E8:  MOVLW  00
02EA:  ADDWFC 02,W
02EC:  MOVWF  20
....................    dv_gtcd = gia_tri_cai_dat % 10 + 0x30; 
02EE:  MOVFF  24,2F
02F2:  MOVFF  23,2E
02F6:  CLRF   31
02F8:  MOVLW  0A
02FA:  MOVWF  30
02FC:  RCALL  0248
02FE:  MOVLW  30
0300:  ADDWF  00,W
0302:  MOVWF  21
0304:  MOVLW  00
0306:  ADDWFC 03,W
0308:  MOVWF  22
030A:  GOTO   0464 (RETURN)
.................... } 
....................  
.................... /////hien thi lcd xoa so 0 vo nghia 
.................... void hienthi_lcd() 
.................... { 
....................    lcd_GOTO_xy (1, 17) ; 
030E:  MOVLW  01
0310:  MOVWF  25
0312:  MOVLW  11
0314:  MOVWF  26
0316:  RCALL  01F8
....................    lcd_data (ch); 
0318:  MOVFF  1B,27
031C:  RCALL  0212
....................    lcd_data (dv); 
031E:  MOVFF  1D,27
0322:  RCALL  0212
....................    lcd_GOTO_xy (0, 17) ; 
0324:  CLRF   25
0326:  MOVLW  11
0328:  MOVWF  26
032A:  RCALL  01F8
....................    lcd_data (ch_gtcd); 
032C:  MOVFF  1F,27
0330:  RCALL  0212
....................    lcd_data (dv_gtcd); 
0332:  MOVFF  21,27
0336:  RCALL  0212
0338:  GOTO   0466 (RETURN)
.................... } 
....................  
.................... void phim_clr() 
.................... { 
....................    IF (!input (bt0)) 
033C:  BSF    F93.5
033E:  BTFSC  F81.5
0340:  BRA    035E
....................    { 
....................       delay_ms (20); 
0342:  MOVLW  14
0344:  MOVWF  25
0346:  RCALL  018A
....................       IF ( ! input (bt0) ) 
0348:  BSF    F93.5
034A:  BTFSC  F81.5
034C:  BRA    035E
....................       { 
....................          gia_tri_cai_dat = 1; 
034E:  CLRF   24
0350:  MOVLW  01
0352:  MOVWF  23
....................          set_timer0 (0); 
0354:  CLRF   FD7
0356:  CLRF   FD6
....................          WHILE ( ! input (bt0)) ; 
0358:  BSF    F93.5
035A:  BTFSS  F81.5
035C:  BRA    0358
....................       } 
....................    } 
035E:  GOTO   0468 (RETURN)
.................... } 
....................  
.................... void phim_up() 
.................... { 
....................    IF (!input (bt1)) 
0362:  BSF    F93.4
0364:  BTFSC  F81.4
0366:  BRA    0390
....................    { 
....................       delay_ms (20); 
0368:  MOVLW  14
036A:  MOVWF  25
036C:  RCALL  018A
....................       IF ( ! input (bt1) )  
036E:  BSF    F93.4
0370:  BTFSC  F81.4
0372:  BRA    0390
....................       { 
....................          gia_tri_cai_dat++; 
0374:  INCF   23,F
0376:  BTFSC  FD8.2
0378:  INCF   24,F
....................          IF (gia_tri_cai_dat == 100) gia_tri_cai_dat = 99; 
037A:  MOVF   23,W
037C:  SUBLW  64
037E:  BNZ   038A
0380:  MOVF   24,F
0382:  BNZ   038A
0384:  CLRF   24
0386:  MOVLW  63
0388:  MOVWF  23
....................          WHILE ( ! input (bt1)) ; 
038A:  BSF    F93.4
038C:  BTFSS  F81.4
038E:  BRA    038A
....................       } 
....................    } 
0390:  GOTO   046A (RETURN)
.................... } 
....................  
.................... void phim_dw() 
.................... { 
....................    IF (!input (bt2)) 
0394:  BSF    F93.3
0396:  BTFSC  F81.3
0398:  BRA    03C4
....................    { 
....................       delay_ms (20); 
039A:  MOVLW  14
039C:  MOVWF  25
039E:  RCALL  018A
....................       IF ( ! input (bt2) ) 
03A0:  BSF    F93.3
03A2:  BTFSC  F81.3
03A4:  BRA    03C4
....................       { 
....................          gia_tri_cai_dat--; 
03A6:  MOVF   23,W
03A8:  BTFSC  FD8.2
03AA:  DECF   24,F
03AC:  DECF   23,F
....................          IF (gia_tri_cai_dat <= 1) gia_tri_cai_dat = 1; 
03AE:  MOVF   24,F
03B0:  BNZ   03BE
03B2:  MOVF   23,W
03B4:  SUBLW  01
03B6:  BNC   03BE
03B8:  CLRF   24
03BA:  MOVLW  01
03BC:  MOVWF  23
....................          WHILE ( ! input (bt2)) ; 
03BE:  BSF    F93.3
03C0:  BTFSS  F81.3
03C2:  BRA    03BE
....................       } 
....................    } 
03C4:  GOTO   046C (RETURN)
.................... } 
....................  
.................... void main() 
*
03EC:  CLRF   FF8
03EE:  BCF    FD0.7
03F0:  BSF    FB8.3
03F2:  MOVLW  08
03F4:  MOVWF  FAF
03F6:  MOVLW  02
03F8:  MOVWF  FB0
03FA:  MOVLW  A6
03FC:  MOVWF  FAC
03FE:  MOVLW  90
0400:  MOVWF  FAB
0402:  CLRF   04
0404:  CLRF   0B
0406:  CLRF   0C
0408:  CLRF   0D
040A:  CLRF   0E
040C:  CLRF   17
040E:  MOVF   FC1,W
0410:  ANDLW  C0
0412:  IORLW  0F
0414:  MOVWF  FC1
0416:  MOVLW  07
0418:  MOVWF  FB4
041A:  SETF   0F
041C:  SETF   10
041E:  SETF   11
0420:  SETF   12
0422:  SETF   13
0424:  SETF   14
0426:  SETF   15
0428:  SETF   16
.................... { 
....................    set_up_port_ic_chot (); 
042A:  BRA    00EC
....................    setup_lcd (); 
042C:  BRA    01B0
....................    lcd_GOTO_xy (0, 0) ; 
042E:  CLRF   25
0430:  CLRF   26
0432:  RCALL  01F8
....................    lcd_data ("gia tri cai dat:"); 
0434:  MOVLW  38
0436:  MOVWF  FF6
0438:  MOVLW  00
043A:  MOVWF  FF7
043C:  RCALL  0228
....................    lcd_GOTO_xy (1, 0) ; 
043E:  MOVLW  01
0440:  MOVWF  25
0442:  CLRF   26
0444:  RCALL  01F8
....................    lcd_data ("gia tri dem:"); 
0446:  MOVLW  4A
0448:  MOVWF  FF6
044A:  MOVLW  00
044C:  MOVWF  FF7
044E:  RCALL  0228
....................    setup_timer_0 (t0_ext_l_to_h|t0_div_1); 
0450:  MOVLW  A8
0452:  MOVWF  FD5
....................    set_timer0 (0); 
0454:  CLRF   FD7
0456:  CLRF   FD6
....................    t0 = 0; 
0458:  CLRF   1A
045A:  CLRF   19
....................    gia_tri_cai_dat = 1; 
045C:  CLRF   24
045E:  MOVLW  01
0460:  MOVWF  23
....................    WHILE (true) 
....................    { 
....................  
....................       gm_lcd (); 
0462:  BRA    028A
....................       hienthi_lcd (); 
0464:  BRA    030E
....................       phim_clr (); 
0466:  BRA    033C
....................       phim_up (); 
0468:  BRA    0362
....................       phim_dw (); 
046A:  BRA    0394
....................       xuat_4led_7doan_4so (ma7doan[gia_tri_cai_dat / 10], ma7doan[gia_tri_cai_dat % 10], ma7doan[t0 / 10], ma7doan[t0 % 10]) ;       
046C:  MOVFF  24,2F
0470:  MOVFF  23,2E
0474:  CLRF   31
0476:  MOVLW  0A
0478:  MOVWF  30
047A:  RCALL  0248
047C:  MOVFF  02,26
0480:  MOVFF  01,25
0484:  MOVFF  02,03
0488:  MOVF   01,W
048A:  MOVFF  FF2,27
048E:  BCF    FF2.7
0490:  RCALL  0004
0492:  BTFSC  27.7
0494:  BSF    FF2.7
0496:  MOVWF  27
0498:  MOVFF  24,2F
049C:  MOVFF  23,2E
04A0:  CLRF   31
04A2:  MOVLW  0A
04A4:  MOVWF  30
04A6:  RCALL  0248
04A8:  MOVFF  00,28
04AC:  MOVFF  03,29
04B0:  MOVFF  03,03
04B4:  MOVF   00,W
04B6:  MOVFF  FF2,2A
04BA:  BCF    FF2.7
04BC:  RCALL  0004
04BE:  BTFSC  2A.7
04C0:  BSF    FF2.7
04C2:  MOVWF  2A
04C4:  MOVFF  1A,2F
04C8:  MOVFF  19,2E
04CC:  CLRF   31
04CE:  MOVLW  0A
04D0:  MOVWF  30
04D2:  RCALL  0248
04D4:  MOVFF  02,2C
04D8:  MOVFF  01,2B
04DC:  MOVFF  02,03
04E0:  MOVF   01,W
04E2:  MOVFF  FF2,2D
04E6:  BCF    FF2.7
04E8:  RCALL  0004
04EA:  BTFSC  2D.7
04EC:  BSF    FF2.7
04EE:  MOVWF  2D
04F0:  MOVFF  1A,2F
04F4:  MOVFF  19,2E
04F8:  CLRF   31
04FA:  MOVLW  0A
04FC:  MOVWF  30
04FE:  RCALL  0248
0500:  MOVFF  00,2E
0504:  MOVFF  03,2F
0508:  MOVFF  03,03
050C:  MOVF   00,W
050E:  MOVFF  FF2,30
0512:  BCF    FF2.7
0514:  RCALL  0004
0516:  BTFSC  30.7
0518:  BSF    FF2.7
051A:  MOVWF  30
051C:  MOVFF  27,31
0520:  MOVFF  2A,32
0524:  MOVFF  2D,33
0528:  MOVWF  34
052A:  BRA    03C8
....................        
....................       t0 = get_timer0 (); 
052C:  MOVF   FD6,W
052E:  MOVWF  19
0530:  MOVFF  FD7,1A
....................  
....................          IF (t0 >= gia_tri_cai_dat) set_timer0 (1) ; 
0534:  MOVF   24,W
0536:  SUBWF  1A,W
0538:  BNC   0548
053A:  BNZ   0542
053C:  MOVF   23,W
053E:  SUBWF  19,W
0540:  BNC   0548
0542:  CLRF   FD7
0544:  MOVLW  01
0546:  MOVWF  FD6
....................  
....................       delay_ms (50); 
0548:  MOVLW  32
054A:  MOVWF  25
054C:  RCALL  018A
054E:  BRA    0462
....................    } 
.................... } 
....................  
0550:  SLEEP 
....................  

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
