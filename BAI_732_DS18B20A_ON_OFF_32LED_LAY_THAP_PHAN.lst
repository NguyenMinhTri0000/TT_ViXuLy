CCS PCH C Compiler, Version 5.015, 5967               15-Nov-22 09:51

               Filename:   C:\Users\NguyenMinhTri\Desktop\TT VXL\BAI_732_DS18B20A_ON_OFF_32LED_LAY_THAP_PHAN.lst

               ROM used:   1632 bytes (5%)
                           Largest free fragment is 31136
               RAM used:   32 (2%) at main() level
                           54 (3%) worst case
               Stack used: 4 locations
               Stack size: 31

*
0000:  GOTO   057C
.................... #INCLUDE <TV_PICKIT2_SHIFT_1.c> 
.................... #INCLUDE    <18F4550.H> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA C0,F9
0016:  DATA A4,B0
0018:  DATA 99,92
001A:  DATA 82,F8
001C:  DATA 80,90
001E:  DATA 88,83
0020:  DATA C6,A1
0022:  DATA 86,8E
*
0226:  CLRF   01
0228:  CLRF   02
022A:  CLRF   00
022C:  CLRF   03
022E:  MOVF   27,W
0230:  BNZ   0236
0232:  MOVF   26,W
0234:  BZ    0266
0236:  MOVLW  10
0238:  MOVWF  28
023A:  BCF    FD8.0
023C:  RLCF   24,F
023E:  RLCF   25,F
0240:  RLCF   00,F
0242:  RLCF   03,F
0244:  MOVF   27,W
0246:  SUBWF  03,W
0248:  BNZ   024E
024A:  MOVF   26,W
024C:  SUBWF  00,W
024E:  BNC   025E
0250:  MOVF   26,W
0252:  SUBWF  00,F
0254:  BTFSS  FD8.0
0256:  DECF   03,F
0258:  MOVF   27,W
025A:  SUBWF  03,F
025C:  BSF    FD8.0
025E:  RLCF   01,F
0260:  RLCF   02,F
0262:  DECFSZ 28,F
0264:  BRA    023A
0266:  RETURN 0
*
04B0:  MOVF   22,W
04B2:  MULWF  24
04B4:  MOVFF  FF3,01
04B8:  MOVFF  FF4,00
04BC:  MULWF  25
04BE:  MOVF   FF3,W
04C0:  ADDWF  00,F
04C2:  MOVF   23,W
04C4:  MULWF  24
04C6:  MOVF   FF3,W
04C8:  ADDWFC 00,W
04CA:  MOVWF  02
04CC:  GOTO   0604 (RETURN)
04D0:  MOVF   26,W
04D2:  CLRF   01
04D4:  SUBWF  25,W
04D6:  BC    04DE
04D8:  MOVFF  25,00
04DC:  BRA    04F6
04DE:  CLRF   00
04E0:  MOVLW  08
04E2:  MOVWF  27
04E4:  RLCF   25,F
04E6:  RLCF   00,F
04E8:  MOVF   26,W
04EA:  SUBWF  00,W
04EC:  BTFSC  FD8.0
04EE:  MOVWF  00
04F0:  RLCF   01,F
04F2:  DECFSZ 27,F
04F4:  BRA    04E4
04F6:  RETURN 0
....................  
.................... #list 
....................  
.................... #DEVICE     ADC=10 
.................... #FUSES      NOWDT,PUT,HS,NOPROTECT,NOLVP,CPUDIV1 
.................... #USE        I2C(MASTER,SLOW,SDA=PIN_B0,SCL=PIN_B1) 
.................... #USE        DELAY(CLOCK=20000000) 
*
00F2:  MOVLW  03
00F4:  SUBWF  22,F
00F6:  BNC   010A
00F8:  CLRF   FEA
00FA:  MOVLW  22
00FC:  MOVWF  FE9
00FE:  MOVF   FEF,W
0100:  BZ    010A
0102:  BRA    0106
0104:  BRA    0106
0106:  DECFSZ FEF,F
0108:  BRA    0104
010A:  RETURN 0
.................... #USE        rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... //NUT NHAN: 
.................... #DEFINE  BT0     PIN_B5 
.................... #DEFINE  BT1     PIN_B4 
.................... #DEFINE  BT2     PIN_B3 
.................... #DEFINE  BT3     PIN_B2 
....................  
.................... #DEFINE  ON      BT0       //DK LED DON, MOTOR 
.................... #DEFINE  OFF     BT1 
.................... #DEFINE  INV     BT2 
....................  
.................... #DEFINE  UP      BT0    //DK LED DON 
.................... #DEFINE  DW      BT1 
.................... #DEFINE  CLR     BT2 
.................... #DEFINE  MOD     BT3 
....................  
.................... #DEFINE  STOP    BT3 
....................  
.................... #DEFINE  ON1     BT0      
.................... #DEFINE  OFF1    BT1 
.................... #DEFINE  ON2     BT2        
.................... #DEFINE  OFF2    BT3 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... #DEFINE      SSDO             PIN_E2         //CHUNG TAT CA 
.................... #DEFINE      SSCK             PIN_E0         //CHUNG TAT CA 
....................  
.................... #DEFINE      G_ALL            PIN_D0         //A - 4 BYTE 
.................... #DEFINE      RCK_LCD20X4      PIN_D2         //A - 2 BYTE DAO 
.................... #DEFINE      RCK_BUZERELAY    PIN_D3     //B - 1 BYTE  
.................... #DEFINE      RCK_32LED        PIN_D4         //A - 4 BYTE 
.................... #DEFINE      RCK_8LEDQUET     PIN_D5         //B - 2 BYTE DAO 
.................... #DEFINE      RCK_4LED7DOAN    PIN_D6         //A - 4 BYTE 
.................... #DEFINE      RCK_MATRANLED    PIN_D7         //B - 3 BYTE DAO 
....................  
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI); 
.................... VOID XUAT_BUZZER_RELAY(); 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT8 DL_BTN=0; 
.................... INT1 PHIM_BT0(UNSIGNED INT16 DL) 
.................... {   
....................     IF(!INPUT(BT0)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN = 0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT1 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT1(UNSIGNED INT16 DL ) 
.................... {   
....................     IF (!INPUT(BT1)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT2       
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                     
.................... INT1 PHIM_BT2(UNSIGNED INT16 DL ) 
.................... {                                         
....................     IF (!INPUT(BT2)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =0; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       RETURN(0); 
....................     }                                           
.................... }       
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH KIEM TRA PHIM BT3 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... INT1 PHIM_BT3(UNSIGNED INT16 DL,  UNSIGNED INT8 SOLAN  ) 
.................... {   
....................     IF (!INPUT(BT3)) 
....................     {   
....................       DL_BTN++; 
....................       IF(DL_BTN==1) RETURN(1); 
....................       ELSE 
....................       { 
....................          IF (DL_BTN>= DL) 
....................          DL_BTN =SOLAN; 
....................       } 
....................     } 
....................     ELSE    
....................     { 
....................       //DL_BTN =0; 
....................       RETURN(0); 
....................     } 
.................... }  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //KHAI BAO DU LIEU 16 BIT CHO MODULE RELAY, TRIAC, BUZZER, DONG CO 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED INT16 RBDC; 
.................... #BIT STEP_MOTOR_ENABLE  = RBDC.0    //1=ENA,0=DIS 
.................... #BIT STEP_MOTOR_IN1     = RBDC.1     
.................... #BIT STEP_MOTOR_IN2     = RBDC.2 
.................... #BIT STEP_MOTOR_IN3     = RBDC.3 
.................... #BIT STEP_MOTOR_IN4     = RBDC.4 
.................... #BIT DC_ENABLE          = RBDC.5    //1=ENA,0=DIS 
.................... #BIT PWRKEY             = RBDC.6    //KHOI TAO SIM900 
....................  
.................... #BIT BUZZER             = RBDC.8    //1=ON,0=OFF 
.................... #BIT TRIAC_1            = RBDC.9    //1=ON,0=OFF 
.................... #BIT TRIAC_2            = RBDC.10   //1=ON,0=OFF 
.................... #BIT RELAY_1            = RBDC.11   //0=ON,1=OFF 
.................... #BIT RELAY_2            = RBDC.12   //0=ON,1=OFF 
....................  
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX    
.................... CONST UNSIGNED CHAR MA7DOAN[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8, 
.................... 0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E}; 
.................... #DEFINE     MASO0    0XC0 
.................... #DEFINE     MASO1    0XF9 
.................... #DEFINE     MASO2    0XA4 
.................... #DEFINE     MASO3    0XB0 
.................... #DEFINE     MASO4    0X99 
.................... #DEFINE     MASO5    0X92 
.................... #DEFINE     MASO6    0X82 
.................... #DEFINE     MASO7    0XF8 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 102 XUAT 1 BYTE RA THANH GHI DICH 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID XUAT_1BYTE(UNSIGNED INT8 X) 
.................... { 
....................    UNSIGNED INT8 SB;    
....................    #BIT BSERI  = X.7 
....................    FOR(SB=0;SB<8;SB++) 
*
0024:  CLRF   35
0026:  MOVF   35,W
0028:  SUBLW  07
002A:  BNC   0048
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERI);     
002C:  BTFSC  34.7
002E:  BRA    0034
0030:  BCF    F8D.2
0032:  BRA    0036
0034:  BSF    F8D.2
0036:  BCF    F96.2
....................          OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
0038:  BCF    F96.0
003A:  BCF    F8D.0
003C:  BCF    F96.0
003E:  BSF    F8D.0
....................          X= X<<1;          
0040:  BCF    FD8.0
0042:  RLCF   34,F
0044:  INCF   35,F
0046:  BRA    0026
....................      } 
0048:  RETURN 0
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 301 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_4BYTE(UNSIGNED INT8 BLD3,BLD2,BLD1,BLD0) 
.................... {      
....................       XUAT_1BYTE(BLD3);           
*
03B2:  MOVFF  30,34
03B6:  RCALL  0024
....................       XUAT_1BYTE(BLD2); 
03B8:  MOVFF  31,34
03BC:  RCALL  0024
....................       XUAT_1BYTE(BLD1);           
03BE:  MOVFF  32,34
03C2:  RCALL  0024
....................       XUAT_1BYTE(BLD0);             
03C4:  MOVFF  33,34
03C8:  RCALL  0024
....................                        
....................       OUTPUT_HIGH(RCK_32LED);     
03CA:  BCF    F95.4
03CC:  BSF    F8C.4
....................       OUTPUT_LOW(RCK_32LED); 
03CE:  BCF    F95.4
03D0:  BCF    F8C.4
03D2:  GOTO   03F8 (RETURN)
....................      
.................... } 
.................... //HAM 302 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 WORD 16 BITRA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_2WORD(UNSIGNED INT16 WLD1, UNSIGNED INT16 WLD0) 
.................... {      
....................      UNSIGNED INT8  B3,B2,B1,B0; 
....................      B3 = WLD1>>8;  B2 = WLD1;  
03D6:  MOVFF  29,2C
03DA:  MOVFF  28,2D
....................      B1 = WLD0>>8;  B0 = WLD0; 
03DE:  MOVFF  2B,2E
03E2:  MOVFF  2A,2F
....................      XUAT_32LED_DON_4BYTE(B3,B2,B1,B0); 
03E6:  MOVFF  2C,30
03EA:  MOVFF  2D,31
03EE:  MOVFF  2E,32
03F2:  MOVFF  2F,33
03F6:  BRA    03B2
03F8:  GOTO   041E (RETURN)
.................... } 
.................... //HAM 303 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 1 DOUBLE WORD RA 32 LED DON 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_32LED_DON_1DW(UNSIGNED LONG LONG DWLD) 
.................... {      
....................      UNSIGNED INT16  WD1,WD0; 
....................      WD1 = DWLD>>16;  WD0 = DWLD; 
03FC:  MOVFF  22,24
0400:  MOVFF  23,25
0404:  MOVFF  21,27
0408:  MOVFF  20,26
....................      XUAT_32LED_DON_2WORD(WD1,WD0); 
040C:  MOVFF  25,29
0410:  MOVFF  24,28
0414:  MOVFF  27,2B
0418:  MOVFF  26,2A
041C:  BRA    03D6
041E:  RETURN 0
.................... } 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //XUAT 1 BIT ROI TRA LAI KET QUA SAU KHI DICH DI 1 BIT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... UNSIGNED  INT8 XUAT_1BIT(UNSIGNED INT8 BYTEXUAT) 
.................... { 
....................       UNSIGNED INT8   XBITX;    
....................       #BIT BSERIX  = XBITX.0 
....................       XBITX = BYTEXUAT; 
....................                                              
....................       OUTPUT_BIT(SSDO,BSERIX);     
....................       OUTPUT_LOW(SSCK); OUTPUT_HIGH(SSCK); 
....................       XBITX= XBITX>>1;    
....................       RETURN(XBITX);   
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... //ham 103: xuat 1 word ra thanh ghi dich 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     
.................... void xuat_1word(unsigned int16 w) 
.................... {   
....................    unsigned int8 b1,b0; 
....................    b1 = w>>8; b0 = w; 
*
004A:  MOVFF  21,22
004E:  MOVFF  20,23
....................    xuat_1byte(b1);     
0052:  MOVFF  22,34
0056:  RCALL  0024
....................    xuat_1byte(b0); 
0058:  MOVFF  23,34
005C:  RCALL  0024
005E:  RETURN 0
.................... }    
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx      
.................... //ham 104: xoa cac module  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   
.................... void xoa_tat_6module()                           
.................... {                                                                                               
....................    xuat_1word(0);                              
0060:  CLRF   21
0062:  CLRF   20
0064:  RCALL  004A
....................    xuat_1word(0);  
0066:  CLRF   21
0068:  CLRF   20
006A:  RCALL  004A
....................    xuat_1word(0);                              
006C:  CLRF   21
006E:  CLRF   20
0070:  RCALL  004A
....................    xuat_1word(0);                                     
0072:  CLRF   21
0074:  CLRF   20
0076:  RCALL  004A
....................     
....................    output_high(rck_buzerelay);    
0078:  BCF    F95.3
007A:  BSF    F8C.3
....................    output_low(rck_buzerelay); 
007C:  BCF    F95.3
007E:  BCF    F8C.3
....................     
....................    output_high(rck_32led); 
0080:  BCF    F95.4
0082:  BSF    F8C.4
....................    output_low(rck_32led);  
0084:  BCF    F95.4
0086:  BCF    F8C.4
....................     
....................    output_high(rck_8ledquet);    
0088:  BCF    F95.5
008A:  BSF    F8C.5
....................    output_low(rck_8ledquet);    
008C:  BCF    F95.5
008E:  BCF    F8C.5
....................                                   
....................    output_high(rck_matranled);           
0090:  BCF    F95.7
0092:  BSF    F8C.7
....................    output_low(rck_matranled);    
0094:  BCF    F95.7
0096:  BCF    F8C.7
....................                             
....................    output_high(rck_lcd20x4);    
0098:  BCF    F95.2
009A:  BSF    F8C.2
....................    output_low(rck_lcd20x4);       
009C:  BCF    F95.2
009E:  BCF    F8C.2
....................                                                                            
....................    xuat_1word(0xffff);  
00A0:  SETF   21
00A2:  SETF   20
00A4:  RCALL  004A
....................    xuat_1word(0xffff);  
00A6:  SETF   21
00A8:  SETF   20
00AA:  RCALL  004A
....................    output_high(rck_4led7doan);        
00AC:  BCF    F95.6
00AE:  BSF    F8C.6
....................    output_low(rck_4led7doan);                                                                       
00B0:  BCF    F95.6
00B2:  BCF    F8C.6
00B4:  GOTO   00D0 (RETURN)
.................... }              
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  
.................... //HAM 101 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... //HAM KHOI TAO CAC PORT VA IC CHOT 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     
.................... VOID SET_UP_PORT_IC_CHOT() 
.................... {      
....................    set_tris_a(0xff);    set_tris_b(0x3c);                                                    
00B8:  MOVLW  FF
00BA:  MOVWF  F92
00BC:  MOVLW  3C
00BE:  MOVWF  F93
....................    set_tris_c(0xf1);    set_tris_e(0x00);                                                
00C0:  MOVLW  F1
00C2:  MOVWF  F94
00C4:  MOVLW  00
00C6:  MOVWF  F96
....................    set_tris_d(0x00);     
00C8:  MOVWF  F95
....................    output_d(0x00);  
00CA:  CLRF   F95
00CC:  CLRF   F8C
....................    xoa_tat_6module(); 
00CE:  BRA    0060
....................    port_b_pullups(0xff);           
00D0:  BCF    FF1.7
....................    rbdc=0;                
00D2:  CLRF   06
00D4:  CLRF   05
....................              
....................    setup_adc(adc_clock_div_32);         
00D6:  MOVF   FC0,W
00D8:  ANDLW  C0
00DA:  IORLW  02
00DC:  MOVWF  FC0
00DE:  BSF    FC0.7
00E0:  BSF    FC2.0
....................    setup_adc_ports(an0_to_an2|vss_vdd);  
00E2:  MOVF   FC1,W
00E4:  ANDLW  C0
00E6:  IORLW  0C
00E8:  MOVWF  FC1
....................    output_low(g_all);         
00EA:  BCF    F95.0
00EC:  BCF    F8C.0
00EE:  GOTO   05BC (RETURN)
.................... } 
.................... //HAM 104 
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 4 BYTE RA 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_4LED_7DOAN_4SO(UNSIGNED INT BL743,BL742,BL741,BL740) 
.................... {      
....................       XUAT_1BYTE(BL740);   XUAT_1BYTE(BL741); 
*
0268:  MOVFF  29,34
026C:  RCALL  0024
026E:  MOVFF  28,34
0272:  RCALL  0024
....................       XUAT_1BYTE(BL742);   XUAT_1BYTE(BL743);        
0274:  MOVFF  27,34
0278:  RCALL  0024
027A:  MOVFF  26,34
027E:  RCALL  0024
....................       OUTPUT_LOW(RCK_4LED7DOAN);    
0280:  BCF    F95.6
0282:  BCF    F8C.6
....................       OUTPUT_HIGH(RCK_4LED7DOAN); 
0284:  BCF    F95.6
0286:  BSF    F8C.6
0288:  RETURN 0
....................  
.................... } 
.................... //ham 404 
.................... VOID XUAT_4LED_7DOAN_3SO(UNSIGNED INT BL742,BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,BL742,BL741,BL740); 
.................... } 
.................... //ham 403 
.................... VOID XUAT_4LED_7DOAN_2SO(UNSIGNED INT BL741,BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,BL741,BL740); 
.................... } 
.................... //ham 402 
.................... VOID XUAT_4LED_7DOAN_1SO(UNSIGNED INT BL740) 
.................... {      
....................      XUAT_4LED_7DOAN_4SO(0XFF,0XFF,0XFF,BL740); 
.................... } 
....................  
.................... //ham 405 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI DU LIEU 16 BIT TREN 4 LED 7 DOAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR DONVI4,CHUC4,TRAM4,NGAN4; 
.................... VOID  XUAT_4LED_7DOAN_GIAIMA_XOA_SO0 (UNSIGNED INT16 TAM) 
.................... {          
....................       DONVI4 = MA7DOAN[TAM %10];          
028A:  MOVFF  21,25
028E:  MOVFF  20,24
0292:  CLRF   27
0294:  MOVLW  0A
0296:  MOVWF  26
0298:  RCALL  0226
029A:  MOVFF  00,22
029E:  MOVFF  03,23
02A2:  MOVFF  03,03
02A6:  MOVF   00,W
02A8:  MOVFF  FF2,24
02AC:  BCF    FF2.7
02AE:  RCALL  0004
02B0:  BTFSC  24.7
02B2:  BSF    FF2.7
02B4:  MOVWF  07
....................       CHUC4  = MA7DOAN[TAM/10%10]; 
02B6:  MOVFF  21,25
02BA:  MOVFF  20,24
02BE:  CLRF   27
02C0:  MOVLW  0A
02C2:  MOVWF  26
02C4:  RCALL  0226
02C6:  MOVFF  02,23
02CA:  MOVFF  01,22
02CE:  MOVFF  02,25
02D2:  MOVFF  01,24
02D6:  CLRF   27
02D8:  MOVLW  0A
02DA:  MOVWF  26
02DC:  RCALL  0226
02DE:  MOVFF  00,22
02E2:  MOVFF  03,23
02E6:  MOVFF  03,03
02EA:  MOVF   00,W
02EC:  MOVFF  FF2,24
02F0:  BCF    FF2.7
02F2:  RCALL  0004
02F4:  BTFSC  24.7
02F6:  BSF    FF2.7
02F8:  MOVWF  08
....................       TRAM4  = MA7DOAN[TAM/100%10];  
02FA:  MOVFF  21,25
02FE:  MOVFF  20,24
0302:  CLRF   27
0304:  MOVLW  64
0306:  MOVWF  26
0308:  RCALL  0226
030A:  MOVFF  02,23
030E:  MOVFF  01,22
0312:  MOVFF  02,25
0316:  MOVFF  01,24
031A:  CLRF   27
031C:  MOVLW  0A
031E:  MOVWF  26
0320:  RCALL  0226
0322:  MOVFF  00,22
0326:  MOVFF  03,23
032A:  MOVFF  03,03
032E:  MOVF   00,W
0330:  MOVFF  FF2,24
0334:  BCF    FF2.7
0336:  RCALL  0004
0338:  BTFSC  24.7
033A:  BSF    FF2.7
033C:  MOVWF  09
....................       NGAN4  = MA7DOAN[TAM/1000%10];        
033E:  MOVFF  21,25
0342:  MOVFF  20,24
0346:  MOVLW  03
0348:  MOVWF  27
034A:  MOVLW  E8
034C:  MOVWF  26
034E:  RCALL  0226
0350:  MOVFF  02,23
0354:  MOVFF  01,22
0358:  MOVFF  02,25
035C:  MOVFF  01,24
0360:  CLRF   27
0362:  MOVLW  0A
0364:  MOVWF  26
0366:  RCALL  0226
0368:  MOVFF  00,22
036C:  MOVFF  03,23
0370:  MOVFF  03,03
0374:  MOVF   00,W
0376:  MOVFF  FF2,24
037A:  BCF    FF2.7
037C:  RCALL  0004
037E:  BTFSC  24.7
0380:  BSF    FF2.7
0382:  MOVWF  0A
....................       IF (NGAN4==0XC0) 
0384:  MOVF   0A,W
0386:  SUBLW  C0
0388:  BNZ   039C
....................       { 
....................          NGAN4=0XFF; 
038A:  SETF   0A
....................          IF (TRAM4==0XC0) 
038C:  MOVF   09,W
038E:  SUBLW  C0
0390:  BNZ   039C
....................          { 
....................             TRAM4=0XFF; 
0392:  SETF   09
....................             IF (CHUC4==0XC0)   CHUC4=0XFF; 
0394:  MOVF   08,W
0396:  SUBLW  C0
0398:  BNZ   039C
039A:  SETF   08
....................          } 
....................       } 
....................       XUAT_4LED_7DOAN_4SO(NGAN4,TRAM4,CHUC4,DONVI4);    
039C:  MOVFF  0A,26
03A0:  MOVFF  09,27
03A4:  MOVFF  08,28
03A8:  MOVFF  07,29
03AC:  RCALL  0268
03AE:  GOTO   05C6 (RETURN)
.................... } 
....................  
.................... void  XUAT_4LED_7DOAN_2_SO (unsigned int8 BH,BL) 
.................... {          
....................  XUAT_4LED_7DOAN_4SO(MA7DOAN[BH/10],MA7DOAN[BH%10],MA7DOAN[BL/10],MA7DOAN[BL%10]);    
*
04F8:  MOVFF  20,25
04FC:  MOVLW  0A
04FE:  MOVWF  26
0500:  RCALL  04D0
0502:  CLRF   03
0504:  MOVF   01,W
0506:  MOVFF  FF2,22
050A:  BCF    FF2.7
050C:  RCALL  0004
050E:  BTFSC  22.7
0510:  BSF    FF2.7
0512:  MOVWF  22
0514:  MOVFF  20,25
0518:  MOVLW  0A
051A:  MOVWF  26
051C:  RCALL  04D0
051E:  CLRF   03
0520:  MOVF   00,W
0522:  MOVFF  FF2,23
0526:  BCF    FF2.7
0528:  RCALL  0004
052A:  BTFSC  23.7
052C:  BSF    FF2.7
052E:  MOVWF  23
0530:  MOVFF  21,25
0534:  MOVLW  0A
0536:  MOVWF  26
0538:  RCALL  04D0
053A:  CLRF   03
053C:  MOVF   01,W
053E:  MOVFF  FF2,24
0542:  BCF    FF2.7
0544:  RCALL  0004
0546:  BTFSC  24.7
0548:  BSF    FF2.7
054A:  MOVWF  24
054C:  MOVFF  21,25
0550:  MOVLW  0A
0552:  MOVWF  26
0554:  RCALL  04D0
0556:  CLRF   03
0558:  MOVF   00,W
055A:  MOVFF  FF2,25
055E:  BCF    FF2.7
0560:  RCALL  0004
0562:  BTFSC  25.7
0564:  BSF    FF2.7
0566:  MOVWF  25
0568:  MOVFF  22,26
056C:  MOVFF  23,27
0570:  MOVFF  24,28
0574:  MOVWF  29
0576:  RCALL  0268
0578:  GOTO   0626 (RETURN)
.................... } 
....................  
.................... UNSIGNED INT8 LCDDATA=0;  
.................... UNSIGNED INT8 LCDCONTROL=0; 
.................... UNSIGNED INT8 GLCDDATA=0; 
.................... UNSIGNED INT8 GLCDCONTROL=0;  
.................... //HAM 701 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT DU LIEU 4 BYTE RA GLCD VA LCD 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_GLCD_LCD() 
.................... {       
....................     XUAT_1BYTE(GLCDCONTROL);              
....................     XUAT_1BYTE(GLCDDATA); 
....................     XUAT_1BYTE(LCDCONTROL);        
....................     XUAT_1BYTE(LCDDATA);       
....................           
....................     OUTPUT_HIGH(RCK_LCD20X4);      
....................     OUTPUT_LOW(RCK_LCD20X4); 
.................... } 
.................... //HAM 702 
.................... VOID XUAT_LCD20X4(UNSIGNED INT8 LCD_SIGNAL,LCD_INS_HTHI) 
.................... {      
....................     LCDCONTROL = ~LCD_SIGNAL; 
....................     LCDDATA    = ~LCD_INS_HTHI;       
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 703 
.................... VOID XUAT_GLCD128X64(UNSIGNED INT8 GLCD_SIGNAL,GLCD_INS_HTHI) 
.................... {      
....................     GLCDCONTROL = ~GLCD_SIGNAL; 
....................     GLCDDATA    = ~GLCD_INS_HTHI;      
....................     XUAT_GLCD_LCD(); 
.................... } 
.................... //HAM 501 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA DK 1 LED QUET SANG 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_1(UNSIGNED INT MA,SO_HTHI) 
.................... {      
....................       XUAT_1BYTE(~MA);    
....................       XUAT_1BYTE(~SO_HTHI); 
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 502 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT 2 BYTE RA TAT 8 LED QUET 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_8LED_7DOAN_QUET_TAT_LED() 
.................... { 
....................    XUAT_8LED_7DOAN_QUET_1(0XFF,0XFF); 
.................... } 
.................... //HAM 503 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI LED THEO THU TU 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... CONST UNSIGNED CHAR TTLEDQUET[8]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE}; 
.................... VOID XUAT_8LED_7DOAN_QUET_2(UNSIGNED INT THUTULED,SO_HTHI) 
.................... {          
....................       XUAT_1BYTE(~ (TTLEDQUET[THUTULED]));    
....................       XUAT_1BYTE(~SO_HTHI);      
....................       OUTPUT_HIGH(RCK_8LEDQUET);  
....................       OUTPUT_LOW(RCK_8LEDQUET); 
.................... } 
.................... //HAM 504 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - CO KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... UNSIGNED CHAR LED_7DQ[8]={0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF}; 
.................... UNSIGNED INT8 TT8LED=0; 
.................... VOID HIEN_THI_8LED_7DOAN_QUET() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++) 
....................          IF (LED_7DQ[TT8LED]!=0XFF) 
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
.................... //HAM 505 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON HIEN THI 8 SO TREN 8 LED QUET - KHONG KIEM TRA 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID HIEN_THI_8LED_7DOAN_QUET_ALL() 
.................... {      
....................       FOR(TT8LED=0;TT8LED<8;TT8LED++)          
....................          {            
....................             XUAT_8LED_7DOAN_QUET_2(TT8LED, LED_7DQ[TT8LED]); 
....................             DELAY_US(100); 
....................             XUAT_8LED_7DOAN_QUET_TAT_LED();            
....................             } 
.................... } 
....................  
.................... VOID DELAY_QUET_8LED(UNSIGNED INT16 DL) 
.................... {  
....................       UNSIGNED INT8 I; 
....................       FOR (I=0; I<DL;I++) 
....................       HIEN_THI_8LED_7DOAN_QUET_ALL(); 
.................... }  
....................  
.................... VOID GIAI_MA_GAN_CHO_8LED_QUET_16_XOA(UNSIGNED INT16 X) 
.................... {      
....................       LED_7DQ[0]= MA7DOAN [X %10];     
....................       LED_7DQ[1]= MA7DOAN [X/10%10]; 
....................       LED_7DQ[2]= MA7DOAN [X/100%10];     
....................       LED_7DQ[3]= MA7DOAN [X/1000%10]; 
....................       LED_7DQ[4]= MA7DOAN [X/10000%10]; 
....................       IF (LED_7DQ[4]==MASO0)  
....................       { 
....................             LED_7DQ[4]=0XFF; 
....................             IF (LED_7DQ[3]==MASO0)  
....................             { 
....................                LED_7DQ[3]=0XFF; 
....................                IF (LED_7DQ[2]==MASO0)  
....................                { 
....................                   LED_7DQ[2]=0XFF; 
....................                   IF (LED_7DQ[1]==MASO0)  
....................                   { 
....................                      LED_7DQ[1]=0XFF; 
....................                   } 
....................                } 
....................             } 
....................       } 
....................              
.................... } 
....................  
....................  
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX          
.................... VOID XUAT_2BYTE(UNSIGNED INT16 X) 
.................... { 
....................    INT8 SBB; 
....................    #BIT BSERIX  = X.15 
....................    FOR (SBB=0;SBB<16;SBB++) 
....................       {                                                  
....................          OUTPUT_BIT(SSDO,BSERIX);     
....................          OUTPUT_LOW(SSCK);          
....................          OUTPUT_HIGH(SSCK); 
....................          X= X<<1;          
....................      } 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_MATRANLED(UNSIGNED INT16 MAHANG,UNSIGNED INT16 MACOT1, 
.................... UNSIGNED INT16 MACOT2,UNSIGNED INT16 MACOT3) 
.................... {       
....................       XUAT_2BYTE(MACOT3); 
....................       XUAT_2BYTE(MACOT2); 
....................       XUAT_2BYTE(MACOT1); 
....................       XUAT_2BYTE(MAHANG);      
....................  
....................       OUTPUT_HIGH(RCK_MATRANLED);  
....................       OUTPUT_LOW(RCK_MATRANLED); 
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //CHUONG TRINH CON XUAT RA LED MA TRAN 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TAT_MATRANLED() 
.................... {       
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0); 
....................       XUAT_2BYTE(0);            
....................       OUTPUT_HIGH(RCK_MATRANLED); OUTPUT_LOW(RCK_MATRANLED);  
.................... } 
.................... UNSIGNED  INT8 HIEU_CHINH_4BIT_CAO(UNSIGNED INT8 XZY) 
.................... { 
....................       INT1  BTG; 
....................       UNSIGNED INT8   BX;    
....................       #BIT BIT4  = BX.4 
....................       #BIT BIT5  = BX.5 
....................       #BIT BIT6  = BX.6 
....................       #BIT BIT7  = BX.7 
....................       BX=XZY; 
....................       BTG=BIT4;   BIT4=BIT7;  BIT7=BTG; 
....................       BTG=BIT5;   BIT5=BIT6;  BIT6=BTG;       
....................       RETURN(BX);   
.................... } 
.................... //HAM 601 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... //MODULE DIEU KHIEN RELAY,TRIAC, BUZZER, DONG CO, SIM 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID XUAT_BUZZER_RELAY() 
.................... {      
....................    UNSIGNED INT8 RBDC1,RBDC2; 
....................       RBDC1=RBDC; RBDC2=RBDC>>8;       
....................       XUAT_1BYTE(RBDC2);       
....................       XUAT_1BYTE(RBDC1); 
....................        
....................       OUTPUT_HIGH(RCK_BUZERELAY);    
....................       OUTPUT_LOW(RCK_BUZERELAY); 
.................... } 
.................... //HAM 602 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_ON() 
.................... {     
....................       BUZZER=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID BUZZER_OFF() 
.................... {      
....................       BUZZER=0; 
....................       XUAT_BUZZER_RELAY(); 
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_ON() 
.................... {     
....................       RELAY_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 603 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_OFF() 
.................... {     
....................       RELAY_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 604 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_ON() 
.................... {     
....................       RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 607 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_2_OFF() 
.................... {     
....................       RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 608 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_ON() 
.................... {     
....................       RELAY_1=1;  RELAY_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 609 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID RELAY_1_RELAY_2_OFF() 
.................... {     
....................       RELAY_1=0;  RELAY_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 610 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_ON() 
.................... {     
....................       TRIAC_1=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 611 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_1_OFF() 
.................... {     
....................       TRIAC_1=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 612 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_ON() 
.................... {     
....................       TRIAC_2=1; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //HAM 613 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
.................... VOID TRIAC_2_OFF() 
.................... {     
....................       TRIAC_2=0; 
....................       XUAT_BUZZER_RELAY();          
.................... } 
.................... //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 
....................  
.................... VOID GGMMAA() 
.................... { 
....................    UNSIGNED INT8   X;    
....................    X=MA7DOAN[1]; 
.................... } 
....................  
....................  
.................... #INCLUDE <TV_PICKIT2_SHIFT_DS18B20.c>  
.................... #DEFINE     TOUCH_PIN PIN_A5 
.................... #INCLUDE    <TOUCH.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                        Dallas Touch Driver                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_bit()     Reads one bit from a touch device    //// 
.................... ////                                                                   //// 
.................... ////  data = touch_read_BYTE()    Reads one byte from a touch device.  //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_bit(data)  Writes one bit to a touch device     //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  ok = touch_write_byte(data) Writes one byte to a touch device    //// 
.................... ////                              and returns true if all went ok.     //// 
.................... ////                              A false indicates a collision with   //// 
.................... ////                              another device.                      //// 
.................... ////                                                                   //// 
.................... ////  present = touch_present()   Issues a reset and returns true      //// 
.................... ////                              if the touch device is there.        //// 
.................... ////                                                                   //// 
.................... ////  reset_pulse()               Issues a reset and waits for a       //// 
.................... ////                              present pulse.                       //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef  TOUCH_C 
.................... #define  TOUCH_C 
....................  
.................... #ifndef TOUCH_PIN 
....................    #define TOUCH_PIN  PIN_B0 
.................... #endif 
....................  
.................... #define TOUCH_PIN_LOW()    output_drive(TOUCH_PIN); output_low(TOUCH_PIN) 
.................... #define TOUCH_PIN_HIGH()    output_drive(TOUCH_PIN); output_high(TOUCH_PIN) 
.................... #define TOUCH_PIN_FLOAT()  output_float(TOUCH_PIN) 
.................... #define TOUCH_PIN_READ()      input_state(TOUCH_PIN) 
....................  
.................... ///////////////////////////// 
.................... ////                     //// 
.................... //// Function Prototypes //// 
.................... ////                     //// 
.................... ///////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit(); 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte(); 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data); 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data); 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present(); 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse(); 
....................  
.................... ////////////////////////////////// 
.................... ////                          //// 
.................... //// Function Implementations //// 
.................... ////                          //// 
.................... ////////////////////////////////// 
....................  
.................... /* 
.................... int1 touch_read_bit() 
.................... This will read back a bit from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A bit from the DS1993 
.................... */ 
.................... int1 touch_read_bit() 
.................... { 
....................    int1 data; 
....................  
....................    TOUCH_PIN_LOW(); 
*
0420:  BCF    F92.5
0422:  BCF    F92.5
0424:  BCF    F89.5
....................    delay_us(14); 
0426:  MOVLW  16
0428:  MOVWF  00
042A:  DECFSZ 00,F
042C:  BRA    042A
042E:  BRA    0430
0430:  NOP   
....................    TOUCH_PIN_FLOAT(); 
0432:  BSF    F92.5
....................    delay_us(5); 
0434:  MOVLW  07
0436:  MOVWF  00
0438:  DECFSZ 00,F
043A:  BRA    0438
043C:  BRA    043E
043E:  NOP   
....................    data = TOUCH_PIN_READ(); 
0440:  BCF    22.0
0442:  BTFSC  F80.5
0444:  BSF    22.0
....................    delay_us(100); 
0446:  MOVLW  A6
0448:  MOVWF  00
044A:  DECFSZ 00,F
044C:  BRA    044A
044E:  NOP   
....................  
....................    return data; 
0450:  MOVLW  00
0452:  BTFSC  22.0
0454:  MOVLW  01
0456:  MOVWF  01
0458:  GOTO   0468 (RETURN)
.................... } 
....................  
.................... /* 
.................... BYTE touch_read_byte() 
.................... This will read back a byte from the DS1993 
.................... PARAMS: none 
.................... RETURNS: A byte from the DS1993 
.................... */ 
.................... BYTE touch_read_byte() 
.................... { 
....................    BYTE i,data; 
....................  
....................    for(i=1; i <= 8; ++i) 
045C:  MOVLW  01
045E:  MOVWF  20
0460:  MOVF   20,W
0462:  SUBLW  08
0464:  BNC   0478
....................       shift_right(&data, 1, touch_read_bit()); 
0466:  BRA    0420
0468:  MOVF   01,F
046A:  BNZ   0470
046C:  BCF    FD8.0
046E:  BRA    0472
0470:  BSF    FD8.0
0472:  RRCF   21,F
0474:  INCF   20,F
0476:  BRA    0460
....................  
....................    return data; 
0478:  MOVFF  21,01
047C:  RETURN 0
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... This will write a bit to the DS1993 
.................... PARAMS: The bit to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_bit(int1 data) 
.................... { 
....................    TOUCH_PIN_LOW(); 
*
015A:  BCF    F92.5
015C:  BCF    F92.5
015E:  BCF    F89.5
....................    delay_us(10); 
0160:  MOVLW  10
0162:  MOVWF  00
0164:  DECFSZ 00,F
0166:  BRA    0164
0168:  NOP   
....................    if(data) 
016A:  MOVF   23,F
016C:  BZ    018A
....................    { 
....................       TOUCH_PIN_HIGH(); 
016E:  BCF    F92.5
0170:  BCF    F92.5
0172:  BSF    F89.5
....................       delay_us(10); 
0174:  MOVLW  10
0176:  MOVWF  00
0178:  DECFSZ 00,F
017A:  BRA    0178
017C:  NOP   
....................       if(!TOUCH_PIN_READ()) 
017E:  BTFSC  F80.5
0180:  BRA    0188
....................          return FALSE; 
0182:  MOVLW  00
0184:  MOVWF  01
0186:  BRA    01C6
....................    } 
0188:  BRA    01A4
....................    else 
....................    { 
....................       TOUCH_PIN_LOW(); 
018A:  BCF    F92.5
018C:  BCF    F92.5
018E:  BCF    F89.5
....................       delay_us(10); 
0190:  MOVLW  10
0192:  MOVWF  00
0194:  DECFSZ 00,F
0196:  BRA    0194
0198:  NOP   
....................       if(TOUCH_PIN_READ()) 
019A:  BTFSS  F80.5
019C:  BRA    01A4
....................          return FALSE; 
019E:  MOVLW  00
01A0:  MOVWF  01
01A2:  BRA    01C6
....................    } 
....................    delay_us(50); 
01A4:  MOVLW  52
01A6:  MOVWF  00
01A8:  DECFSZ 00,F
01AA:  BRA    01A8
01AC:  BRA    01AE
01AE:  NOP   
....................    TOUCH_PIN_HIGH(); 
01B0:  BCF    F92.5
01B2:  BCF    F92.5
01B4:  BSF    F89.5
....................    delay_us(50); 
01B6:  MOVLW  52
01B8:  MOVWF  00
01BA:  DECFSZ 00,F
01BC:  BRA    01BA
01BE:  BRA    01C0
01C0:  NOP   
....................    return TRUE; 
01C2:  MOVLW  01
01C4:  MOVWF  01
01C6:  GOTO   01E4 (RETURN)
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... This will write a byte to the DS1993 
.................... PARAMS: The byte to write 
.................... RETURNS: True if completed successfully, false if otherwise 
.................... */ 
.................... BOOLEAN touch_write_byte(BYTE data) 
.................... { 
....................    BYTE i; 
....................  
....................    for(i=1; i<=8; ++i) 
01CA:  MOVLW  01
01CC:  MOVWF  21
01CE:  MOVF   21,W
01D0:  SUBLW  08
01D2:  BNC   01F2
....................       if(!touch_write_bit(shift_right(&data, 1, 0))) 
01D4:  BCF    FD8.0
01D6:  RRCF   20,F
01D8:  MOVLW  00
01DA:  BTFSC  FD8.0
01DC:  MOVLW  01
01DE:  MOVWF  22
01E0:  MOVWF  23
01E2:  BRA    015A
01E4:  MOVF   01,F
01E6:  BNZ   01EE
....................          return FALSE; 
01E8:  MOVLW  00
01EA:  MOVWF  01
01EC:  BRA    01F6
01EE:  INCF   21,F
01F0:  BRA    01CE
....................  
....................    return TRUE; 
01F2:  MOVLW  01
01F4:  MOVWF  01
01F6:  RETURN 0
.................... } 
....................  
.................... /* 
.................... BOOLEAN touch_present() 
.................... This will evaluate whether or not there is a touch present on the DS1993 
.................... PARAMS: none 
.................... RETURNS: True if a touch is present, false if otherwise 
.................... */ 
.................... BOOLEAN touch_present() 
.................... { 
....................    BOOLEAN present; 
....................    TOUCH_PIN_LOW(); 
*
010C:  BCF    F92.5
010E:  BCF    F92.5
0110:  BCF    F89.5
....................    delay_us(500); 
0112:  MOVLW  02
0114:  MOVWF  21
0116:  MOVLW  F9
0118:  MOVWF  22
011A:  RCALL  00F2
011C:  DECFSZ 21,F
011E:  BRA    0116
....................    TOUCH_PIN_FLOAT(); 
0120:  BSF    F92.5
....................    delay_us(5); 
0122:  MOVLW  07
0124:  MOVWF  00
0126:  DECFSZ 00,F
0128:  BRA    0126
012A:  BRA    012C
012C:  NOP   
....................  
....................    if(!TOUCH_PIN_READ()) 
012E:  BTFSC  F80.5
0130:  BRA    0138
....................       return FALSE; 
0132:  MOVLW  00
0134:  MOVWF  01
0136:  BRA    0158
....................  
....................    delay_us(65); 
0138:  MOVLW  6B
013A:  MOVWF  00
013C:  DECFSZ 00,F
013E:  BRA    013C
0140:  BRA    0142
0142:  NOP   
....................    present = !TOUCH_PIN_READ(); 
0144:  BCF    20.0
0146:  BTFSS  F80.5
0148:  BSF    20.0
....................    delay_us(240); 
014A:  MOVLW  F0
014C:  MOVWF  22
014E:  RCALL  00F2
....................    return present; 
0150:  MOVLW  00
0152:  BTFSC  20.0
0154:  MOVLW  01
0156:  MOVWF  01
0158:  RETURN 0
.................... } 
....................  
.................... /* 
.................... void reset_pulse() 
.................... This will send the DS1993 a reset pulse 
.................... PARAMS: none 
.................... RETURNS: none 
.................... */ 
.................... void reset_pulse() 
.................... { 
....................    TOUCH_PIN_LOW(); 
....................    delay_us(500); 
....................    TOUCH_PIN_FLOAT(); 
....................    delay_us(5); 
....................    while(!touch_present()); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #DEFINE       SKIP_ROM              0xCC 
.................... #DEFINE       CONVERT_T             0x44 
.................... #DEFINE       READ_SCRATCHPAD       0xBE 
.................... #DEFINE       WRITE_SCRATCHPAD      0x4E 
.................... #DEFINE       COPY_SCRATCHPAD       0x48     
.................... UNSIGNED INT8     DS18AL, DS18AH, DS18A_TAM; 
.................... UNSIGNED INT16    DS18A; 
.................... VOID  KHOI_TAO_DS18B20() 
.................... {                          
....................       TOUCH_PRESENT(); 
*
01F8:  RCALL  010C
....................       TOUCH_WRITE_BYTE(SKIP_ROM);       
01FA:  MOVLW  CC
01FC:  MOVWF  20
01FE:  RCALL  01CA
....................       TOUCH_WRITE_BYTE(WRITE_SCRATCHPAD);     
0200:  MOVLW  4E
0202:  MOVWF  20
0204:  RCALL  01CA
....................       TOUCH_WRITE_BYTE(0x0);       // ghi 2 byte rong 
0206:  CLRF   20
0208:  RCALL  01CA
....................       TOUCH_WRITE_BYTE(0x0);       // 
020A:  CLRF   20
020C:  RCALL  01CA
....................       TOUCH_WRITE_BYTE(0x1F);      //Cau hinh do phan giai 9 bit 
020E:  MOVLW  1F
0210:  MOVWF  20
0212:  RCALL  01CA
....................  
....................       TOUCH_PRESENT(); 
0214:  RCALL  010C
....................       TOUCH_WRITE_BYTE(SKIP_ROM);       
0216:  MOVLW  CC
0218:  MOVWF  20
021A:  RCALL  01CA
....................       TOUCH_WRITE_BYTE(COPY_SCRATCHPAD);  
021C:  MOVLW  48
021E:  MOVWF  20
0220:  RCALL  01CA
0222:  GOTO   05BE (RETURN)
.................... } 
.................... VOID  DOC_GIATRI_DS18B20() 
.................... {  
....................       TOUCH_WRITE_BYTE(SKIP_ROM); 
*
047E:  MOVLW  CC
0480:  MOVWF  20
0482:  RCALL  01CA
....................       TOUCH_WRITE_BYTE (CONVERT_T);    
0484:  MOVLW  44
0486:  MOVWF  20
0488:  RCALL  01CA
....................       TOUCH_PRESENT(); 
048A:  RCALL  010C
....................       TOUCH_WRITE_BYTE(SKIP_ROM); 
048C:  MOVLW  CC
048E:  MOVWF  20
0490:  RCALL  01CA
....................       TOUCH_WRITE_BYTE(READ_SCRATCHPAD);   
0492:  MOVLW  BE
0494:  MOVWF  20
0496:  RCALL  01CA
....................       DS18AL = TOUCH_READ_BYTE(); 
0498:  RCALL  045C
049A:  MOVFF  01,18
....................       DS18AH = TOUCH_READ_BYTE();       
049E:  RCALL  045C
04A0:  MOVFF  01,19
....................       DS18A   =  MAKE16(DS18AH,DS18AL);         
04A4:  MOVFF  19,1C
04A8:  MOVFF  18,1B
04AC:  GOTO   05DA (RETURN)
.................... } 
....................              
....................  
....................  
.................... INT1  TTQN; 
.................... #DEFINE  GH_NDA_TREN    33 
.................... #DEFINE  GH_NDA_DUOI    31 
....................  
.................... VOID MAIN() 
*
057C:  CLRF   FF8
057E:  BCF    FD0.7
0580:  BSF    FB8.3
0582:  MOVLW  08
0584:  MOVWF  FAF
0586:  MOVLW  02
0588:  MOVWF  FB0
058A:  MOVLW  A6
058C:  MOVWF  FAC
058E:  MOVLW  90
0590:  MOVWF  FAB
0592:  CLRF   04
0594:  CLRF   0B
0596:  CLRF   0C
0598:  CLRF   0D
059A:  CLRF   0E
059C:  CLRF   17
059E:  MOVF   FC1,W
05A0:  ANDLW  C0
05A2:  IORLW  0F
05A4:  MOVWF  FC1
05A6:  MOVLW  07
05A8:  MOVWF  FB4
05AA:  SETF   0F
05AC:  SETF   10
05AE:  SETF   11
05B0:  SETF   12
05B2:  SETF   13
05B4:  SETF   14
05B6:  SETF   15
05B8:  SETF   16
.................... { 
....................    SET_UP_PORT_IC_CHOT(); 
05BA:  BRA    00B8
....................    KHOI_TAO_DS18B20(); 
05BC:  BRA    01F8
....................    DS18A_TAM=0; 
05BE:  CLRF   1A
....................    XUAT_4LED_7DOAN_GIAIMA_XOA_SO0(0); 
05C0:  CLRF   21
05C2:  CLRF   20
05C4:  BRA    028A
....................    XUAT_32LED_DON_1DW(0); 
05C6:  CLRF   23
05C8:  CLRF   22
05CA:  CLRF   21
05CC:  CLRF   20
05CE:  RCALL  03FC
....................    TTQN=0; 
05D0:  BCF    1D.0
....................    WHILE(TRUE) 
....................    { 
....................       IF(TOUCH_PRESENT()) 
05D2:  RCALL  010C
05D4:  MOVF   01,F
05D6:  BZ    05DA
....................       { DOC_GIATRI_DS18B20();} 
05D8:  BRA    047E
....................          DS18A=DS18A>>4;    
05DA:  RRCF   1C,F
05DC:  RRCF   1B,F
05DE:  RRCF   1C,F
05E0:  RRCF   1B,F
05E2:  RRCF   1C,F
05E4:  RRCF   1B,F
05E6:  RRCF   1C,F
05E8:  RRCF   1B,F
05EA:  MOVLW  0F
05EC:  ANDWF  1C,F
....................          unsigned int16 thapphan =(DS18A&0X000F)*100/16;      //lay 1 so thap phan nhan 10 
05EE:  MOVF   1B,W
05F0:  ANDLW  0F
05F2:  MOVWF  20
05F4:  CLRF   21
05F6:  MOVFF  21,23
05FA:  MOVWF  22
05FC:  CLRF   25
05FE:  MOVLW  64
0600:  MOVWF  24
0602:  BRA    04B0
0604:  RRCF   02,W
0606:  MOVWF  1F
0608:  RRCF   01,W
060A:  MOVWF  1E
060C:  RRCF   1F,F
060E:  RRCF   1E,F
0610:  RRCF   1F,F
0612:  RRCF   1E,F
0614:  RRCF   1F,F
0616:  RRCF   1E,F
0618:  MOVLW  0F
061A:  ANDWF  1F,F
....................                                                               //lay 2 so thap phan nhan 100    
....................                                                               //lay 3 so thap phan nhan 1000  
....................                                                               //lay 4 so thap phan nhan 10000  
....................          XUAT_4LED_7DOAN_2_SO(DS18A,thapphan); 
061C:  MOVFF  1B,20
0620:  MOVFF  1E,21
0624:  BRA    04F8
....................           
....................          IF ((DS18A>GH_NDA_TREN)&&(TTQN==0)) 
0626:  MOVF   1C,F
0628:  BNZ   0630
062A:  MOVF   1B,W
062C:  SUBLW  21
062E:  BC    0642
0630:  BTFSC  1D.0
0632:  BRA    0642
....................          { 
....................             TTQN=1; 
0634:  BSF    1D.0
....................             XUAT_32LED_DON_1DW(0X0000FFFF); 
0636:  CLRF   23
0638:  CLRF   22
063A:  SETF   21
063C:  SETF   20
063E:  RCALL  03FC
....................          } 
0640:  BRA    065C
....................          ELSE IF((DS18A<GH_NDA_DUOI)&&(TTQN==1)) 
0642:  MOVF   1C,F
0644:  BNZ   065C
0646:  MOVF   1B,W
0648:  SUBLW  1E
064A:  BNC   065C
064C:  BTFSS  1D.0
064E:  BRA    065C
....................          { 
....................             TTQN=0; 
0650:  BCF    1D.0
....................             XUAT_32LED_DON_1DW(0XFFFF0000); 
0652:  SETF   23
0654:  SETF   22
0656:  CLRF   21
0658:  CLRF   20
065A:  RCALL  03FC
....................       } 
065C:  BRA    05D2
....................    } 
.................... } 
065E:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
